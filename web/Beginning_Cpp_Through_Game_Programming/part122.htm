<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding Objects</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part121.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part123.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30">Understanding Objects</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far you<span class="s12">’</span>ve seen how to store individual pieces of information in variables and how to manipulate those variables using operators and functions. But most of the things you want to represent in games<span class="s12">—</span>such as, say, an alien spacecraft<span class="s12">— </span>are objects. They<span class="s12">’</span>re encapsulated, cohesive things that combine qualities (such as an energy level) and abilities (for example, firing weapons). Often it makes no sense to talk about the individual qualities and abilities in isolation from each other.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Fortunately, most modern programming languages let you work with software objects  (often  just  called  <span class="s11">objects</span>)  that  combine  data  and  functions.  A  data element of an  object is called a <span class="s11">data member</span>, while a function of an  object is called  a  <span class="s11">member  function</span>.  As  a  concrete  example,  think  about  that  alien spacecraft. An alien spacecraft object might be of a new type called <span class="s35">Spacecraft</span>, defined by a game programmer, and might have a data member for its energy level and a member function to fire its weapons. In practice, an object<span class="s12">’</span>s energy level might be stored in its data member <span class="s35">energy </span>as an <span class="s35">int</span>, and its ability to fire</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">its weapons might be defined in a member function called <span class="s35">fireWeapons()</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every object of the same type has the same basic structure, so each object will have the same set of data members and member functions. However, as an individual, each object will have its own values for its data members. If you had a squadron of five alien spacecrafts, each would have its own energy level. One might have an energy level of 75, while another might have a level of only 10, and so on. Even if two crafts have the same energy level, each would belong to a unique spacecraft. Each craft could also fire its own weapons with a call to its member function, <span class="s35">fireWeapons()</span>. Figure 3.2 illustrates the concept of an alien spacecraft.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark368">88 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="169" height="305" alt="image" src="Image_125.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 3.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">This representation of the definition of an alien spacecraft says that each object will have a data member called <span class="s35">energy </span>and a member function called <span class="s35">fireWeapons()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The cool thing about objects is that you don<span class="s12">’</span>t need to know the implementation details to use them<span class="s12">—</span>just as you don<span class="s12">’</span>t need to know how to build a car in order to drive one. You only have to know the object<span class="s12">’</span>s data members and member functions<span class="s12">—</span>just as you only need to know where a car<span class="s12">’</span>s steering wheel, gas pedal, and brake pedal are located.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can store objects in variables, just like with built-in types. Therefore, you could store an alien spacecraft object in a variable of the <span class="s35">Spacecraft  </span>type. You can  access  data  members  and  member  functions  using  the  member  selection operator (<span class="s35">.</span>), by placing the operator after the variable name of the object. So if you want your alien spacecraft, <span class="s35">ship</span>, to fire its weapons only if its energy level is greater than <span class="s35">10</span>, you could write:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">// ship is an object of Spacecraft type if (ship.energy &gt; 10)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">ship.fireWeapons()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 337pt;text-indent: 0pt;text-align: left;"><a name="bookmark323">Using String Objects 89</a><a name="bookmark369">&zwnj;</a><a name="bookmark370">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s35">ship.energy </span>accesses the object<span class="s12">’</span>s <span class="s35">energy </span>data member, while <span class="s35">ship.fireWeapons()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">calls the object<span class="s12">’</span>s <span class="s35">fireWeapons() </span>member function.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Although you can<span class="s12">’</span>t make your own new types (like for an alien spacecraft) just yet, you can work with previously defined object types. And that<span class="s12">’</span>s next on the agenda.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part121.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part123.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
