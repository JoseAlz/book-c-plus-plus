<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summarizing Constants and Pointers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part301.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part303.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark10">Summarizing Constants and Pointers</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I<span class="s12">’</span>ve presented a lot of information on constants and pointers, so I want to provide a summary to help crystallize the new concepts. Here are three examples of the different ways in which you can use the keyword <span class="s35">const </span>when you are declaring pointers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">int* const p = &amp;i;</span></p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><a name="bookmark820">n   </a><span class="s35">const int* p;</span><a name="bookmark868">&zwnj;</a></p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">const int* const p = &amp;I;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark821">The first example declares and initializes a constant pointer. A constant pointer can only point to the object to which it was initialized to point. The value</a><span class="s12">—</span>the memory address<span class="s12">—</span>stored in the pointer itself is constant and can<span class="s12">’</span>t change. A constant pointer can only point to a non-constant value; it can<span class="s12">’</span>t point to a constant.<a name="bookmark869">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The second example declares a pointer to a constant. A pointer to a constant can<span class="s12">’</span>t be used to change the value to which it points. A pointer to a constant can point to different objects during the life of a program. A pointer to a constant can point to a constant or non-constant value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The third example declares a constant pointer to a constant. A constant pointer to a constant can only point to the value to which it was initialized to point. In addition, it can<span class="s12">’</span>t be used to change the value to which it points. A constant pointer to a constant can be initialized to point to a constant or a non-constant value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part301.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part303.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
