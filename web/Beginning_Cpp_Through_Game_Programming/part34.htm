<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding Integer and Floating Point Division</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="part3.htm#bookmark3" class="h1">Understanding Integer and Floating Point </a><h1 href="#bookmark3">Division</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The symbol for division is the forward slash (<span class="s35">/</span>), so that<span class="s12">’</span>s what I use in the next line of code. However, the output might surprise you. According to C<span class="s14">þþ </span>(and that expensive gaming rig), 7 divided by 3 is 2. What<span class="s12">’</span>s going on? Well, the result of any arithmetic calculation involving only <span class="s11">integers </span>(numbers without fractional parts) is always another integer. And since <span class="s35">7 </span>and <span class="s35">3 </span>are both integers, the result must be an integer. The fractional part of the result is thrown away.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">To get a result that includes a fractional part, at least one of the values needs to be a <span class="s11">floating point </span>(a number with a fractional part). I demonstrate this in the</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">Using Arithmetic Operators 15</a><a name="bookmark115">&zwnj;</a><a name="bookmark116">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">next line with the expression <span class="s35">7.0 / 3.0</span>. This time the result is a more accurate</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">2.33333<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_042.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You might notice that while the result of <span class="s35">7.0 / 3.0 </span>(<span class="s35">2.33333</span>) includes a fractional part, it is still truncated. (The true result would stretch out <span class="s35">3</span>s after the decimal point forever.) It’s important to know that computers generally store only a limited number of significant digits for floating point numbers. However, C<span class="s36">þþ </span>offers categories of floating point numbers to meet the most demanding needs—even those of computationally intensive 3D games.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
