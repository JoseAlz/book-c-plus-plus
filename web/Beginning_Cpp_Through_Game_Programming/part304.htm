<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Introducing the Swap Pointer Version Program</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part303.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part305.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark10" class="h1">Introducing the Swap Pointer Version </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Swap Pointer Version program works just like the Swap program from Chapter 6, except that the Swap Pointer Version program uses pointers instead of references. The Swap Pointer Version program defines two variables<span class="s12">—</span>one</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Passing Pointers 235</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">that holds my pitifully low score and another that holds your impressively high score. After displaying the scores, the program calls a function meant to swap the scores. Because only copies of the score values are sent to the function, the original variables are unaltered. Next, the program calls another swap function. This time, through the use of constant pointers, the original variables<span class="s12">’ </span>values are successfully exchanged (giving me the great big score and leaving you with the small one). Figure 7.3 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="224" alt="image" src="Image_290.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 7.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Passing pointers allows a function to alter variables outside of the function’s scope.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">swap_pointer_ver.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Swap Pointer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates passing constant pointers to alter argument variables #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void badSwap(int x, int y);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void goodSwap(int* const pX, int* const pY);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark870">236 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int myScore = 150; int yourScore = 1000;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Original values\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Calling badSwap()\n&quot;; badSwap(myScore, yourScore);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark822">cout &lt;&lt; &quot;Calling goodSwap()\n&quot;; goodSwap(&amp;myScore, &amp;yourScore);</a><a name="bookmark871">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void badSwap(int x, int y)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int temp = x; x = y;</p><p class="s35" style="padding-left: 61pt;text-indent: 0pt;line-height: 11pt;text-align: left;">y = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void goodSwap(int* const pX, int* const pY)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;line-height: 119%;text-align: left;">//store value pointed to by pX in temp int temp = *pX;</p><p class="s35" style="padding-left: 61pt;text-indent: 0pt;line-height: 11pt;text-align: left;">//store value pointed to by pY in address pointed to by pX</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">*pX = *pY;</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">//store value originally pointed to by pX in address pointed to by pY</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pY = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part303.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part305.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
