<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the sort() Algorithm</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part179.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part181.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark6">Using the sort() Algorithm</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I sort the scores.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">sort(scores.begin(), scores.end());</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">sort() </span>algorithm sorts the elements of a sequence in ascending order. You must supply as iterators the starting and ending points of the sequence to sort. In this particular case, I passed the iterators returned by <span class="s35">scores.begin() </span>and <span class="s35">scores.end()</span>. These two iterators indicate that I want to sort all of the elements in <span class="s35">scores</span>. As a result, <span class="s35">scores </span>contains all of the scores in ascending order.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I display the scores to prove the sorting worked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_178.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">A very cool property of STL algorithms is that they can work with containers defined outside of the STL. These containers only have to meet certain requirements. For example, even though <span class="s35">string </span>objects are not part of the STL, you can use appropriate STL algorithms on them. The following code snippet demonstrates this:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">string word = &quot;High Scores&quot;; random_shuffle(word.begin(), word.end());</p><p class="s19" style="padding-top: 2pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The preceding code randomly shuffles the characters in <span class="s35">word</span>. As you can see, <span class="s35">string </span>objects have both <span class="s35">begin() </span>and <span class="s35">end() </span>member functions, which return iterators to the first character and one past the last character, respectively. That’s part of the reason why STL algorithms work with <span class="s35">string</span>s—because they’re designed to.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_179.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark452">136 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark453">&zwnj;</a><a name="bookmark517">&zwnj;</a><a name="bookmark518">&zwnj;</a><a name="bookmark519">&zwnj;</a><a name="bookmark520">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part179.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part181.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
