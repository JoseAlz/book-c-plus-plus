<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part284.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part286.htm">Next &gt;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference is an alias; it<span class="s12">’</span>s another name for a variable.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>You create a reference using <span class="s35">&amp;</span><span class="s12">—</span>the referencing operator.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference must be initialized when it<span class="s12">’</span>s defined.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference can<span class="s12">’</span>t be changed to refer to a different variable.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Whatever you do to a reference is done to the variable to which the reference refers.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you assign a reference to a variable, you create a new copy of the referenced value.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark800">218 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you pass a variable to a function by value, you pass a copy of the variable to the function.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you pass a variable to a function by reference, you pass access to the variable.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Passing by reference can be more efficient than passing by value, especially when you are passing large objects.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><a name="bookmark729">n </a><span class="p">Passing a reference provides direct access to the argument variable passed to a function. As a result, the function can make changes to the argument variable.</span><a name="bookmark801">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A constant reference can<span class="s12">’</span>t be used to change the value to which it refers.</p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">You declare a constant reference by using the keyword <span class="s35">const</span>.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can<span class="s12">’</span>t assign a constant reference or a constant value to a non-constant reference.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Passing a constant reference to a function protects the argument variable from being changed by that function.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">Changing the value of an argument variable passed to a function can lead to confusion, so game programmers consider passing a constant reference before passing a non-constant reference.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">Returning a reference can be more efficient than returning a copy of a value, especially when you are returning large objects.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>You can return a constant reference to an object so the object can<span class="s12">’</span>t be changed through the returned reference.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>A basic technique of game AI is to have the computer consider all of its legal moves and all of its opponent<span class="s12">’</span>s legal replies before deciding which move to take next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part284.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part286.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
