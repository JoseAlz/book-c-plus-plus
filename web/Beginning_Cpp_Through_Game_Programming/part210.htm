<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding Encapsulation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part209.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part211.htm">Next &gt;</a></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark7">Understanding Encapsulation</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You might not see the need for return values when you are using your own functions. Why not just use the variables <span class="s35">response1 </span>and <span class="s35">response2 </span>back in the <span class="s35">main()</span>? Because you can<span class="s12">’</span>t; <span class="s35">response1 </span>and <span class="s35">response2 </span>don<span class="s12">’</span>t exist outside of the functions in which they were defined. In fact, no variable you create in a function, including its parameters, can be directly accessed outside its function. This is a good thing, and it is called <span class="s11">encapsulation. </span>Encapsulation helps keep independent code truly separate by hiding or encapsulating the details. That<span class="s12">’</span>s why you use parameters and return values<span class="s12">—</span>to communicate only the informa- tion that needs to be exchanged. Plus, you don<span class="s12">’</span>t have to keep track of variables you create within a function in the rest of your program. As your programs get large, this is a great benefit.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Encapsulation might sound a lot like abstraction. That<span class="s12">’</span>s because they<span class="s12">’</span>re closely related. Encapsulation is a principal of abstraction. Abstraction saves you from worrying about the details, while encapsulation hides the details from you. As an example, consider a television remote control with volume up and down buttons. When you use a TV remote to change the volume, you<span class="s12">’</span>re employing abstraction because you don<span class="s12">’</span>t need to know what happens inside the TV for it to work. Now suppose the TV remote has 10 volume levels. You can get to them all through the remote, but you can<span class="s12">’</span>t directly access them. That is, you can<span class="s12">’</span>t get a specific volume number directly. You can only press the up volume and down volume buttons to eventually get to the level you want. The actual volume number is encapsulated and not directly available to you.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark567">Working with Scopes 161</a><a name="bookmark625">&zwnj;</a><a name="bookmark626">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part209.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part211.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
