<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring Pure Virtual Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part409.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part411.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">Declaring Pure Virtual Functions</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">pure virtual function </span>is one to which you don<span class="s12">’</span>t need to give a definition. The logic behind this is that there might not be a good definition in the class for the member function. For example, I don<span class="s12">’</span>t think it makes sense to define the <span class="s35">Greet() </span>function in my <span class="s35">Creature </span>class because a greeting really depends on the specific type of creature<span class="s12">—</span>a pixie twinkles, a dragon blows a puff of smoke, and an orc grunts.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1127">Using Abstract Classes 355</a><a name="bookmark1191">&zwnj;</a><a name="bookmark1192">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You specify a pure virtual function by placing an equal sign and a zero at the end of the function header. That<span class="s12">’</span>s what I did in <span class="s35">Creature </span>with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual void Greet() const = 0;      //pure virtual member function</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When a class contains at least one pure virtual function, it<span class="s12">’</span>s an abstract class. Therefore, <span class="s35">Creature </span>is an abstract class. I can use it as the base class for other classes, but I can<span class="s12">’</span>t instantiate objects from it.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">An abstract class can have data members and virtual functions that are not pure virtual. In <span class="s35">Creature</span>, I declare a data member <span class="s35">m_Health </span>and a virtual member function <span class="s35">DisplayHealth()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part409.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part411.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
