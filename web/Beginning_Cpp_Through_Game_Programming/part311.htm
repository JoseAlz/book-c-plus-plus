<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Assigning a Returned Pointer to a Pointer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part310.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part312.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark10">Assigning a Returned Pointer to a Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I assign a returned pointer to another pointer with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* pStr = ptrToElement(&amp;inventory, 1);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark829">The call to </a><span class="s35">prtToElement() </span>returns a pointer to <span class="s35">inventory[1]</span>. The statement assigns that pointer to <span class="s35">pStr</span>. This is an efficient assignment because assigning a pointer to a pointer does not involve copying the <span class="s35">string </span>object.<a name="bookmark884">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To help you understand the results of this line of code, look at Figure 7.5, which shows a representation of <span class="s35">pStr </span>after the assignment. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">â€™</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; instead, it contains <span class="s35">string </span>objects.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="118" alt="image" src="Image_296.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 7.5</p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">pStr <span class="s19">points to the element at position </span>1 <span class="s19">of </span>inventory<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I send <span class="s35">*pStr </span>to <span class="s35">cout </span>and <span class="s35">armor </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part310.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part312.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
