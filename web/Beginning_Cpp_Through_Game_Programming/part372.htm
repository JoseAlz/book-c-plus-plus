<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring and Defining Destructors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part371.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part373.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark12">Declaring and Defining Destructors</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">One problem that can occur when a data member of an object points to a value on the heap is a memory leak. That<span class="s12">’</span>s because when the object is deleted, the pointer to the heap value disappears along with it. If the heap value remains, it produces a memory leak. To avoid a memory leak, the object should clean up after itself before it is destroyed by deleting its associated heap value. Fortu- nately, there<span class="s12">’</span>s a member function, the <span class="s11">destructor</span>, that<span class="s12">’</span>s called just before an object is destroyed, which can be used to perform the necessary cleanup.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A default destructor, which is created for you by the compiler if you don<span class="s12">’</span>t write your own, doesn<span class="s12">’</span>t attempt to free any memory on the heap that a data member might point to. This behavior is usually fine for simple classes, but when you have a class with data members that point to values on the heap, you should write your own destructor so you can free the memory on the heap associated with an object before the object disappears, avoiding a memory leak. That<span class="s12">’</span>s what I do in the <span class="s35">Critter </span>class. First, inside the class definition, I declare the destructor. Notice that a destructor has the name of the class preceded by <span class="s35">~ </span>(the tilde character) and does not have any parameters or return a value.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::~Critter() //destructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Destructor called\n&quot;; delete m_pName;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  <span class="s35">main()</span>,  I  put  the  destructor  to  the  test  when  I  call  <span class="s35">testDestructor()</span>.  The function  creates  a <span class="s35">Critter  </span>object,  <span class="s35">toDestroy</span>, and  invokes  its  <span class="s35">Greet()  </span>method, which displays <span class="s35">I’m Rover and I’m 3 years old. &amp;m_pName: 73F2ED48003AF644</span>. The message provides a way to see the values of the object<span class="s12">’</span>s <span class="s35">m_Age </span>data member and the string pointed to by its <span class="s35">m_pName </span>data member. But it also displays the address of the string on the heap stored in the pointer <span class="s35">m_pName</span>. The important thing to</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><a name="bookmark1023">Working with Data Members and the Heap 309</a><a name="bookmark1073">&zwnj;</a><a name="bookmark1074">&zwnj;</a><a name="bookmark1075">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">note  is  that  after  the  <span class="s35">Greet()  </span>message  is  displayed,  the  function  ends  and <span class="s35">toDestroy   </span>is  ready  to  be  destroyed.  Fortunately,  <span class="s35">toDestroy</span><span class="s12">’</span>s   destructor  is automatically called just before this happens. The destructor displays <span class="s35">Destructor called </span>and deletes the <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>that<span class="s12">’</span>s on the heap, cleaning up after itself and leaking no memory. The destructor doesn<span class="s12">’</span>t do anything with the <span class="s35">m_Age  </span>data member. That<span class="s12">’</span>s perfectly fine since <span class="s35">m_Age  </span>isn<span class="s12">’</span>t on the heap, but part of <span class="s35">toDestroy </span>and will be properly disposed of right along with the rest of the <span class="s35">Critter  </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_355.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you have a class that allocates memory on the heap, you should write a destructor that cleans up and frees that memory.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_356.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part371.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part373.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
