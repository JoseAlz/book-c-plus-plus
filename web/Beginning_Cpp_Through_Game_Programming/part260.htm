<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring Parameters as Constant References</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part259.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part261.htm">Next &gt;</a></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark9" class="h1" name="bookmark704">Declaring Parameters as Constant </a><h1 href="#bookmark9">References</h1><a name="bookmark756">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function <span class="s35">display() </span>shows the contents of the hero<span class="s12">’</span>s inventory. In the function<span class="s12">’</span>s header I specify one parameter<span class="s12">—</span>a constant reference to a vector of <span class="s35">string </span>objects named <span class="s35">vec</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void display(const vector&lt;string&gt;&amp; vec)</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">constant reference </span>is a restricted reference. It acts like any other reference, except you can<span class="s12">’</span>t use it to change the value to which it refers. To create a constant reference, simply put the keyword <span class="s35">const </span>before the type in the reference declaration.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What does this all mean for the function <span class="s35">display()</span>? Because the parameter <span class="s35">vec </span>is a constant reference, it means <span class="s35">display() </span>can<span class="s12">’</span>t change <span class="s35">vec</span>. In turn, this means that <span class="s35">inventory </span>is safe; it can<span class="s12">’</span>t be changed by <span class="s35">display()</span>. In general, you can efficiently pass an argument to a function as a constant reference so it<span class="s12">’</span>s accessible, but not changeable. It<span class="s12">’</span>s like providing the function read-only access to the argument. Although constant references are very useful for specifying function parameters, you can use them anywhere in your program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_243.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A constant reference comes in handy in another way. If you need to assign a constant value to a reference, you have to assign it to a constant reference. (A non-constant reference won’t do.)</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_244.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part259.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part261.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
