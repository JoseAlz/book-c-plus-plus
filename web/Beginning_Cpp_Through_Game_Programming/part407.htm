<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Defining Virtual Destructors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part406.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part408.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark12">Defining Virtual Destructors</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you use a pointer to a base class to point to an object of a derived class, you have a potential problem. When you delete the pointer, only the base class<span class="s12">’ </span>destructor will be called for the object. This could lead to disastrous results because the derived class<span class="s12">’ </span>destructor might need to free memory (as the destructor for <span class="s35">Boss </span>does). The solution, as you might have guessed, is to make the base class<span class="s12">’ </span>destructor virtual. That way, the derived class<span class="s12">’ </span>destructor is called, which (as always) leads to the calling the base class<span class="s12">’ </span>destructor, giving every class the chance to clean up after itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I put this theory into action when I declare <span class="s35">Enemy</span><span class="s12">’</span>s destructor virtual.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual ~Enemy();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1186">352 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  <span class="s35">main()</span>,  when  I  delete  the  pointer  pointing  to  the  <span class="s35">Boss  </span>object  with  the following line, the <span class="s35">Boss </span>object<span class="s12">’</span>s destructor is called, which frees the memory on the heap that <span class="s35">m_pDamageMultiplier  </span>points to and displays the message <span class="s35">In Boss</span></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">destructor, deleting m_pMultiplier.</p><p class="s35" style="padding-top: 7pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pBadGuy;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1124">Then,  </a><span class="s35">Enemy</span><span class="s12">’</span>s  destructor  is  called,  which  frees  the  memory  on  the  heap  that <span class="s35">m_pDamage  </span>points  to  and  displays  the  message  <span class="s35">In  Enemy  destructor,  deleting m_pDamage. </span>The object is destroyed, and all memory associated with the object is freed.<a name="bookmark1125">&zwnj;</a><a name="bookmark1187">&zwnj;</a><a name="bookmark1188">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_441.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A good rule of thumb is that if you have any virtual member functions in a class, you should make the destructor virtual, too.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_442.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part406.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part408.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
