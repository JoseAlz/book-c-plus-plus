<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Working with Nested Scopes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part214.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part216.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark7">Working with Nested Scopes</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">You can create a nested scope with a pair of curly braces in an existing scope. That<span class="s12">’</span>s what I do next in <span class="s35">main()</span>, with:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Creating new var in new scope.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">int var = 10;    // variable in new scope, hides other variable named var cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This new scope is a nested scope in <span class="s35">main()</span>. The first thing I do in this nested scope is display <span class="s35">var</span>. If a variable hasn<span class="s12">’</span>t been declared in a scope, the computer looks up the levels of nested scopes one at a time to find the variable you requested. In this case, because <span class="s35">var </span>hasn<span class="s12">’</span>t been declared in this nested scope, the computer looks one level up to the scope that defines <span class="s35">main() </span>and finds <span class="s35">var</span>. As a result, the program displays that variable<span class="s12">’</span>s value<span class="s12">—</span>5.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, the next thing I do in this nested scope is declare a new variable named <span class="s35">var </span>and initialize it to 10. Now when I send <span class="s35">var </span>to <span class="s35">cout</span>, 10 is displayed. This time the computer doesn<span class="s12">’</span>t have to look up any levels of nested scopes to find <span class="s35">var</span>; there<span class="s12">’</span>s a <span class="s35">var </span>local to this scope. And don<span class="s12">’</span>t worry, the <span class="s35">var </span>I first declared in <span class="s35">main() </span>still exists; it<span class="s12">’</span>s simply hidden in this nested scope by the new <span class="s35">var</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_206.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you can declare variables with the same name in a series of nested scopes, it’s not a good idea because it can lead to confusion.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_207.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next, when the nested scope ends, the <span class="s35">var </span>that was equal to 10 goes out of scope and ceases to exist. However, the first <span class="s35">var </span>I created is still around, so when I display <span class="s35">var </span>for the last time in <span class="s35">main() </span>with the following line, the program displays 5.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;At end of main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark572">166 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark635">&zwnj;</a><a name="bookmark636">&zwnj;</a><a name="bookmark637">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_208.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you define variables inside <span class="s35">for </span>loops, <span class="s35">while </span>loops, <span class="s35">if </span>statements, and <span class="s35">switch </span>statements, these variables don’t exist outside their structures. They act like variables declared in a nested scope. For example, in the following code, the variable <span class="s35">i </span>doesn’t exist outside the loop.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for(int i = 0; i &lt; 10; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">// i doesn’t exist outside the loop</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark573">But beware—some older compilers don’t properly implement this functionality of standard C++. I recommend that you use an IDE with a modern compiler, such as Microsoft Visual C++ 2010 Express Edition. For step-by-step instructions on how to create your first project with this IDE, check out Appendix A.</a><a name="bookmark638">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_209.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part214.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part216.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
