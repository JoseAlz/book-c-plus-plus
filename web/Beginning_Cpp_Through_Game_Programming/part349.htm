<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Critter Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">The Critter Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Critter </span>class is the blueprint for the object that represents the player<span class="s12">’</span>s critter. The class isn<span class="s12">’</span>t complicated, and most of it should look familiar, but it<span class="s12">’</span>s long enough that it makes sense to attack it in pieces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Class Definition</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">After some initial comments and statements, I begin the <span class="s35">Critter </span>class.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Critter Caretaker</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Simulates caring for a virtual pet #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter(int hunger = 0, int boredom = 0); void Talk();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">void Eat(int food = 4); void Play(int fun = 4);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int m_Hunger; int m_Boredom;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int GetMood() const;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void PassTime(int time = 1);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">m_Hunger </span>is a private data member that represents the critter<span class="s12">’</span>s hunger level while <span class="s35">m_Boredom </span>is a private data member that represents its boredom level. I<span class="s12">’</span>ll go through each member function in its own section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Class Constructor</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The constructor takes two arguments, <span class="s35">hunger </span>and <span class="s35">boredom</span>. The arguments each have a default value of zero, which I specified in the constructor prototype back</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark991">278 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">in the class definition. I use <span class="s35">hunger </span>to initialize <span class="s35">m_Hunger </span>and <span class="s35">boredom </span>to initialize <span class="s35">m_Boredom</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Critter::Critter(int hunger, int boredom): m_Hunger(hunger),</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">m_Boredom(boredom)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The GetMood() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, I define <span class="s35">GetMood()</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">inline int Critter::GetMood() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (m_Hunger + m_Boredom);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The return value of this inlined member function represents a critter<span class="s12">’</span>s mood. As the sum of a critter<span class="s12">’</span>s hunger and boredom levels, a critter<span class="s12">’</span>s mood gets worse as the number increases. I made this member function private because it should only be invoked by another member function of the class. I made it constant since it won<span class="s12">’</span>t result in any changes to data members.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The PassTime() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">PassTime() </span>is a private member function that increases a critter<span class="s12">’</span>s hunger and boredom levels. It<span class="s12">’</span>s invoked at the end of each member function where the critter does something (eats, plays, or talks) to simulate the passage of time. I made this member function private because it should only be invoked by another member function of the class.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::PassTime(int time)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">m_Hunger += time; m_Boredom += time;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can pass the member function the amount of time that has passed; otherwise, <span class="s35">time </span>gets the default argument value of <span class="s35">1</span>, which I specify in the member function prototype in the <span class="s35">Critter </span>class definition.</p><p class="s19" style="padding-top: 2pt;padding-left: 244pt;text-indent: 0pt;text-align: left;"><a name="bookmark992">Introducing the Critter Caretaker Game 279</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Talk() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Talk() </span>member function announces the critter<span class="s12">’</span>s mood, which can be happy, okay, frustrated, or mad. <span class="s35">Talk() </span>calls <span class="s35">GetMood() </span>and, based on the return value, displays the appropriate message to indicate the critter<span class="s12">’</span>s mood. Finally, <span class="s35">Talk() </span>calls <span class="s35">PassTime() </span>to simulate the passage of time.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Talk()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;I’m a critter and I feel &quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int mood = GetMood(); if (mood &gt; 15)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mad.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (mood &gt; 10)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;frustrated.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (mood &gt; 5)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;okay.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;happy.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Eat() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">Eat() </span>reduces a critter<span class="s12">’</span>s hunger level by the amount passed to the parameter <span class="s35">food</span>. If no value is passed, <span class="s35">food </span>gets the default argument value of <span class="s35">4</span>. The critter<span class="s12">’</span>s hunger level is kept in check and is not allowed to go below zero. Finally, <span class="s35">PassTime() </span>is called to simulate the passage of time.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Eat(int food)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Brruppp.\n&quot;; m_Hunger -= food;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark993">280 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_Hunger &lt; 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Hunger = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Play() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark932"><span class="s35">Play() </span></a>reduces a critter<span class="s12">’</span>s boredom level by the amount passed to the parameter <span class="s35">fun</span>. If no value is passed, <span class="s35">fun </span>gets the default argument value of <span class="s35">4</span>. The critter<span class="s12">’</span>s boredom level is kept in check and is not allowed to go below zero. Finally, <span class="s35">PassTime() </span>is called to simulate the passage of time.<a name="bookmark994">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Play(int fun)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Wheee!\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">m_Boredom -= fun; if (m_Boredom &lt; 0)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Boredom = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part348.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part350.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
