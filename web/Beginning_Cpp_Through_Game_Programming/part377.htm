<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Lobby Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part376.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part378.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark12">The Lobby Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Lobby </span>class represents the lobby or line in which players wait. Here<span class="s12">’</span>s the class definition:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Lobby</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator (ostream&amp; os, const Lobby&amp; aLobby);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Lobby();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">~Lobby();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">void AddPlayer(); void RemovePlayer(); void Clear();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* m_pHead;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The data member <span class="s35">m_pHead </span>is a pointer that points to a <span class="s35">Player </span>object, which represents the first person in line. <span class="s35">m_pHead </span>represents the head of the line.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Because each <span class="s35">Player </span>object has an <span class="s35">m_pNext </span>data member, you can link a bunch of  <span class="s35">Player  </span>objects  in  a  <span class="s11">linked  list</span>.  Individual  elements  of  linked  lists  are  often</p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;"><a name="bookmark1086">Introducing the Game Lobby Program 319</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_374.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="158" height="68" alt="image" src="Image_375.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="28" height="9" alt="image" src="Image_376.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="111" height="68" alt="image" src="Image_377.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_378.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="158" height="147" alt="image" src="Image_379.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="44" height="11" alt="image" src="Image_380.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_381.png"/></span></p><p class="s37" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.13</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each node holds a name and a pointer to the next player in the list. The first player in line is at the head.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">called <span class="s11">nodes</span>. Figure 9.13 provides a visual representation of a game lobby<span class="s12">—</span>a series of player nodes linked with one player at the head of the line.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One way to think about the player nodes is as a group of train cars that carry cargo and are connected. In this case, the train cars carry a name as cargo and are linked through a pointer data member, <span class="s35">m_pNext</span>. The <span class="s35">Lobby </span>class allocates memory on the heap for each <span class="s35">Player </span>object in the list. The <span class="s35">Lobby </span>data member <span class="s35">m_pHead </span>provides access to the first <span class="s35">Player </span>object at the head of the list.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The constructor is very simple. It simply initializes the data member <span class="s35">m_pHead </span>to</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">0<span class="p">, making it a null pointer.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Lobby::Lobby(): m_pHead(0)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The destructor simply calls <span class="s35">Clear()</span>, which removes all the <span class="s35">Player </span>objects from the list, freeing the allocated memory.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Lobby::~Lobby()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">AddPlayer() <span class="p">instantiates a </span>Player <span class="p">object on the heap and adds it to the end of the list. </span>RemovePlayer() <span class="p">removes the first </span>Player <span class="p">object in the list, freeing the allocated memory.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I declare the function <span class="s35">operator&lt;&lt;() </span>a friend of <span class="s35">Lobby </span>so that I can send a <span class="s35">Lobby</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to <span class="s35">cout </span>using the <span class="s35">&lt;&lt; </span>operator.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1028">320 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1087">&zwnj;</a><a name="bookmark1088">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_382.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Lobby </span>class has a data member, <span class="s35">m_pHead</span>, which points to <span class="s35">Player </span>objects on the heap. Because of this, I included a destructor that frees all of the memory occupied by the <span class="s35">Player </span>objects on the heap instantiated by a <span class="s35">Lobby </span>object to avoid any memory leaks when a <span class="s35">Lobby </span>object is destroyed. However, I didn’t define a copy constructor or overload the assignment operator in the class. For the Game Lobby program, this isn’t necessary. But if I wanted a more robust <span class="s35">Lobby </span>class, I would have defined these member functions.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_383.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part376.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part378.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
