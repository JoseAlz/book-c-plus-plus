<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Designing the Classes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part412.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part414.htm">Next &gt;</a></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">Designing the Classes</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Before you start coding a project with multiple classes, it is helpful to map them out on paper. You might make a list and include a brief description of each class. Table 10.1 shows my first pass at such a list for the Blackjack game.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To keep things simple, all member functions will be public and all data members will be protected. Also, I<span class="s12">’</span>ll use only public inheritance, which means that each derived class will inherit all of its base class members.</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1196">Introducing the Blackjack Game 357</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_444.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 10.6</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">One player wins; the other is not so lucky.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="525" height="242" alt="image" src="Image_445.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A Blackjack game.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">None</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">GenericPlayer <span class="s41">A human Blackjack player.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">GenericPlayer <span class="s41">The computer player, the house.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Player</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">House Game</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A Blackjack playing card.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">A Blackjack hand. A collection of <span class="s57">Card </span>objects.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">A Blackjack deck. Has extra functionality that <span class="s57">Hand </span>doesn’t, such as shuffling and dealing.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">A generic Blackjack player. Not a full player, but the common elements of a human player and the computer player.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">GenericPlayer Hand</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">None</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">None</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">Hand</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Card</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Hand Deck</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.1 <span class="s44">Blackjack Classes</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Class Base Class Description</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In addition to describing your classes in words, it helps to draw a family tree of sorts to visualize how your classes are related. That<span class="s12">’</span>s what I did in Figure 10.7.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, it<span class="s12">’</span>s a good idea to get more specific. Ask yourself about the classes. What exactly will they represent? What will they be able to do? How will they work with the other classes?</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">358 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="341" height="194" alt="image" src="Image_446.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 10.7</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">Inheritance hierarchy of classes for the Blackjack game. <span class="s35">GenericPlayer </span>is shaded because it turns out to be an abstract class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I see <span class="s35">Card </span>objects as real-life cards. You don<span class="s12">’</span>t copy a card when you deal it from the deck to a hand; you move it. For me, that means <span class="s35">Hand </span>will have a data member that is a vector of pointers to <span class="s35">Card </span>objects, which will exist on the heap. When a card moves from one <span class="s35">Hand </span>to another, it<span class="s12">’</span>s really pointers that are being copied and destroyed.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I see players (the human players and the computer) as Blackjack hands with names. That<span class="s12">’</span>s why I derive <span class="s35">Player </span>and <span class="s35">House </span>(indirectly) from <span class="s35">Hand</span>. (Another equally valid view is that players have a hand. If I had gone this route, <span class="s35">Player </span>and <span class="s35">House </span>would have had <span class="s35">Hand </span>data members instead of being derived from <span class="s35">Hand</span>.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I define <span class="s35">GenericPlayer </span>to house the functionality that <span class="s35">Player </span>and <span class="s35">House </span>share, as opposed to duplicating this functionality in both classes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Also, I see the deck as separate from the house. The deck will deal cards to the human players and the computer-controlled house in the same way. This means that <span class="s35">Deck </span>will have a member function to deal cards that is polymorphic and will work with either a <span class="s35">Player </span>or a <span class="s35">House </span>object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To really flesh things out, you can list the data members and member functions that you think the classes will have, along with a brief description of each. That<span class="s12">’</span>s what I do next in Tables 10.2 through 10.8. For each class, I list only the members I define in it. Several classes will, of course, be inherited members from base classes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="194" alt="image" src="Image_447.png"/></span></p><p class="s43" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 10.2 <span class="s44">Card Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">rank m_Rank <span class="s41">Rank of the card (ace, 2, 3, and so on). </span>rank <span class="s41">is an enumeration for all 13 ranks.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 91pt;text-indent: -79pt;line-height: 106%;text-align: left;">suit m_Suit <span class="s41">Suit of the card (clubs, diamonds, hearts, or spades). </span>suit <span class="s41">is an enumeration for the four possible suits.</span></p><p class="s57" style="padding-top: 1pt;padding-left: 91pt;text-indent: -79pt;line-height: 106%;text-align: left;">bool m_IsFaceUp <span class="s41">Indicates whether the card is face up. Affects how the card is displayed and the value it has.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">int GetValue() <span class="s41">Returns the value of the card.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">void Flip() <span class="s41">Flips a card. Face up becomes face down, and face down becomes face up.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1197">Introducing the Blackjack Game 359</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="444" height="160" alt="image" src="Image_448.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="161" alt="image" src="Image_449.png"/></span></p><p class="s43" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 10.3 <span class="s44">Hand Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">vector&lt;Card*&gt; m_Cards <span class="s41">Collection of cards. Stores pointers to </span>Card <span class="s41">objects.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;line-height: 125%;text-align: left;">void Add(Card* pCard) <span class="s41">Adds a card to the hand. Adds a pointer to </span>Card <span class="s41">to the vector </span>m_Cards<span class="s41">. </span>void Clear() <span class="s41">Clears all cards from the hand. Removes all pointers in the vector </span>m_Cards<span class="s41">,</span></p><p class="s41" style="padding-left: 121pt;text-indent: 0pt;line-height: 8pt;text-align: left;">deleting all associated <span class="s57">Card </span>objects on the heap.</p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">int GetTotal() const <span class="s41">Returns the total value of the hand.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="160" alt="image" src="Image_450.png"/></span></p><p class="s57" style="text-indent: 0pt;text-align: left;">string m_Name <span class="s41">Generic player’s name.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">virtual bool IsHitting() const = 0 <span class="s41">Indicates whether the generic player wants another hit. Pure</span></p><p class="s41" style="padding-left: 163pt;text-indent: 0pt;text-align: left;">virtual function.</p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">bool IsBusted() const <span class="s41">Indicates whether the generic player is busted.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">void Bust() const <span class="s41">Announces that the generic player busts.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.4 <span class="s44">GenericPlayer Class (Abstract)</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="padding-top: 10pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">Table 10.5 <span class="s44">Player Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;line-height: 133%;text-align: left;">virtual bool IsHitting() const void Win() const</p><p class="s57" style="padding-left: 52pt;text-indent: 0pt;line-height: 132%;text-align: left;">void Lose() const void Push() const</p><p class="s41" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;line-height: 125%;text-align: left;">Indicates whether the player wants another hit. Announces that the player wins.</p><p class="s41" style="padding-left: 8pt;text-indent: 0pt;line-height: 125%;text-align: left;">Announces that the player loses. Announces that the player pushes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="522" height="126" alt="image" src="Image_451.png"/></span></p><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.6 <span class="s44">House Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">virtual bool IsHitting() const</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void FlipFirstCard()</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Indicates whether the house is taking another hit.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Flips over the first card.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="175" alt="image" src="Image_452.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Creates a standard deck of 52 cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Shuffles cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Deals one card to a hand.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Gives additional cards to a generic player for as long as the generic player can and wants to hit.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">void Populate()</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void Shuffle()</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void Deal(Hand&amp; aHand)</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;line-height: 112%;text-align: left;">void AdditionalCards(GenericPlayer&amp; aGenericPlayer)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.7 <span class="s44">Deck Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1198">360 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="475" height="161" alt="image" src="Image_453.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A deck of cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">The casino’s hand, the house.</p><p class="s41" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Collection of human players. A vector of <span class="s57">Player </span>objects. Plays a round of Blackjack.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Deck m_Deck</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">House m_House vector&lt;Player&gt; m_Players void Play()</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.8 <span class="s44">Game Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part412.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part414.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
