<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Examining Other STL Containers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part183.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part185.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30">Examining Other STL Containers</a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The STL defines a variety of container types that fall into two basic categories<span class="s12">— </span>sequential and associative. With a <span class="s11">sequential container</span>, you can retrieve values in sequence, while an <span class="s11">associative container </span>lets you retrieve values based on keys. <span class="s35">vector </span>is an example of a sequential container.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">How might you use these different container types? Consider an online, turned- based strategy game. You could use a sequential container to store a group of players that you want to cycle through in, well, sequence. On the other hand, you could use an associative container to retrieve player information in a random- access fashion by looking up a unique identifier, such as a player<span class="s12">’</span>s IP address.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, the STL defines container adaptors that adapt one of the sequence containers. <span class="s11">Container adaptors </span>represent standard computer science data</p><p class="s19" style="padding-top: 2pt;padding-left: 317pt;text-indent: 0pt;text-align: left;"><a name="bookmark526">Planning Your Programs 139</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="293" alt="image" src="Image_184.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Double-ended queue</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Linear list</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Collection of key/value pairs in which each key is associated with exactly one value</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Collection of key/value pairs in which each key may be associated with more than one value</p><p class="s41" style="padding-top: 1pt;text-indent: 0pt;line-height: 125%;text-align: left;">Collection in which each element is not necessarily unique Priority queue</p><p class="s41" style="text-indent: 0pt;text-align: left;">Queue</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 125%;text-align: left;">Collection in which each element is unique Stack</p><p class="s41" style="text-indent: 0pt;text-align: left;">Dynamic array</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">multiset <span class="s41">Associative</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">priority_queue <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">queue <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">set <span class="s41">Associative</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">stack <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">vector <span class="s41">Sequential</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Associative</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">multimap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Sequential</p><p class="s41" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Sequential Associative</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">deque</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">list map</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 4.1 <span class="s44">STL Containers</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Container Type</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">structures. Although they are not official containers, they look and feel just like them. Table 4.1 lists the container types offered by the STL.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part183.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part185.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
