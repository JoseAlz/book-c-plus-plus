<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Deriving from a Base Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part389.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part391.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="part3.htm#bookmark12" class="h1">Deriving from a Base </a><h1 href="#bookmark12">Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I derive the <span class="s35">Boss </span>class from <span class="s35">Enemy </span>when I define <span class="s35">Boss </span>with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s35">Boss </span>is based on <span class="s35">Enemy</span>. In fact, <span class="s35">Enemy </span>is called the <span class="s11">base class </span>(or <span class="s11">superclass</span>) and <span class="s35">Boss </span>the <span class="s11">derived class </span>(or <span class="s11">subclass</span>). This means that <span class="s35">Boss </span>inherits <span class="s35">Enemy</span><span class="s12">’</span>s data members and member functions, subject to access controls. In this case, <span class="s35">Boss </span>inherits and can directly access <span class="s35">m_Damage </span>and <span class="s35">Attack()</span>. It<span class="s12">’</span>s as if I defined both <span class="s35">m_Damage </span>and <span class="s35">Attack() </span>in <span class="s35">Boss</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_415.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You  might  have  noticed  that I  made all  of  the members  of  the  classes  pubic,  including  their data members. I did this because it makes for the simplest first example of a base and derived class.  You  also  might  have  noticed  that  I  used  the  keyword  <span class="s35">public  </span>when  deriving  <span class="s35">Boss </span>from  <span class="s35">Enemy</span>.  For  now,  don’t  worry  about  this.  I’ll  cover  it  all  in  the  next  example  program, Simple Boss 2.0.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_416.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1152">336 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To derive classes of your own, follow my example. After the class name in a class definition, put a colon followed by an access modifier (such as <span class="s35">public</span>), followed by the name of the base class. It<span class="s12">’</span>s perfectly acceptable to derive a new class from a derived class, and sometimes it makes perfect sense to do so. However, to keep things simple, I<span class="s12">’</span>m only going to deal with one level of inheritance in this example.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">There are actually a few base class member functions that are not inherited by derived classes. They are as follows:</p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><a name="bookmark1107">n </a><span class="p">Constructors</span><a name="bookmark1153">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Copy constructors</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Destructors</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Overloaded assignment operators</span></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You have to write your own versions of these in the derived class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part389.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part391.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
