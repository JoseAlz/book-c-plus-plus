<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Looping through a Vector</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part169.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part171.htm">Next &gt;</a></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark6">Looping through a Vector</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I loop through the contents of the vector and display the hero<span class="s12">’</span>s inventory.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">In the preceding code, I use a <span class="s35">for </span>loop to move from the first to the last element of <span class="s35">inventory</span>. At this general level, this is exactly how I looped through the</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark499">Using Iterators 127</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">contents of the vector in Hero<span class="s12">’</span>s Inventory 2.0. But instead of using an integer and the subscripting operator to access each element, I used an iterator. Basically, I moved the Post-it note through the entire sequence of elements and displayed the value of each element to which the note was stuck. There are a lot of new ideas in this little loop, so I<span class="s12">’</span>ll tackle them one at a time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Calling the begin() Vector Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the initialization statement of the loop, I assign the return value of <span class="s35">inventory. begin() </span>to <span class="s35">iter</span>. The <span class="s35">begin() </span>member function returns an iterator that refers to a container<span class="s12">’</span>s first element. So in this case, the statement assigns an iterator that refers to the first element of <span class="s35">inventory </span>(the <span class="s35">string </span>object equal to <span class="s35">&quot;sword&quot;</span>) to <span class="s35">iter</span>. Figure 4.3 shows an abstract view of the iterator returned by a call to <span class="s35">inventory.begin()</span>. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">’</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; it contains <span class="s35">string </span>objects.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="105" alt="image" src="Image_161.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="100" height="13" alt="image" src="Image_162.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A call to <span class="s35">inventory.begin() </span>returns an iterator that refers to the first element in the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Calling the end() Vector Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the test statement of the loop, I test the return value of <span class="s35">inventory.end() </span>against <span class="s35">iter </span>to make sure the two are not equal. The <span class="s35">end() </span>member function returns an iterator one past the last element in a container. This means the loop will continue until <span class="s35">iter </span>has moved through all of the elements in <span class="s35">inventory</span>. Figure 4.4 shows an abstract view of the iterator returned by a call to this member function. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">’</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; it contains string objects.)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark500">128 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="328" height="106" alt="image" src="Image_163.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="90" height="13" alt="image" src="Image_164.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A call to <span class="s35">inventory.end() </span>returns an iterator one past the last element of the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark442">Tra p</a><a name="bookmark501">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_165.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">end() vector </span>member function returns an iterator that’s one <i>past </i>the last element in the vector—not the last element. Therefore, you can’t get a value from the iterator returned by <span class="s35">end()</span>. This might seem counter-intuitive, but it works well for loops that move through a container.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_166.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Altering an Iterator</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The action statement in the loop, <span class="s35">++iter</span>, increments <span class="s35">iter</span>, which moves it to the next element in the vector. Depending upon the iterator, you can perform other mathematical operations on iterators to move them around a container. Most often, though, you<span class="s12">’</span>ll find that you simply want to increment an iterator.</p><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Dereferencing an Iterator</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the loop body, I send <span class="s35">*iter </span>to <span class="s35">cout</span>. By placing the dereference operator (<span class="s35">*</span>) in front of <span class="s35">iter</span>, I display the value of the element to which the iterator refers (not the iterator itself). By placing the dereference operator in front of an iterator, you<span class="s12">’</span>re saying, <span class="s12">“</span>Treat this as the thing that the iterator references, not as the iterator itself.<span class="s12">”</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part169.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part171.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
