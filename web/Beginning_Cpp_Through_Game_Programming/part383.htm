<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part382.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part384.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Aggregation is the combining of objects so that one is part of another.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Friend functions have complete access to any member of a class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Operator overloading allows you to define new meanings for built-in operators as they relate to objects of your own classes.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">The stack is an area of memory that is automatically managed for you and is used for local variables.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">The heap (or free store) is an area of memory that you, the programmer, can use to allocate and free memory.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>The <span class="s35">new </span>operator allocates memory on the heap and returns its address.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">delete </span>operator frees memory on the heap that was previously allocated.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A dangling pointer points to an invalid memory location. Dereferencing or deleting a dangling pointer can cause your program to crash.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1099">326 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A memory leak is an error in which memory that has been allocated becomes inaccessible and can no longer be freed. Given a large enough leak, a program might run out of memory and crash.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A destructor is a member function that<span class="s12">’</span>s called just before an object is destroyed. If you don<span class="s12">’</span>t write a destructor of your own, the complier will supply a default destructor for you.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark1034"><span class="s29">n </span></a>The copy constructor is a member function that<span class="s12">’</span>s invoked when an automatic copy of an object is made. A default copy constructor is supplied for a class if you don<span class="s12">’</span>t write one of your own.<a name="bookmark1100">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">The default copy constructor simply copies the value of each data member to data members with the same names in the copy, producing a member-wise copy.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Member-wise copying can produce a shallow copy of an object, in which the pointer data members of the copy point to the same chunks of memory as the pointers in the original object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A deep copy is a copy of an object that has no chunks of memory in common with the original.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A default assignment operator member function, which provides only member-wise duplication, is supplied for you if you don<span class="s12">’</span>t write one of your own.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><span class="s29">n </span>The <span class="s35">this </span>pointer is a pointer that all non-static member functions automatically have; it points to the object that was used to call the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part382.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part384.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
