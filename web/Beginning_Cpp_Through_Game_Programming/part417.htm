<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The GenericPlayer Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part416.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part418.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">The GenericPlayer Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I define the <span class="s35">GenericPlaye</span>r class for a generic Blackjack player. It doesn<span class="s12">’</span>t represent a full player. Instead, it represents the common element of a human player and the computer player.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class GenericPlayer : public Hand</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator&lt;&lt;(ostream&amp; os,</p><p class="s35" style="padding-top: 2pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">const GenericPlayer&amp; aGenericPlayer);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">GenericPlayer(const string&amp; name = &quot;&quot;); virtual ~GenericPlayer();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//indicates whether or not generic player wants to keep hitting virtual bool IsHitting() const = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//returns whether generic player has busted - has a total greater than 21 bool IsBusted() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//announces that the generic player busts void Bust() const;</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1207">Introducing the Blackjack Game 367</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">GenericPlayer::GenericPlayer(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">GenericPlayer::~GenericPlayer()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">bool GenericPlayer::IsBusted() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (GetTotal() &gt; 21);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void GenericPlayer::Bust() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot; busts.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I make the overloaded <span class="s35">operator&lt;&lt;() </span>function a friend of the class so I can display <span class="s35">GenericPlayer  </span>objects  on  the  screen.  It  accepts  a  reference  to  a  <span class="s35">GenericPlayer </span>object, which means that it can accept a reference to a <span class="s35">Player </span>or <span class="s35">House </span>object, too.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The constructor accepts a <span class="s35">string </span>object for the name of the generic player. The destructor is automatically virtual because it inherits this trait from <span class="s35">Hand</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">IsHitting() </span>member function indicates whether a generic player wants another card. Because this member function doesn<span class="s12">’</span>t have a real meaning for a generic player, I made it a pure virtual function. Therefore, <span class="s35">GenericPlayer </span>becomes an abstract class. This also means that both <span class="s35">Player </span>and <span class="s35">House </span>need to implement their own versions of this member function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">IsBusted() </span>member function indicates whether a generic player has busted. Because players and the house bust the same way<span class="s12">—</span>by having a total greater than 21<span class="s12">—</span>I put the definition in this class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Bust</span>() member function announces that the generic player busts. Because busting is announced the same way for players and the house, I put the definition of the member function in this class.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1134">368 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1208">&zwnj;</a><a name="bookmark1209">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part416.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part418.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
