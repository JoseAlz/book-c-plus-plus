<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Introducing Inheritance</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part387.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part389.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="s30">Introducing Inheritance</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">One of the key elements of OOP is <span class="s11">inheritance</span>, which allows you to <span class="s11">derive </span>a new class from an existing one. When you do so, the new class automatically <span class="s11">inherits </span>(or gets) the data members and member functions of an existing class. It<span class="s12">’</span>s like getting the work that went into the existing class for free!</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Inheritance is especially useful when you want to create a more specialized version of an existing class because you can add data members and member functions to the new class to extend it. For example, imagine you have a class <span class="s35">Enemy </span>that defines an enemy in a game with a member function <span class="s35">Attack() </span>and a</p><p class="s19" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">331</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1147">332 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">data member <span class="s35">m_Damage</span>. You can derive a new class <span class="s35">Boss </span>from <span class="s35">Enemy </span>for a boss. This means that <span class="s35">Boss </span>could automatically have <span class="s35">Attack() </span>and <span class="s35">m_Damage </span>without you having to write any code for them at all. Then, to make a boss tough, you could add a member function <span class="s35">SpecialAttack() </span>and a data member <span class="s35">DamageMultiplier </span>to the <span class="s35">Boss  </span>class. Take a look at Figure 10.1, which shows the relationship between the <span class="s35">Enemy </span>and <span class="s35">Boss  </span>classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="116" height="349" alt="image" src="Image_413.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 10.1</p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Boss <span class="s19">inherits </span>Attack() <span class="s19">and </span>m_Damage <span class="s19">from </span>Enemy <span class="s19">while defining </span>SpecialAttack() <span class="s19">and</span></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">m_DamageMultiplier<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">One of the many advantages of inheritance is that you can reuse classes you<span class="s12">’</span>ve already written. This reusability produces benefits that include:</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span><b>Less work</b>. There<span class="s12">’</span>s no need to redefine functionality you already have.</p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">Once you have a class that provides the base functionality for other classes, you don<span class="s12">’</span>t have to write that code again.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>Fewer errors</b>. Once you<span class="s12">’</span>ve got a bug-free class, you can reuse it without errors cropping up in it.</p><p class="s19" style="padding-top: 2pt;padding-left: 321pt;text-indent: 0pt;text-align: left;"><a name="bookmark1105">Introducing Inheritance 333</a><a name="bookmark1148">&zwnj;</a><a name="bookmark1149">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>Cleaner code</b>. Because the functionality of base classes exist only once in a program, you don<span class="s12">’</span>t have to wade through the same code repeatedly, which makes programs easier to understand and modify.</p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Most related game entities cry out for inheritance. Whether it<span class="s12">’</span>s the series of enemies that a player faces, squadrons of military vehicles that a player commands, or an inventory of weapons that a player wields, you can use inheritance to define these groups of game entities in terms of each other, which results in faster and easier programming.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part389.htm">Introducing the Simple Boss Program</a><a class="toc0" href="part390.htm">Deriving from a Base Class</a><a class="toc0" href="part391.htm">Instantiating Objects from a Derived Class</a><a class="toc0" href="part392.htm">Using Inherited Members</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part387.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part389.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
