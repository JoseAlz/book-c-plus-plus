<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Dynamically Allocating Memory</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part363.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part365.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30">Dynamically Allocating Memory</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So far, whenever you<span class="s12">’</span>ve declared a variable, C++ has allocated the necessary memory for it. When the function that the variable was created in ended, C++ freed the memory. This memory, which is used for local variables, is called the <span class="s11">stack</span>. But there<span class="s12">’</span>s another kind of memory that persists independent of the functions in a program. You, the programmer, are in charge of allocating and freeing this memory, collectively called the <span class="s11">heap </span>(or <span class="s11">free store</span>).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point, you might be thinking, <span class="s12">“</span>Why bother with another type of memory? The stack works just fine, thank you.<span class="s12">” </span>Using the dynamic memory of the heap offers great benefits that can be summed up in one word: efficiency. By using the heap, you can use only the amount of memory you need at any given time. If you have a game with a level that has 100 enemies, you can allocate the memory for the enemies at the beginning of the level and free the memory at the end. The heap also allows you to create an object in one function that you can access even after that function ends (without having to return a copy of the</p><p class="s19" style="padding-top: 2pt;padding-left: 282pt;text-indent: 0pt;text-align: left;"><a name="bookmark1015">Dynamically Allocating Memory 297</a><a name="bookmark1057">&zwnj;</a><a name="bookmark1058">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">object). You might create a screen object in one function and return access to it. You<span class="s12">’</span>ll find that dynamic memory is an important tool in writing any significant game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part365.htm">Introducing the Heap Program</a><a class="toc0" href="part366.htm">Using the new Operator</a><a class="toc0" href="part367.htm">Using the delete Operator</a><a class="toc0" href="part368.htm">Avoiding Memory Leaks</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part363.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part365.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
