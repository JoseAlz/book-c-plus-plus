<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the new Operator</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part365.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part367.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">Using the new Operator</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">new </span>operator allocates memory on the heap and returns its address. You use <span class="s35">new </span>followed by the type of value you want to reserve space for. That<span class="s12">’</span>s what I do in the first line of <span class="s35">main()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap = new int;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">new int </span>part of the statement allocates enough memory on the heap for one <span class="s35">int </span>and returns the address on the heap for that chunk of memory. The other part of the statement, <span class="s35">int* pHeap</span>, declares a local pointer, <span class="s35">pHeap</span>, which points to the newly allocated chunk of memory on the heap.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By using <span class="s35">pHeap</span>, I can manipulate the chunk of memory on the heap reserved for an integer. That<span class="s12">’</span>s what I do next; I assign <span class="s35">10 </span>to the chunk of memory and then I display that value stored on the heap, using <span class="s35">pHeap</span>, as I would any other pointer to <span class="s35">int</span>. The only difference is that <span class="s35">pHeap </span>points to a piece of memory on the heap, not the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_339.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can initialize memory on the heap at the same time you allocate it by placing a value, surrounded by parentheses, after the type. This is even easier than it sounds. For example, the following line allocates a chunk of memory on the heap for an <span class="s35">int </span>variable and assigns <span class="s35">10 </span>to it. The statement then assigns the address of that chunk of memory to <span class="s35">pHeap</span>.</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap = new int(10);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_340.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One of the major advantages of memory on the heap is that it can persist beyond the function in which it was allocated, meaning that you can create an object on the heap in one function and return a pointer or reference to it. That<span class="s12">’</span>s what I demonstrate with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap2 = intOnHeap();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1061">300 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The statement calls the function <span class="s35">intOnHeap()</span>, which allocates a chunk of memory on the heap for an <span class="s35">int </span>and assigns <span class="s35">20 </span>to it.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* intOnHeap()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int* pTemp = new int(20); return pTemp;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1017">Then, the function returns a pointer to this chunk of memory. Back in </a><span class="s35">main()</span>, the assignment statement assigns the address of the chunk of memory on the heap to <span class="s35">pHeap2</span>. Next, I use the returned pointer to display the value.<a name="bookmark1062">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pHeap2: &quot; &lt;&lt; *pHeap2 &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_341.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Up until now, if you wanted to return a value created in a function, you had to return a copy of the value. But by using dynamic memory, you can create an object on the heap in a function and return a pointer to the new object.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_342.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part365.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part367.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
