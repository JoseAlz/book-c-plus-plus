<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part424.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part426.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How many levels of inheritance can you have?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: Theoretically, as many as you want. But as a beginning programmer, you should keep things simple and try not to go beyond a few levels.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: Is friendship inherited? That is, if a function is a friend of a base class, is it automatically a friend of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: No.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can a class have more than one direct base class?</p><p style="padding-top: 5pt;padding-left: 55pt;text-indent: -14pt;text-align: left;">A: Yes. This is called <span class="s11">multiple inheritance</span>. It<span class="s12">’</span>s powerful, but creates its own set of thorny issues.</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">Q: Why would you want to call a base class constructor from a derived class constructor?</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: So you can control exactly how the base class constructor is called. For example, you might want to pass specific values to the base class constructor.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Are there any dangers in overriding a base class function?</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: -17pt;line-height: 106%;text-align: left;">A: Yes. By overriding a base class member function, you hide all of the overloaded version  of the function in the base  class.  However, you  can</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1226">Questions and Answers 381</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 106%;text-align: left;">still call a hidden base class member function explicitly by using the base class name and the scope resolution operator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How can I solve this problem of hiding base class functions?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: One way is to override all of the overloaded version of the base class function.</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: Why do you usually want to call the assignment operator member function of the base class from the assignment operator member function of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: So that any base class data members can be properly assigned.</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: Why do you usually want to call the copy constructor of a base class from the copy constructor of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: So that any base class data members can be properly copied.</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: Why can you lose access to an object<span class="s12">’</span>s member functions when you point to it with a base class member?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: Because non-virtual functions are called based on the pointer type and the object type.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">Q: Why not make all member functions virtual, just in case you ever need polymorphic behavior from them?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Because there<span class="s12">’</span>s a performance cost associated with making member functions virtual.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">Q: So when should you make member functions virtual? A: Whenever they may be inherited from a base class.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When should you make a destructor virtual?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: If you have any virtual member functions in a class, you should make the destructor virtual, too. However, some programmers say that to be safe, you should always make a destructor virtual.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can constructors be virtual?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: No. This also means that copy constructors can<span class="s12">’</span>t be declared as virtual either. Q: In OOP, what is slicing?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Slicing is cutting off part of an object. Assigning an object of a derived class to a variable of a base class is legal, but you slice the object, losing the data</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1142">382 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1227">&zwnj;</a><a name="bookmark1228">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;line-height: 106%;text-align: left;">members declared in the derived class and losing access to member functions of the derived class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What good are abstract classes if you can<span class="s12">’</span>t instantiate any objects from them?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Abstract classes can be very useful. They can contain many common class members that other classes will inherit, which saves you the effort of defining those members over and over again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part424.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part426.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
