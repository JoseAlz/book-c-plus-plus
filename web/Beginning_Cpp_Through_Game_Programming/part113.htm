<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part112.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part114.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Do you have to use the keywords <span class="s35">true </span>and <span class="s35">false</span>?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No, but it<span class="s12">’</span>s a good idea. Before the advent of the keywords <span class="s35">true </span>and <span class="s35">false</span>, programmers often used 1 to represent true and 0 to represent false. However, now that <span class="s35">true </span>and <span class="s35">false </span>are available, it<span class="s12">’</span>s best to use them instead of the old-fashioned 1 and 0.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can you assign a <span class="s35">bool  </span>variable something other than <span class="s35">true  </span>or <span class="s35">false</span>?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A:  Yes.  You  can  assign  an  expression  to  a  <span class="s35">bool  </span>variable,  which  will  store  the truth or falsity of the expression.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can you use a <span class="s35">switch </span>statement to test some non-integer value?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: No. <span class="s35">switch </span>statements only work with values that can be interpreted as integers (including <span class="s35">char </span>values).</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: How can you test a single non-integer value against multiple values if you can<span class="s12">’</span>t use a <span class="s35">switch </span>statement?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: You can use a series of <span class="s35">if </span>statements. Q: What<span class="s12">’</span>s an infinite loop?</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A loop that will never end, regardless of user input. Q: Why are infinite loops considered bad?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because a program stuck in an infinite loop will never end on its own. It has to be shut down by the operating system. In the worst case, a user will have to shut his computer off to end a program stuck in an infinite loop.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Won<span class="s12">’</span>t a compiler catch an infinite loop and flag it as an error?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: No. An infinite loop is a logical error<span class="s12">—</span>the kind of error a programmer must track down.</p><p class="s19" style="padding-top: 2pt;padding-left: 322pt;text-indent: 0pt;text-align: left;"><a name="bookmark313">Questions and Answers 79</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">Q: If infinite loops are a bad thing, then isn<span class="s12">’</span>t a <span class="s35">while (true) </span>loop a bad thing?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: No. When a programmer creates a <span class="s35">while (true) </span>loop, he should provide a way for the loop to end (usually through a <span class="s35">break </span>statement).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why would a programmer create a <span class="s35">while (true) </span>loop?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: <span class="s35">while (true) </span>loops are often used for the main loop of a program, like the game loop.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">Q: Why do some people feel that using a <span class="s35">break </span>statement to exit a loop is poor programming?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Because indiscriminate use of <span class="s35">break </span>statements can make it hard to under- stand the conditions under which a loop ends. However, sometimes the use of a <span class="s35">while (true) </span>loop along with a <span class="s35">break </span>statement can be clearer than creating the same loop in a more traditional way.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s a pseudorandom number?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: A random number that<span class="s12">’</span>s usually generated by a formula. As a result, a series of pseudorandom numbers is not truly random, but good enough for most purposes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s seeding a random number generator?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: It<span class="s12">’</span>s giving the random number generator a seed, such as an integer, which affects the way the generator produces random numbers. If you don<span class="s12">’</span>t seed a random number generator, it will produce the same series of numbers each time its run from the beginning of a program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Don<span class="s12">’</span>t you always want to seed the random number generator before using it?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Not necessarily. You might want a program to produce the exact same sequence of <span class="s12">“</span>random<span class="s12">” </span>numbers each time it runs for testing purposes, for example.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How can I generate more truly random numbers?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: There are third-party libraries that produce better pseudorandom numbers than the ones that typically come with C++ compilers.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark223">80 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark314">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Do all games use the game loop?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: The game loop is just a way of looking at a typical game<span class="s12">’</span>s flow of events. And just because this paradigm fits a particular game, that doesn<span class="s12">’</span>t necessarily mean that the game is implemented with a loop around the bulk of its code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part112.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part114.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
