<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part423.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part425.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">One of the key elements of OOP is inheritance, which allows you to derive a new class from an existing one. The new class automatically inherits data members and member functions from the existing class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A derived class does not inherit constructors, copy constructors, destruc- tors, or an overloaded assignment operator.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Base class constructors are automatically called before the derived class constructor when a derived class object is instantiated.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Base class destructors are automatically called after the derived class destructor when a derived class object is destroyed.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Protected members are accessible only in their own class and certain derived classes, depending upon the derivation access level.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Using public derivation means that public members in the base class become public members in the derived class, protected members in the base class become protected members in the derived class, and private members are (as always) inaccessible.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can override base class member functions by giving them new defi- nitions in a derived class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can explicitly call a base class member function from a derived class.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1224">380 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can explicitly call the base class constructor from a derived class instructor.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Polymorphism is the quality whereby a member function will produce different results depending on the type of object for which it is called.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Virtual functions allow for polymorphic behavior.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><span class="s29">n </span>Once a member function is defined as virtual, it<span class="s12">’</span>s virtual in any derived class.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><a name="bookmark1141"><span class="s29">n </span></a>A pure virtual function is a function to which you don<span class="s12">’</span>t need to give a definition. You specify a pure virtual function by placing an equal sign and a zero at the end of the function header.<a name="bookmark1225">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">n <span class="p">An abstract class has at least one pure virtual member function.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;"><span class="s29">n </span>An abstract class can<span class="s12">’</span>t be used to instantiate an object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part423.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part425.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
