<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Vectors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part155.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part157.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="s30">Using Vectors</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">vector </span>class defines one kind of container provided by the STL. It meets the general description of a <span class="s11">dynamic array</span><span class="s12">—</span>an array that can grow and shrink in size as needed. In addition, <span class="s35">vector </span>defines member functions to manipulate vector elements. This means that the vector has all of the functionality of the array plus more.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">At this point, you may be thinking to yourself: Why learn to use these fancy new vectors when I can already use arrays? Well, vectors have certain advantages over arrays, including:</p><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Vectors can grow as needed while arrays cannot. This means that if you use a vector to store objects for enemies in a game, the vector will grow to accommodate the number of enemies that get created. If you use an array, you have to create one that can store some maximum number of enemies. And if, during play, you need more room in the array than you thought, you<span class="s12">’</span>re out of luck.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Vectors can be used with the STL algorithms while arrays cannot. This means that by using vectors you get complex functionality like searching and sorting, built-in. If you use arrays, you have to write your own code to achieve this same functionality.</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark428">Using Vectors 117</a><a name="bookmark476">&zwnj;</a><a name="bookmark477">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">There are a few disadvantages to vectors when compared to arrays, including:</p><p class="s29" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Vectors require a bit of extra memory as overhead.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">There can be a performance cost when a vector grows in size.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Vectors may not be available on some game console systems.</span></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Overall, vectors (and the STL) can be a welcome tool in most any project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part157.htm">Introducing the Hero’s Inventory 2.0 Program</a><a class="toc0" href="part158.htm">Preparing to Use Vectors</a><a class="toc0" href="part159.htm">Declaring a Vector</a><a class="toc0" href="part160.htm">Using the push_back() Member Function</a><a class="toc0" href="part161.htm">Using the size() Member Function</a><a class="toc0" href="part162.htm">Indexing Vectors</a><a class="toc0" href="part163.htm">Calling Member Functions of an Element</a><a class="toc0" href="part164.htm">Using the pop_back() Member Function</a><a class="toc0" href="part165.htm">Using the clear() Member Function</a><a class="toc0" href="part166.htm">Using the empty() Member Function</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part155.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part157.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
