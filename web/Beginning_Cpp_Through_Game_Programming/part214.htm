<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Working with Separate Scopes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark7">Working with Separate Scopes</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every time you use curly braces to create a block, you create a scope. Functions are one example of this. Variables declared in a scope aren<span class="s12">’</span>t visible outside of that scope. This means that variables declared in a function aren<span class="s12">’</span>t visible outside of that function.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Variables declared inside a function are considered <span class="s11">local variables</span><span class="s12">—</span>they<span class="s12">’</span>re local to the function. This is what makes functions encapsulated.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen many local variables in action already. I define yet another local variable in <span class="s35">main() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int var = 5;    // local variable in main()</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This line declares and initializes a local variable named <span class="s35">var</span>. I send the variable to <span class="s35">cout </span>in the next line of code:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark631">164 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">This works just as you<span class="s12">’</span>d expect<span class="s12">—</span>5 is displayed.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I call <span class="s35">func()</span>. Once I enter the function, I<span class="s12">’</span>m in a separate scope outside of the scope defined by <span class="s35">main()</span>. As a result, I can<span class="s12">’</span>t access the variable <span class="s35">var </span>that I defined in <span class="s35">main()</span>. This means that when I next define a variable named <span class="s35">var </span>in <span class="s35">func() </span>with the following line, this new variable is completely separate from the variable named <span class="s35">var </span>in <span class="s35">main()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int var = -5;    // local variable in func()</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The two have no effect on each other, and that<span class="s12">’</span>s the beauty of scopes. When you write a function, you don<span class="s12">’</span>t have to worry if another function uses the same variable names.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Then, when I display the value of <span class="s35">var </span>in <span class="s35">func() </span>with the following line, the computer displays 5.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In func() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That<span class="s12">’</span>s because, as far as the computer can see in this scope, there<span class="s12">’</span>s only one variable named <span class="s35">var</span><span class="s12">—</span>the local variable I declared in this function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Once a scope ends, all of the variables declared in that scope cease to exist. They<span class="s12">’</span>re said to go <span class="s11">out of scope</span>. So next, when <span class="s35">func() </span>ends, its scope ends. This means all of the variables declared in <span class="s35">func() </span>are destroyed. As a result, the <span class="s35">var </span>I declared in <span class="s35">func() </span>with a value of 5 is destroyed.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After <span class="s35">func() </span>ends, control returns to <span class="s35">main() </span>and picks up right where it left off. Next, the following line is executed, which sends <span class="s35">var </span>to <span class="s35">cout</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Back in main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The value of the <span class="s35">var </span>local to <span class="s35">main() </span>(5) is displayed again.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You might be wondering what happened to the <span class="s35">var </span>I created in <span class="s35">main() </span>while I was in <span class="s35">func()</span>. Well, the variable wasn<span class="s12">’</span>t destroyed because <span class="s35">main() </span>hadn<span class="s12">’</span>t yet ended. (Program control simply took a small detour to <span class="s35">func()</span>.) When a program momentarily exits one function to enter another, the computer saves its place in the first function, keeping safe the values of all of its local variables, which are reinstated when control returns to the first function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_204.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Parameters act just like local variables in functions.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_205.png"/></span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark571">Working with Scopes 165</a><a name="bookmark632">&zwnj;</a><a name="bookmark633">&zwnj;</a><a name="bookmark634">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part213.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part215.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
