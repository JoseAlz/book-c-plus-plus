<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Introducing the Game Over 3.0 Program</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part27.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part29.htm">Next &gt;</a></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark1" class="h1">Introducing the Game Over 3.0 </a><h1 href="#bookmark1">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, there<span class="s12">’</span>s another way to accomplish what I did in Game Over 2.0: set up the file so that I don<span class="s12">’</span>t have to explicitly use the <span class="s35">std:: </span>prefix to access <span class="s35">cout </span>and <span class="s35">endl</span>. And that<span class="s12">’</span>s exactly what I<span class="s12">’</span><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">m going to show you in the Game Over 3.0 program, which displays the same text as its predecessors. You can download the code for this program from the Course Technology website (www.courseptr.com/down- </a>loads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_over3.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Over 3.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates using declarations</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">12 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark106">&zwnj;</a><a name="bookmark107">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using std::cout; using std::endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; endl; return 0;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part27.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part29.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
