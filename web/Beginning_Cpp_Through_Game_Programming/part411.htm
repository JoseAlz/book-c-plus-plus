<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Deriving a Class from an Abstract Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part410.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part412.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">Deriving a Class from an Abstract Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you derive a new class from an abstract class, you can override its pure virtual functions. If you override all of its pure virtual functions, then the new class is not abstract and you can instantiate objects from it. When I derive <span class="s35">Orc </span>from <span class="s35">Creature</span>, I override <span class="s35">Creature</span><span class="s12">’</span>s one pure virtual function with the following lines:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Orc::Greet() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The orc grunts hello.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This means I can instantiate an object from <span class="s35">Orc</span>, which is what I do in <span class="s35">main()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Creature* pCreature = new Orc();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code instantiates a new <span class="s35">Orc </span>object on the heap and assigns the memory location of the object to <span class="s35">pCreature</span>, a pointer to <span class="s35">Creature</span>. Even though I can<span class="s12">’</span>t instantiate an object from <span class="s35">Creature</span>, it<span class="s12">’</span>s perfectly fine to declare a pointer using the class. Like all base class pointers, a pointer to <span class="s35">Creature </span>can point to any object of a class derived from <span class="s35">Creature</span>, like <span class="s35">Orc</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I call <span class="s35">Greet()</span>, the pure virtual function that I override in <span class="s35">Orc </span>with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pCreature-&gt;Greet();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The correct greeting, <span class="s35">The orc grunts hello.</span>, is displayed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1128">356 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1193">&zwnj;</a><a name="bookmark1194">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Finally, I call <span class="s35">DisplayHealth()</span>, which I define in <span class="s35">Creature</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pCreature-&gt;DisplayHealth();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">It also displays the proper message, <span class="s35">Health: 120</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part410.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part412.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
