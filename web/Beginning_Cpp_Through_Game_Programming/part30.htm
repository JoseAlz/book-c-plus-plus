<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding When to Employ using</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part29.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part31.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="part3.htm#bookmark1" class="h1">Understanding When to Employ </a><h1 href="#bookmark1">using</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, you<span class="s12">’</span>ve seen two ways to make elements from a namespace local to your program. But which is the best technique?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A language purist would say you shouldn<span class="s12">’</span>t employ either version of <span class="s35">using </span>and that you should always prefix each and every element from a namespace with its identifier. In my opinion, that<span class="s12">’</span>s like calling your best friend by his first and last name all the time. It just seems a little too formal.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If you hate typing, you can employ the <span class="s35">using </span>directive. A decent compromise is to employ <span class="s35">using </span>declarations. In this book, I<span class="s12">’</span>ll employ the <span class="s35">using </span>directive most of the time for brevity<span class="s12">’</span>s sake.</p><p class="s24" style="padding-top: 11pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_039.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">I’ve laid out a few different options for working with namespaces. I’ve also tried to explain the advantages of each so you can decide which way to go in your own programs. Ultimately, though, the decision may be out of your hands. When you’re working on a project, whether it’s in the classroom or in the professional world, you’ll probably receive coding standards created by the</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark38">Using Arithmetic Operators 13</a><a name="bookmark39">&zwnj;</a><a name="bookmark109">&zwnj;</a><a name="bookmark110">&zwnj;</a><a name="bookmark111">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">person in charge. Regardless of your personal tastes, it’s always best to listen to those who hand out grades or paychecks.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_040.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part29.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part31.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
