<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Calling Base Class Member Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part401.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part403.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark12" class="h1">Calling Base Class Member </a><h1 href="#bookmark12">Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can directly call a base class member function from any function in a derived class. All you have to do is prefix the class name to the member function name with the scope resolution operator. That<span class="s12">’</span>s what I do when I define the overridden version of <span class="s35">Attack() </span>for the <span class="s35">Boss </span>class.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::Attack() const         //override base class member function</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Enemy::Attack();                  //call base class member function cout &lt;&lt; &quot; And laughs heartily at you.\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The code <span class="s35">Enemy::Attack(); </span>explicitly calls the <span class="s35">Attack() </span>member function of</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s35">Enemy</span>. Because the <span class="s35">Attack() </span>definition in <span class="s35">Boss </span>overrides the class<span class="s12">’ </span>inherited</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1177">346 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">version, it<span class="s12">’</span>s as if I<span class="s12">’</span>ve extended the definition of what it means for a boss to attack. What I<span class="s12">’</span>m essentially saying is that when a boss attacks, the boss does exactly what an enemy does and then laughs. When I call the member function for a <span class="s35">Boss </span>object in <span class="s35">main() </span>with the following line, <span class="s35">Boss</span><span class="s12">’ </span><span class="s35">Attack() </span>member function is called because I<span class="s12">’</span>ve overloaded <span class="s35">Attack()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">aBoss.Attack();</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1119"><span class="p">The  first  thing  that  </span></a>Boss<span class="s12">’  </span>Attack()  <span class="p">member  function  does  is  explicitly  call </span>Enemy<span class="s12">’</span><span class="p">s   </span>Attack()   <span class="p">member   function,   which   displays   the   message   </span>Attack! Inflicts  30  damage  points.  <span class="p">Then,  </span>Boss<span class="s12">’  </span>Attack()  <span class="p">member  function  displays the message </span>And laughs heartily at you.<a name="bookmark1178">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_432.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can extend the way a member function of a base class works in a derived class by overriding the base class method and then explicitly calling the base class member function from this new definition in the derived class and adding some functionality.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_433.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part401.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part403.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
