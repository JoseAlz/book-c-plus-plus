<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring Virtual Base Class Member Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part399.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part401.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark12" class="h1">Declaring Virtual Base Class Member </a><h1 href="#bookmark12">Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1117">Any inherited base class member function that you expect to be overridden in a derived class should be declared as virtual, using the keyword </a><span class="s35">virtual</span>. When you declare a member function virtual, you provide a way for overridden versions of the member function to work as expected with pointers and references to objects. Since I know that I<span class="s12">’</span>ll override <span class="s35">Taunt() </span>in the derived class, <span class="s35">Boss</span>, I declare <span class="s35">Taunt() </span>virtual in my base class, <span class="s35">Enemy</span>.<a name="bookmark1174">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Taunt() const;          //made virtual to be overridden</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_426.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you can override non-virtual member functions, this can lead to behavior you might not expect. A good rule of thumb is to declare any base class member function to be overridden as virtual.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_427.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Outside the <span class="s35">Enemy </span>class definition, I define <span class="s35">Taunt()</span>:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Taunt() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The enemy says he will fight you.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Notice that I didn<span class="s12">’</span>t use the keyword <span class="s35">virtual </span>in the definition. You don<span class="s12">’</span>t use</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">virtual <span class="p">in the definition of a member function, only in its declaration.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Once a member function has been declared as virtual, it<span class="s12">’</span>s virtual in any derived class. This means you don<span class="s12">’</span>t have to use the keyword <span class="s35">virtual </span>in a declaration when you override a virtual member function, but you should use it anyway because it will remind you that the function is indeed virtual. So, when I override <span class="s35">Taunt() </span>in <span class="s35">Boss</span>, I explicitly declare it as virtual, even though I don<span class="s12">’</span>t have to:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Taunt() const;            //optional use of keyword virtual</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part399.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part401.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
