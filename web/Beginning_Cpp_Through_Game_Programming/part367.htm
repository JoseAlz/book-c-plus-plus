<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using the delete Operator</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part366.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part368.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark11">Using the delete Operator</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Unlike storage for local variables on the stack, memory that you<span class="s12">’</span>ve allocated on the heap must be explicitly freed. When you<span class="s12">’</span>re finished with memory that you<span class="s12">’</span>ve allocated with <span class="s35">new</span>, you should free it with <span class="s35">delete</span>. That<span class="s12">’</span>s what I do with the following line, which frees the memory on the heap that stored <span class="s35">10</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pHeap;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That memory is returned to the heap for future use. The data that was stored in it is no longer available. Next, I free some more memory, which frees the memory on the heap that stored <span class="s35">20</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pHeap2;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That memory is returned to the heap for future use, and the data that was stored in it is no longer available. Notice that there<span class="s12">’</span>s no difference, as far as <span class="s35">delete </span>is concerned, regarding where in the program I allocated the memory on the heap that I<span class="s12">’</span>m deleting.</p><p class="s24" style="padding-top: 11pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_343.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Because you need to free memory that you’ve allocated once you’re finished with it, a good rule of thumb is that every <span class="s35">new </span>should have a corresponding <span class="s35">delete</span>. In fact, some programmers write the <span class="s35">delete </span>statement just after writing the <span class="s35">new </span>statement whenever possible, so they don’t forget it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_344.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 282pt;text-indent: 0pt;text-align: left;"><a name="bookmark1063">Dynamically Allocating Memory 301</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1018">An important point to understand here is that the two previous statements free the memory on the heap, but they do not directly affect the local variables </a><span class="s35">pHeap </span>and <span class="s35">pHeap2</span>. This creates a potential problem because <span class="s35">pHeap </span>and <span class="s35">pHeap2 </span>now point to memory that has been returned to the heap, meaning that they point to memory that the computer can use in some other way at any given time. Pointers like this are called <span class="s11">dangling pointers </span>and they are quite dangerous. You should never attempt to dereference a dangling pointer. One way to deal with dangling pointers is to assign <span class="s35">0 </span>to them, and that<span class="s12">’</span>s what I do with the following lines, which reassign both dangling pointers so they no longer point to some memory to which they should not point.<a name="bookmark1064">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">pHeap = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pHeap2 = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another good way to deal with a dangling pointer is to assign a valid memory address to it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_345.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Using <span class="s35">delete </span>on a dangling pointer can cause your program to crash. Be sure to set a dangling pointer to <span class="s35">0 </span>or reassign it to point to a new, valid chunk of memory.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_346.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part366.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part368.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
