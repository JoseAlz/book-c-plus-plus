<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding C-Style Strings</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part138.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part140.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30">Understanding C-Style Strings</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Before <span class="s35">string </span>objects came along, C++ programmers represented strings with arrays of characters terminated by a null character. These arrays of characters are now called <span class="s11">C-style strings </span>because the practice began in C programs. You can declare and initialize a C-style string like you would any other array:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">char phrase[] = &quot;Game Over!!!&quot;;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C-style  strings  terminate  with  a  character  called  the  <span class="s11">null  character  </span>to  signify their end. You can write the null character as <span class="s35">’\0’</span>. I didn<span class="s12">’</span>t need to use the null character in the previous code because it is stored at the end of the string for me. So  technically,  <span class="s35">phrase  </span>has  13  elements.  (However,  functions  that  work  with</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark398">102 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings will say that <span class="s35">phrase </span>has a length of <span class="s35">12</span>, which makes sense and is in line with how <span class="s35">string </span>objects work.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As with any other type of array, you can specify the array size when you define it. So another way to declare and initialize a C-style string is</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char phrase[81] = &quot;Game Over!!!&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The previous code creates a C-style string that can hold 80 printable characters (plus its terminating null character).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings don<span class="s12">’</span>t have member functions. But the <span class="s35">cstring </span>file, which is part of the standard library, contains a variety of functions for working with C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A nice thing about <span class="s35">string </span>objects is that they<span class="s12">’</span>re designed to work seamlessly with C-style strings. For example, all of the following are completely valid uses of C-style strings with <span class="s35">string </span>objects:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">string word1 = &quot;Game&quot;; char word2[] = &quot; Over&quot;;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">string phrase = word1 + word2; if (word1 != word2)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;word1 and word2 are not equal.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">if (phrase.find(word2) != string::npos)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;word2 is contained in phrase.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can concatenate <span class="s35">string </span>objects and C-style strings, but the result is always a <span class="s35">string </span>object (so the code <span class="s35">char phrase2[] = word1 + word2; </span>would produce an error). You can compare <span class="s35">string </span>objects and C-style strings using the relational operators. And you can even use C-style strings as arguments in <span class="s35">string </span>object member functions.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings have the same shortcomings as arrays. One of the biggest is that their lengths are fixed. So the moral is: Use <span class="s35">string </span>objects whenever possible, but be prepared to work with C-style strings if necessary.</p><p class="s19" style="padding-top: 2pt;padding-left: 287pt;text-indent: 0pt;text-align: left;"><a name="bookmark340">Using Multidimensional Arrays 103</a><a name="bookmark341">&zwnj;</a><a name="bookmark399">&zwnj;</a><a name="bookmark400">&zwnj;</a><a name="bookmark401">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part138.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part140.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
