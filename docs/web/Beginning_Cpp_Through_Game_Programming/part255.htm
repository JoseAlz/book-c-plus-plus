<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Passing by Value</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part254.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part256.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark8">Passing by Value</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After declaring and initializing <span class="s35">myScore </span>and <span class="s35">yourScore</span>, I send them to <span class="s35">cout</span>. As you<span class="s12">’</span>d expect, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed. Next I call <span class="s35">badSwap()</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When you specify a parameter the way you<span class="s12">’</span>ve seen so far (as an ordinary variable, not as a reference), you<span class="s12">’</span>re indicating that the argument for that parameter will be <span class="s11">passed by value</span>, meaning that the parameter will get a <span class="s11">copy </span>of the argument variable and not access to the argument variable itself. By looking at the function header of <span class="s35">badSwap()</span>, you can tell that a call to the function passes both arguments by value.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void badSwap(int x, int y)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark699">194 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark747">&zwnj;</a><a name="bookmark748">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">This means that when I call <span class="s35">badSwap() </span>with the following line, copies of <span class="s35">myScore</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">and <span class="s35">yourScore </span>are sent to the parameters, <span class="s35">x </span>and <span class="s35">y</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">badSwap(myScore, yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Specifically, <span class="s35">x  </span>is assigned <span class="s35">150  </span>and <span class="s35">y  </span>is assigned <span class="s35">1000</span>. As a result, nothing I do with  <span class="s35">x  </span>and  <span class="s35">y  </span>in  the  function  <span class="s35">badSwap()  </span>will  have  any  effect  on  <span class="s35">myScore  </span>and <span class="s35">yourScore</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When the guts of <span class="s35">badSwap() </span>execute, <span class="s35">x </span>and <span class="s35">y </span>do exchange values<span class="s12">—</span><span class="s35">x </span>becomes <span class="s35">1000 </span>and <span class="s35">y </span>becomes <span class="s35">150</span>. However, when the function ends, both <span class="s35">x </span>and <span class="s35">y </span>go out of scope and cease to exist. Control then returns to <span class="s35">main()</span>, where <span class="s35">myScore </span>and <span class="s35">yourScore </span>haven<span class="s12">’</span>t changed. Then, when I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed again. Sadly, I still have the small score and you still have the large one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part254.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part256.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
