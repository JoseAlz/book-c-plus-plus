<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding the Game Loop</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part105.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part107.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30">Understanding the Game Loop</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s11">game loop </span>is a generalized representation of the flow of events in a game. The core of the events repeats, which is why it<span class="s12">’</span>s called a loop. Although the implementation might be quite different from game to game, the fundamental structure is the same for almost all games across genres. Whether you<span class="s12">’</span>re talking about a simple space shooter or a complex role-playing game (RPG), you can usually break the game down into the same repeating components of the game loop. Figure 2.13 provides a visual representation of the game loop.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Here<span class="s12">’</span>s an explanation of the parts of the game loop:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="h2">Setup. </span><span class="p">This often involves accepting initial settings or loading game assets, such as sound, music, and graphics. The player might also be pre- sented with the game backstory and his objectives.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="h2">Getting player input. </span><span class="p">Whether it comes from the keyboard, mouse, joy- stick, trackball, or some other device, input from the player is captured.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Updating game internals. </span><span class="p">The game logic and rules are applied to the game world, taking into account player input. This might take the shape of a physics system determining the interaction of objects or it might involve calculations of enemy AI, for example.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Updating the display. </span><span class="p">In the majority of games, this process is the most taxing on the computer hardware because it often involves drawing graphics. However, this process can be as simple as displaying a line of text.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span><b>Checking whether the game is over. </b>If the game isn<span class="s12">’</span>t over (if the play- er<span class="s12">’</span>s character is still alive and the player hasn<span class="s12">’</span>t quit, for example), con- trol branches back to the getting player input stage. If the game is over, control falls through to the shutting down stage.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Shutting down. </span><span class="p">At this point, the game is over. The player is often given some final information, such as his score. The program frees any resources, if necessary, and exits.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 288pt;text-indent: 0pt;text-align: left;"><a name="bookmark300">Introducing Guess My Number 73</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="123" height="442" alt="image" src="Image_116.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark216">Figure 2.13</a><a name="bookmark301">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The game loop describes a basic flow of events that fits just about any game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part105.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part107.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
