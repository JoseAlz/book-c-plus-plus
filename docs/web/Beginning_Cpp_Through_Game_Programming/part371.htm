<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring Data Members that Point to Values on the Heap</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part370.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part372.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark11">Declaring Data Members that Point to Values on the Heap</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To declare a data member that points to a value on the heap, you first need to declare a data member that<span class="s12">’</span>s a pointer. That<span class="s12">’</span>s just what I do in <span class="s35">Critter </span>with the following line, which declares <span class="s35">m_pName </span>as a pointer to a <span class="s35">string </span>object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* m_pName;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the class constructor, you can allocate memory on the heap, assign a value to the memory, and then point a pointer data member to the memory. That<span class="s12">’</span>s what I do in the constructor definition with the following line, which allocates memory for a <span class="s35">string </span>object, assigns <span class="s35">name </span>to it, and points <span class="s35">m_pName </span>to that chunk of memory on the heap.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pName = new string(name);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I also declare a data member that is not a pointer:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Age;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This data member gets its value in the constructor the way you<span class="s12">’</span>ve seen before, with a simple assignment statement:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Age = age;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You<span class="s12">’</span>ll see how each of these data members is treated differently as <span class="s35">Critter</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">objects are destroyed, copied, and assigned to each other.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Now, the first object with a data member on the heap is created when <span class="s35">main() </span>calls <span class="s35">testDestructor()</span>. The object, <span class="s35">toDestroy</span>, has an <span class="s35">m_pName </span>data member that points to a <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>that<span class="s12">’</span>s stored on the heap. Figure 9.7 provides a visual representation of the <span class="s35">Critter </span>object. Note that the image is abstract because the name of the critter is actually stored as a <span class="s35">string </span>object, not a string literal.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1022">308 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1070">&zwnj;</a><a name="bookmark1071">&zwnj;</a><a name="bookmark1072">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="48" height="10" alt="image" src="Image_352.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="59" height="12" alt="image" src="Image_353.png"/></span> <span><img width="217" height="40" alt="image" src="Image_354.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A representation of a <span class="s35">Critter </span>object. The <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>is stored on the heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part370.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part372.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
