<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Empty Statements in for Loops</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part119.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part121.htm">Next &gt;</a></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="part3.htm#bookmark5" class="h1">Using Empty Statements in for </a><h1 href="#bookmark5">Loops</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can use empty statements in creating your <span class="s35">for </span>loop, as I did in the following loop:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for ( ; count &lt; 10; )</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I used an empty statement for the initialization and action statements. That<span class="s12">’</span>s fine because I declared and initialized <span class="s35">count </span>before the loop and incremented it inside the loop body. This loop displays the same sequence of integers as the very first loop in the program. Although the loop might look odd, it<span class="s12">’</span>s perfectly legal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_123.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Different game programmers have different traditions. In the last chapter, you saw that you can create a loop that continues until it reaches an exit statement—such as a <span class="s35">break</span>—using <span class="s35">while (true)</span>. Well, some programmers prefer to create these kinds of loops using a <span class="s35">for </span>statement that begins <span class="s35">for (;;)</span>. Because the test expression in this loop is the empty statement, the loop will continue until it encounters some exit statement.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_124.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark321">86 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark364">&zwnj;</a><a name="bookmark365">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part119.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part121.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
