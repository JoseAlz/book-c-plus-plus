<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Pointers to Objects</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part296.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part298.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark9">Using Pointers to Objects</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far, the Pointing program has worked only with values of a built-in type, <span class="s35">int</span>. But you can use pointers with objects just as easily. I demonstrate this next with the following lines, which create <span class="s35">str</span>, a <span class="s35">string </span>object equal to <span class="s35">&quot;score&quot;</span>, and <span class="s35">pStr</span>, a pointer that points to that object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string str = &quot;score&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* pStr = &amp;str;      //pointer to string object</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">pStr <span class="p">is a pointer to </span>string<span class="p">, meaning that it can point to any </span>string <span class="p">object. Another way to say this is to say that </span>pStr <span class="p">can store the address of any </span>string <span class="p">object.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can access an object through a pointer using the dereference operator. That<span class="s12">’</span>s what I do next with the following line.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pStr is: &quot; &lt;&lt; *pStr &lt;&lt; &quot;\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">By using the dereference operator with <span class="s35">*pStr</span>, I send the object to which <span class="s35">pStr</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">points (<span class="s35">str</span>) to <span class="s35">cout</span>. As a result, the text <span class="s35">score </span>is displayed.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can call the member functions of an object through a pointer the same way you can call the member functions of an object through an iterator. One way to do this is by using the dereference operator and the member access operator, which is what I do next with the following lines.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;(*pStr).size() is: &quot; &lt;&lt; (*pStr).size() &lt;&lt; &quot;\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*pStr).size() </span>says, <span class="s12">“</span>Take the result of dereferencing <span class="s35">pStr </span>and call that object<span class="s12">’</span>s <span class="s35">size() </span>member function.<span class="s12">” </span>Because <span class="s35">pStr </span>refers to the <span class="s35">string </span>object equal to <span class="s35">&quot;score&quot;</span>, the code returns <span class="s35">5</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_282.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Whenever you dereference a pointer to access a data member or member function, surround the dereferenced pointer with a pair of parentheses. This ensures that the dot operator will be applied to the object to which the pointer points.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_283.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as with iterators, you can use the <span class="s35">-&gt; </span>operator with pointers for a more readable way to access object members. That<span class="s12">’</span>s what I demonstrate next with the following line.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;pStr-&gt;size() is: &quot; &lt;&lt; pStr-&gt;size() &lt;&lt; &quot;\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 250pt;text-indent: 0pt;text-align: left;"><a name="bookmark815">Understanding Pointers and Constants 231</a><a name="bookmark816">&zwnj;</a><a name="bookmark860">&zwnj;</a><a name="bookmark861">&zwnj;</a><a name="bookmark862">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding statement again displays the number of characters in the string object equal to <span class="s35">&quot;score&quot;</span>; however, I<span class="s12">’</span>m able to substitute <span class="s35">pStr-&gt;size() </span>for <span class="s35">(*pStr).size() </span>this time, making the code more readable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part296.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part298.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
