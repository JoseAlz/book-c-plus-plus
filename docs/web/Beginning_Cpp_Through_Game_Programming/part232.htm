<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Calling Overloaded Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part231.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part233.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark8">Calling Overloaded Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can call an overloaded function the same way you call any other function, by using its name with a set of valid arguments. But with overloaded functions, the compiler (based on the argument values) determines which definition to invoke. For example, when I call <span class="s35">triple() </span>with the following line and use an <span class="s35">int </span>as the argument, the compiler knows to invoke the definition that takes an <span class="s35">int</span>. As a result, the function returns the <span class="s35">int </span>15.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Tripling 5: &quot; &lt;&lt; triple(5) &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark590">I call </a><span class="s35">triple() </span>again with:<a name="bookmark667">&zwnj;</a></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Tripling ’gamer’: &quot; &lt;&lt; triple(&quot;gamer&quot;);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because I use a string literal as the argument, the compiler knows to invoke the definition of the function that takes a <span class="s35">string </span>object. As a result, the function returns the <span class="s35">string </span>object equal to gamergamergamer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part231.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part233.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
