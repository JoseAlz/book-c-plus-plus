<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part350.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part352.htm">Next &gt;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;">n <span class="p">Object-oriented programming (OOP) is a way of thinking about programming in which you define different types of objects with relationships that interact with each other.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark997">282 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark998">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can create a new type by defining a class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A class is a blueprint for an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">In a class, you can declare data members and member functions.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>When you define a member function outside of a class definition, you need to qualify it with the class name and scope resolution operator (<span class="s35">::</span>).</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can inline a member function by defining it directly in the class definition.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>You can access data members and member functions of objects through the member selection operator (<span class="s35">.</span>).</p><p style="padding-top: 5pt;padding-left: 64pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Every class has a constructor<span class="s12">—</span>a special member function that<span class="s12">’</span>s automatically called every time a new object is instantiated. Constructors are often used to initialize data members.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A default constructor requires no arguments. If you don<span class="s12">’</span>t provide a constructor definition in your class, the compiler will create a default constructor for you.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Member initializers provide shorthand to assign values to data members in a constructor.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can set member access levels in a class by using the keywords <span class="s35">public</span>, <span class="s35">private</span>, and <span class="s35">protected</span>. (You<span class="s12">’</span>ll learn about <span class="s35">protected </span>in Chapter 9, <span class="s12">“</span>Advanced Classes and Dynamic Memory: Game Lobby.<span class="s12">”</span>)</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A public member can be accessed by any part of your code through an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A private member can only be accessed by a member function of that class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">An accessor member function allows indirect access to a data member.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A static data member exists for the entire class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A static member function exists for the entire class.</span></p><p style="padding-top: 5pt;padding-left: 64pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>Some game programmers prefix private data member names with <span class="s35">m_ </span>and static data member names with <span class="s35">s_ </span>so that they<span class="s12">’</span>re instantly recognizable.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark934">Questions and Answers 283</a><a name="bookmark999">&zwnj;</a><a name="bookmark1000">&zwnj;</a><a name="bookmark1001">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A constant member function can<span class="s12">’</span>t modify non-static data members or call non-constant member functions of its class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part350.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part352.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
