<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Summary</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part318.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part320.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Computer memory is organized in an ordered way, where each chunk of memory has its own unique address.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A pointer is a variable that contains a memory address.</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark898">Summary 249</a><a name="bookmark899">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">In many ways, pointers act like iterators from the STL. For example, just as with iterators, you use pointers to indirectly access an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">To declare a pointer, you list a type, followed by an asterisk, followed by a name.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Programmers often prefix pointer variable names with the letter <span class="s12">“</span>p<span class="s12">” </span>to remind them that the variable is indeed a pointer.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;line-height: 140%;text-align: left;"><span class="s29">n </span>Just like an iterator, a pointer is declared to refer to a value of a specific type. <span class="s29">n </span>It<span class="s12">’</span>s good programming practice to initialize a pointer when you declare it. <span class="s29">n </span>If you assign <span class="s35">0 </span>to a pointer, the pointer is called a null pointer.</p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>To get the address of a variable, put the address of operator (<span class="s35">&amp;</span>) before the variable name.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>When a pointer contains the address of an object, it<span class="s12">’</span>s said to point to the object.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Unlike references, you can reassign pointers. That is, a pointer can point to different objects at different times during the life of a program.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Just as with iterators, you dereference a pointer to access the object it points to with <span class="s35">*</span>, the dereference operator.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Just as with iterators, you can use the <span class="s35">-&gt; </span>operator with pointers for a more readable way to access object data members and member functions.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A constant pointer can only point to the object it was initialized to point to. You declare a constant pointer by putting the keyword <span class="s35">const </span>right before the pointer name, as in <span class="s35">int* const p = &amp;i;</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can<span class="s12">’</span>t use a pointer to a constant to change the value to which it points. You declare a pointer to a constant by putting the keyword <span class="s35">const </span>before the type name, as in <span class="s35">const int* p;</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>A constant pointer to a constant can only point to the value it was initialized to point to, and it can<span class="s12">’</span>t be used to change that value. You declare a constant pointer to a constant by putting the keyword <span class="s35">const </span>before the type name and right before the pointer name, as in <span class="s35">const int* const p = &amp;I;</span>.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can pass pointers for efficiency or to provide direct access to an object.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark837">250 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark900">&zwnj;</a><a name="bookmark901">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>If you want to pass a pointer for efficiency, you should pass a pointer to a constant or a constant pointer to a constant so the object you<span class="s12">’</span>re passing access to can<span class="s12">’</span>t be changed through the pointer.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A dangling pointer is a pointer to an invalid memory address. Dangling pointers are often caused by deleting an object to which a pointer pointed. Dereferencing such a pointer can lead to disastrous results.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can return a pointer from a function, but be careful not to return a dangling pointer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part318.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part320.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
