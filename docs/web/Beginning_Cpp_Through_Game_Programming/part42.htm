<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Naming Variables</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part41.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part43.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark3">Naming Variables</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">To declare a variable, you must provide a name, known as an <span class="s11">identifier</span>. There are only a few rules you have to follow to create a legal identifier.</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">An identifier can contain only numbers, letters, and underscores.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>An identifier can<span class="s12">’</span>t start with a number.</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>An identifier can<span class="s12">’</span>t be a C<span class="s14">þþ </span>keyword.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">keyword </span>is a special word that C<span class="s14">þþ </span>reserves for its own use. There aren<span class="s12">’</span>t many, but to see a full list, check out Appendix C.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the rules for creating <span class="s11">legal </span>variable names, following are some guidelines for creating <span class="s11">good </span>variable names.</p><p style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span><b>Choose descriptive names. </b>Variable names should be clear to another programmer. For example, use <span class="s35">score </span>instead of <span class="s35">s</span>. (One exception to this rule involves variables used for a brief period. In that case, single-letter variable names, such as <span class="s35">x</span>, are fine.)</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Be consistent. </b>There are different schools of thought about how to write multiword variable names. Is it <span class="s35">high_score </span>or <span class="s35">highScore</span>? In this book, I use the second style, where the initial letter of the second word (and any other words) is capitalized, known as <span class="s11">camel case</span>. But as long as you<span class="s12">’</span>re consistent, it<span class="s12">’</span>s not important which method you use.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Follow the traditions of the language. </b>Some naming conventions are just traditions. For example, in most languages (C<span class="s14">þþ </span>included) variable names start with a lowercase letter. Another tradition is to avoid using an underscore as the first character of your variable names. Names that begin with an underscore can have special meaning.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span><b>Keep the length in check. </b>Even though <span class="s35">playerTwoBonusForRoundOne </span>is descriptive, it can make code hard to read. Plus, long names increase the risk of a typo. As a guideline, try to limit your variable names to fewer</p><p class="s19" style="padding-top: 2pt;padding-left: 267pt;text-indent: 0pt;text-align: left;"><a name="bookmark50">Declaring and Initializing Variables 21</a><a name="bookmark132">&zwnj;</a><a name="bookmark133">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">than 15 characters. Ultimately, though, your compiler sets an actual upper limit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_052.png"/></span></p><p class="s38" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Self-documenting <span class="s19">code is written in such a way that it’s easy to understand what is happening in the program independent of any comments. Choosing good variable names is an excellent step toward this kind of code.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part41.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part43.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
