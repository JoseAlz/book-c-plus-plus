<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>How This Book Is Organized</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part5.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part7.htm">Next &gt;</a></p><p class="s23" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">How This Book Is Organized</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I start at the very beginning of C<span class="s14">þþ </span>and game programming, assuming no experience in either. As the chapters progress, I cover more advanced topics, building on previous material.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In each chapter, I cover one or several related topics. I move through concepts one step at a time by writing bite-sized, game-related programs to demonstrate each idea. At the end of each chapter, I combine some of the most important concepts in a single game. The last chapter of the book ends with the most ambitious project<span class="s12">—</span>one that harnesses all of the major concepts presented throughout the book.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In addition to learning about C<span class="s14">þþ </span>and game programming, you<span class="s12">’</span>ll also learn how to organize your work, break down problems into manageable chunks, and reﬁne your code. You<span class="s12">’</span>ll be challenged at times, but never overwhelmed. Most of all, you<span class="s12">’</span>ll have fun while learning. In the process, you<span class="s12">’</span>ll create some cool computer games and gain insight into the craft of game programming.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><b>Chapter 1: Types, Variables, and Standard I/O: Lost Fortune. </b>You<span class="s12">’</span>ll be introduced to the fundamentals of C<span class="s14">þþ</span>, the standard language of the game industry. You<span class="s12">’</span>ll learn to display output in a console window, perform arithmetic computations, use variables, and get player input from the keyboard.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 2: Truth, Branching, and the Game Loop: Guess My Number. </b>You<span class="s12">’</span>ll create more interesting games by writing programs that execute, skip, or repeat sections of code based on some condition. You<span class="s12">’</span>ll learn how to generate random numbers to add some unpredictability to your games. And you<span class="s12">’</span>ll learn about the Game Loop<span class="s12">—</span>a fundamental way to organize your games to keep the action going.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">xx Introduction</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 3: For Loops, Strings, and Arrays: Word Jumble. </b>You<span class="s12">’</span>ll learn about sequences and work with strings<span class="s12">—</span>sequences of characters that are perfect for word games. You also learn about software objects<span class="s12">—</span>entities that can be used to represent objects in your games, such as alien spacecrafts, healing potions, or even the player himself.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 4: The Standard Template Library: Hangman. </b>You<span class="s12">’</span>ll be introduced to a powerful library<span class="s12">—</span>a toolbox that game programmers (and even non-game programmers) rely on to hold collections of things, such as items in a player<span class="s12">’</span>s inventory. You<span class="s12">’</span>ll also learn about techniques that can help you plan larger game programs.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 5: Functions: Mad Lib. </b>You<span class="s12">’</span>ll learn to break up your game programs into smaller, more manageable chunks of code. You<span class="s12">’</span>ll accomplish this by dis- covering functions, the fundamental units of logic in your game programs.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;"><b>Chapter 6: References: Tic-Tac-Toe. </b>You<span class="s12">’</span>ll learn how to share information with different parts of your programs in an efﬁcient and clear manner. You<span class="s12">’</span>ll also see a brief example of AI (<span class="s11">arti</span><span class="s12">ﬁ</span><span class="s11">cial intelligence</span>) and you<span class="s12">’</span>ll learn how to give a computer opponent a little bit of personality.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;"><b>Chapter 7: Pointers: Tic-Tac-Toe 2.0. </b>You<span class="s12">’</span>ll begin to discover some of the most low-level and powerful features of C<span class="s14">þþ</span>, such as how to directly address and manipulate your computer<span class="s12">’</span>s memory.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 8: Classes: Critter Caretaker. </b>You<span class="s12">’</span>ll learn how to create your own kinds of objects and deﬁne the ways they<span class="s12">’</span>ll interact with each other through object- oriented programming. In the process, you<span class="s12">’</span>ll create your very own critter to care for.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 9: Advanced Classes and Dynamic Memory: Game Lobby. </b>You<span class="s12">’</span>ll expand on your direct connection with the computer and learn to acquire and free memory as your game programs require. You<span class="s12">’</span>ll also see the pitfalls of using this <span class="s12">“</span>dynamic<span class="s12">” </span>memory and how to avoid them.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 10: Inheritance and Polymorphism: Blackjack. </b>You<span class="s12">’</span>ll learn how to deﬁne objects in terms of other objects. Then you<span class="s12">’</span>ll pull everything you<span class="s12">’</span>ve learned together into one big ﬁnal game. You<span class="s12">’</span>ll see how a sizeable project is designed and implemented by creating a version of the classic casino game of Blackjack (tacky green felt not included).</p><p class="s19" style="padding-top: 2pt;padding-left: 374pt;text-indent: 0pt;text-align: left;">Introduction xxi</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part5.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part7.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
