<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Assigning to a Variable the Value Pointed to by a Returned Pointer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part311.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part313.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark10" class="h1">Assigning to a Variable the Value Pointed </a><h1 href="#bookmark10">to by a Returned Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I assign the value pointed to by a returned pointer to a variable.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string str = *(ptrToElement(&amp;inventory, 2));</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The call to <span class="s35">prtToElement() </span>returns a pointer to <span class="s35">inventory[2]</span>. However, the preceding statement doesn<span class="s12">’</span>t assign this pointer to <span class="s35">str</span><span class="s12">—</span>it can<span class="s12">’</span>t because <span class="s35">str </span>is a <span class="s35">string </span>object. Instead, the computer quietly makes a copy of the <span class="s35">string </span>object to which the pointer points and assigns that object to <span class="s35">str</span>. To help drive this point home, check out Figure 7.6, which provides an abstract representation of the results of this assignment.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark885">Returning Pointers 243</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="15" height="9" alt="image" src="Image_297.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="83" height="40" alt="image" src="Image_298.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="247" height="119" alt="image" src="Image_299.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark830">Figure 7.6</a><a name="bookmark886">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">str <span class="s19">is a new </span>string <span class="s19">object, totally independent from </span>inventory<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">An assignment like this one, where an object is copied, is more expensive than the assignment of one pointer to another. Sometimes the cost of copying an object is perfectly acceptable, but you should be aware of the extra overhead associated with this kind of assignment and avoid it when necessary.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part311.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part313.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
