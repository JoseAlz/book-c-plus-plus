<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Container Data Members</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part358.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part360.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">Using Container Data Members</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can also use containers as data members for your objects. That<span class="s12">’</span>s what I do when I define <span class="s35">Farm</span>. The single data member I declare for the class is simply a vector that holds <span class="s35">Critter </span>objects called <span class="s35">m_Critter</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;Critter&gt; m_Critters;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When I instantiate a new <span class="s35">Farm </span>object with:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Farm myFarm(3);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">it calls the constructor:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Farm::Farm(int spaces)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Critters.reserve(spaces);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">which allocates memory for three <span class="s35">Critter </span>objects in the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">m_Critter</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">vector.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">Next, I add three critters to the farm by calling the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">Add() </span>member function.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1046">292 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">myFarm.Add(Critter(&quot;Moe&quot;)); myFarm.Add(Critter(&quot;Larry&quot;)); myFarm.Add(Critter(&quot;Curly&quot;));</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The following member function accepts a constant reference to a <span class="s35">Critter </span>object and adds a copy of the object to the <span class="s35">m_Critters </span>vector.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Farm::Add(const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark1010">m_Critters.push_back(aCritter);</a><a name="bookmark1047">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1011">Tra p</a><a name="bookmark1048">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_333.png"/></span></p><p class="s35" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">push_back() <span class="s19">adds a copy of an object to a vector—this means that I create an extra copy of each </span>Critter <span class="s19">object every time I call </span>Add()<span class="s19">. This is no big deal in the Critter Farm program, but if I were adding many large objects, it could become a performance issue. You can reduce this overhead by using, say, a vector of pointers to objects. You’ll see how to work with pointers to objects later in this chapter.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_334.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I take roll through the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">RollCall() </span>member function.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">myFarm.RollCall();</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This iterates through the vector, calling each <span class="s35">Critter </span>object<span class="s12">’</span>s <span class="s35">GetName() </span>member function and getting each critter to speak up and say its name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part358.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part360.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
