<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Planning the Game</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part270.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part272.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark9">Planning the Game</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This game is your most ambitious project yet. You certainly have all the skills you need to create it, but I<span class="s12">’</span>m going to go through a longer planning section to help you get the big picture and understand how to create a larger program. Remember, the most important part of programming is planning to program. Without a roadmap, you<span class="s12">’</span>ll never get to where you want to go (or it<span class="s12">’</span>ll take you a lot longer as you travel the scenic route).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_251.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Game designers work countless hours on concept papers, design documents, and prototypes before programmers write any game code. Once the design work is done, the programmers start their work— more planning. It’s only after programmers write their own technical designs that they then begin coding in earnest. The moral of this story? Plan. It’s easier to scrap a blueprint than a 50-story building.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_252.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark773">204 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Writing the Pseudocode</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It<span class="s12">’</span>s back to your favorite language that<span class="s12">’</span>s not really a language<span class="s12">—</span>pseudocode. Because I<span class="s12">’</span>ll be using functions for most of the tasks in the program, I can afford to think about the code at a pretty abstract level. Each line of pseudocode should feel like one function call. Later, all I<span class="s12">’</span>ll have to do is write the functions that the plan implies. Here<span class="s12">’</span>s the pseudocode:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">Create an empty Tic-Tac-Toe board Display the game instructions Determine who goes first</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Display the board</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">While nobody’s won and it’s not a tie If it’s the human’s turn</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Get the human’s move</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 20pt;line-height: 118%;text-align: left;">Update the board with the human’s move Otherwise</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">Calculate the computer’s move</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 20pt;line-height: 118%;text-align: left;">Update the board with the computer’s move Display the board</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Switch turns</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Congratulate the winner or declare a tie</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Representing the Data</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All right, I<span class="s12">’</span>ve got a good plan, but it is pretty abstract and talks about throwing around different elements that aren<span class="s12">’</span>t really defined in my mind yet. I see the idea of making a move as placing a piece on a game board. But how exactly am I going to represent the game board? Or a piece? Or a move?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Since I<span class="s12">’</span>m going to display the game board on the screen, why not just represent a piece as a single character<span class="s12">—</span>an X or an O? An empty piece could just be a space. Therefore, the board itself could be a vector of <span class="s35">char</span>s. There are nine squares on a Tic-Tac-Toe board, so the vector should have nine elements. Each square on the board will correspond to an element in the vector. Figure 6.6 illustrates what I mean.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Each square or position on the board is represented by a number, 0<span class="s12">–</span>8. That means the vector will have nine elements, giving it position numbers 0<span class="s12">–</span>8. Because each move indicates a square where a piece should be placed, a move is also just a number, 0<span class="s12">–</span>8. That means a move could be represented as an <span class="s35">int</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark774">Introducing the Tic-Tac-Toe Game 205</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.139pt" cellspacing="0"><tr style="height:36pt"><td style="width:36pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_253.png"/></span></p></td><td style="width:36pt;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><span><img width="6" height="18" alt="image" src="Image_254.png"/></span></p></td><td style="width:36pt;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_255.png"/></span></p></td></tr><tr style="height:35pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_256.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_257.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_258.png"/></span></p></td></tr><tr style="height:36pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_259.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="17" alt="image" src="Image_260.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_261.png"/></span></p></td></tr></table><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 6.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each square number corresponds to a position in the vector that represents the board.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark715">The side the player and computer play could also be represented by a </a><span class="s35">char</span><span class="s12">— </span>either an <span class="s35">’X’ </span>or an <span class="s35">’O’</span>, just like a game piece. A variable to represent the side of the current turn would also be a <span class="s35">char</span>, either an <span class="s35">’X’  </span>or an <span class="s35">’O’</span>.<a name="bookmark775">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Creating a List of Functions</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The pseudocode inspires the different functions I<span class="s12">’</span>ll need. I created a list of them, thinking about what each will do, what parameters they<span class="s12">’</span>ll have, and what values they<span class="s12">’</span>ll return. Table 6.1 shows the results of my efforts.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part270.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part272.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
