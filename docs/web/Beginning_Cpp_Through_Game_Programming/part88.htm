<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Looping with a do Loop</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part87.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part89.htm">Next &gt;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark4" class="h1">Looping with a do </a><h1 href="#bookmark4">Loop</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Before the <span class="s35">do </span>loop begins, I declare the character <span class="s35">again</span>. However, I don<span class="s12">’</span>t need to initialize it because it<span class="s12">’</span>s not tested until after the first iteration of the loop. I get a</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark268">58 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">new value for <span class="s35">again </span>from the user in the loop body. Then I test <span class="s35">again </span>in the loop expression. If <span class="s35">again  </span>is equal to <span class="s35">’y’</span>, the loop repeats; otherwise, the loop ends.</p><p class="s24" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">IR W</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_094.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Even though you can use <span class="s35">while </span>and <span class="s35">do </span>loops pretty interchangeably, most programmers use the <span class="s35">while </span>loop. Although a <span class="s35">do </span>loop might seem more natural in some cases, the advantage of a <span class="s35">while </span>loop is that its expression appears right at the top of the loop; you don’t have to go hunting to the bottom of the loop to find it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark198">Tra p</a><a name="bookmark269">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_096.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark199">If you’ve ever had a game get stuck in the same endless cycle, you might have experienced an</a><a name="bookmark270">&zwnj;</a></p><p class="s38" style="padding-left: 59pt;text-indent: 0pt;text-align: justify;">infinite loop<span class="s19">—a loop without end. Here’s a simple example of an infinite loop:</span></p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;line-height: 118%;text-align: left;">int test = 10; while (test == 10)</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; test;</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">In this case, the loop is entered because <span class="s35">test </span>is <span class="s35">10</span>. But because <span class="s35">test </span>never changes, the loop will never stop. As a result, the user will have to kill the running program to end it. The moral of this story? Make sure that the expression of a loop can eventually become <span class="s35">false </span>or that there’s another way for the loop to end, such as described in the following section, “Using break and continue Statements.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part87.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part89.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
