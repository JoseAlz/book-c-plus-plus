<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How is a pointer different from the variable to which it points?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: A pointer stores a memory address. If a pointer points to a variable, it stores the address of that variable.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What good is it to store the address of a variable that already exists?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: One big advantage of storing the address of an existing variable is that you can pass a pointer to the variable for efficiency instead of passing the variable by value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Does a pointer always have to point to an existing variable?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: No. You can create a pointer that points to an unnamed chunk of computer memory as you need it. You<span class="s12">’</span>ll learn more about allocating memory in this dynamic fashion in Chapter 9, <span class="s12">“</span>Advanced Classes and Dynamic Memory: Game Lobby.<span class="s12">”</span></p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Why should I pass variables using references instead of pointers whenever possible?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Because of the sweet, syntactic sugar that references provide. Passing a reference or a pointer is an efficient way to provide access to objects, but pointers require extra syntax (like the dereference operator) to access the object itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I initialize a pointer when I declare it or soon thereafter?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because dereferencing an uninitialized pointer can lead to disastrous results, including a program crash.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark902">Questions and Answers 251</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a dangling pointer?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: A pointer that points to an invalid memory location, where any data could exist.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s so dangerous about a dangling pointer?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: Like using an uninitialized pointer, using a dangling pointer can lead to disastrous results, including a program crash.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why should I initialize a pointer to <span class="s35">0</span>?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: By initializing a pointer to <span class="s35">0</span>, you create a null pointer, which is understood as a pointer to nothing.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: So then it<span class="s12">’</span>s safe to dereference a null pointer, right?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No! Although it<span class="s12">’</span>s good programming practice to assign <span class="s35">0 </span>to a pointer that doesn<span class="s12">’</span>t point to an object, dereferencing a null pointer is as dangerous as dereferencing a dangling pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What will happen if I dereference a null pointer?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: Just like dereferencing a dangling pointer or an uninitialized pointer, the results are unpredictable. Most likely, you<span class="s12">’</span>ll crash your program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What good are null pointers?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: They<span class="s12">’</span>re often returned by functions as a sign of failure. For example, if a function is supposed to return a pointer to an object that represents the graphics screen, but that function couldn<span class="s12">’</span>t initialize the screen, it might return a null pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How does using the keyword <span class="s35">const </span>when declaring a pointer affect the pointer?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: It depends on how you use it. Generally, you use <span class="s35">const </span>when you are declaring a pointer to restrict what the pointer can do.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What kinds of restrictions can I impose on a pointer by declaring it with</p><p class="s35" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">const<span class="p">?</span></p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: You can restrict a pointer so it can only point to the object it was initialized to point to, or you can restrict a pointer so it can<span class="s12">’</span>t change the value of the object it points to, or both.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark838">252 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark903">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why would I want to restrict what a pointer can do?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: For safety. For example, you might be working with an object that you know you don<span class="s12">’</span>t want to change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: To what type of pointers can I assign a constant value?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A pointer to a constant or a constant pointer to a constant. Q: How can I safely return a pointer from a function?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;"><a name="bookmark839">A: One way is by returning a pointer to an object that you received from the calling function. This way, you</a><span class="s12">’</span>re returning a pointer to an object that exists back in the calling code. (In Chapter 9, you<span class="s12">’</span>ll discover another important way when you learn about dynamic memory.)<a name="bookmark904">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part319.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part321.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
