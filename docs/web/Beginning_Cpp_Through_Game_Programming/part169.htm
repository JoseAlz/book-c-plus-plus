<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Declaring Iterators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part168.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part170.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark6">Declaring Iterators</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">After I declare a vector for the hero<span class="s12">’</span>s inventory and add the same three <span class="s35">string</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">objects from the previous incarnations of the program, I declare an iterator.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt;::iterator myIterator;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding line declares an iterator named <span class="s35">myIterator </span>for a vector that contains <span class="s35">string </span>objects. To declare an iterator of you own, follow the same pattern. Write the  container  type,  followed  by  the  type  of  objects  the  container  will  hold (surrounded by the <span class="s35">&lt; </span>and <span class="s35">&gt; </span>symbols), followed by the scope resolution operator (the <span class="s35">:: </span>symbol), followed by <span class="s35">iterator</span>, followed by a name for your new iterator.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So what are iterators? <span class="s11">Iterators </span>are values that identify a particular element in a container. Given an iterator, you can access the value of the element. Given the right kind of iterator, you can change the value. Iterators can also move among elements via familiar arithmetic operators.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A way to think about iterators is to imagine them as Post-it notes that you can stick on a specific element in a container. An iterator is not one of the elements, but a way to refer to one. Specifically, I can use <span class="s35">myIterator </span>to refer to a particular element of the vector <span class="s35">inventory</span>. That is, I can stick the <span class="s35">myIterator</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark497">126 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Post-it note on a specific element in <span class="s35">inventory</span>. Once I<span class="s12">’</span>ve done that, I can access the element or even change it through the iterator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I declare another iterator.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt;::const_iterator iter;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark441">The preceding line of code creates a constant iterator named </a><span class="s35">iter </span>for a vector that contains <span class="s35">string </span>objects. A <span class="s11">constant iterator </span>is just like a regular iterator except that you can<span class="s12">’</span>t use it to change the element to which it refers; the element must remain constant. You can think of a constant iterator as providing read- only access. However, the iterator itself can change. This means you can move <span class="s35">iter </span>all around the vector <span class="s35">inventory </span>as you see fit. You can<span class="s12">’</span>t, however, change the value of any of the elements through <span class="s35">iter</span>. With a constant iterator the Post- it can change, but the thing it<span class="s12">’</span>s stuck to can<span class="s12">’</span>t.<a name="bookmark498">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Why would you want to use a constant iterator if it<span class="s12">’</span>s a limited version of a regular iterator? First, it makes your intentions clearer. When you use a constant iterator, it<span class="s12">’</span>s clear that you won<span class="s12">’</span>t be changing any element to which it refers. Second, it<span class="s12">’</span>s safer. You can use a constant iterator to avoid accidentally changing a container element. (If you attempt to change an element through a constant iterator, you<span class="s12">’</span>ll generate a compile error.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_159.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Using <span class="s35">push_back() </span>might invalidate all iterators referencing the vector.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_160.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Is all of this iterator talk a little too abstract for you? Are you tired of analogies about Post-it notes? Fear not<span class="s12">—</span>next, I put an actual iterator to work.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part168.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part170.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
