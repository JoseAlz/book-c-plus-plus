<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part285.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part287.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">Q: Different programmers put the reference operator (<span class="s35">&amp;</span>) in different places when declaring a reference. Where should I put it?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Three basic styles exist with regard to using the referencing operator. Some programmers opt for <span class="s35">int&amp; ref = var;</span>, while others opt for <span class="s35">int &amp; ref = var;</span>.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark802">Questions and Answers 219</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Still others opt for <span class="s35">int &amp;ref = var;</span>. The computer is fine with all three. There are cases to be made for each style; however, the most important thing is to be consistent.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why can<span class="s12">’</span>t I initialize a non-constant reference with a constant value?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: Because a non-constant reference allows you to change the value to which it refers.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: If I initialize a constant reference with a non-constant variable, can I change the value of the variable?</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: Not through the constant reference because when you declare a constant reference, you<span class="s12">’</span>re saying that the reference can<span class="s12">’</span>t be used to change the value to which it refers (even if that value can be changed by other means).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How does passing a constant reference save overhead?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: When you pass a large object to a function by value, your program makes a copy of the object. This can be an expensive operation depending on the size of the object. Passing a reference is like only passing access to the large object; it is an inexpensive operation.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can I make a reference to a reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: Not exactly. You can assign one reference to another reference, but the new reference will simply refer to the value to which the original reference refers.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">Q: What happens if I declare a reference without initializing it? A: Your compiler should complain because it<span class="s12">’</span>s illegal.</p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Why should I avoid changing the value of a variable that I pass through a reference?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because it could lead to confusion. It<span class="s12">’</span>s impossible to tell from only a function call whether a variable is being passed to change its value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Does that mean I should always pass a constant reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No. You can pass a non-constant reference to a function, but to most game programmers, this signals that you intend to change the argument variable<span class="s12">’</span>s value.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark803">220 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: If I don<span class="s12">’</span>t change the argument variables passed to functions, how should I get new information back to the calling code?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: Use return values.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can I pass a literal through a non-constant reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: No. If you try to pass a literal as a non-constant reference, you<span class="s12">’</span>ll generate a compile error.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark730">Q: Is it impossible to pass a literal to a parameter that accepts a reference? A: No, you can pass a literal as a constant reference.</a><a name="bookmark804">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What happens when I return an object from a function?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Normally, your program creates a copy of the object and returns that. This can be an expensive operation, depending on the size of the object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why return a reference?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: It can be more efficient because returning a reference doesn<span class="s12">’</span>t involve copying an object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How can I lose the efficiency of returning a reference?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -13pt;line-height: 106%;text-align: justify;">A: By assigning the returned reference to a variable. When you assign a reference to a variable, the computer must make a copy of the object to which the reference refers.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s wrong with returning a reference to a local variable?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: The local variable doesn<span class="s12">’</span>t exist once the function ends, which means that you<span class="s12">’</span>re returning a reference to a non-existent object, which is illegal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part285.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part287.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
