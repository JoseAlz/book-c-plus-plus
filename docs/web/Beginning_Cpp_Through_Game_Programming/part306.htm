<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Passing a Constant Pointer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part305.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part307.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark10">Passing a Constant Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen that it<span class="s12">’</span>s possible to give a function access to variables by passing references. It<span class="s12">’</span>s also possible to accomplish this using pointers. When you pass a pointer, you only pass the address of an object. This can be quite efficient, especially if you<span class="s12">’</span>re working with objects that occupy large chunks of memory. Passing a pointer is like e-mailing a friend the URL of a website instead of trying to send him the entire site.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Before you can pass a pointer to a function, you need to specify function parameters as pointers. That<span class="s12">’</span>s what I do in the <span class="s35">goodSwap() </span>header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void goodSwap(int* const pX, int* const pY)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This means that <span class="s35">pX </span>and <span class="s35">pY </span>are constant pointers and will each accept a memory address. I made the parameters constant pointers because, although I plan to change the values they point to, I don<span class="s12">’</span>t plan to change the pointers themselves. Remember, this is just how references work. You can change the value to which a reference refers, but not the reference itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In <span class="s35">main()</span>, I pass the addresses of <span class="s35">myScore </span>and <span class="s35">yourScore </span>when I call <span class="s35">goodSwap()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">goodSwap(&amp;myScore, &amp;yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice that I send the addresses of the variables to <span class="s35">goodSwap() </span>by using the address of operator. When you pass an object to a pointer, you need to send the address of the object.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark874">238 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In <span class="s35">goodSwap()</span>, <span class="s35">pX </span>stores the address of <span class="s35">myScore </span>and <span class="s35">pY </span>stores the address of <span class="s35">yourScore</span>. Anything done to <span class="s35">*pX </span>will be done to <span class="s35">myScore</span>; anything done to <span class="s35">*pY </span>will be done to <span class="s35">yourScore</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first line of <span class="s35">goodSwap() </span>takes the value that <span class="s35">pX </span>points to and assigns it to <span class="s35">temp</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int temp = *pX;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Because <span class="s35">pX </span>points to <span class="s35">myScore</span>, <span class="s35">temp </span>becomes <span class="s35">150</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next line assigns the value pointed to by <span class="s35">pY </span>to the object to which <span class="s35">pX </span>points.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark824">*pX = *pY;</a><a name="bookmark875">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This statement copies the value stored in <span class="s35">yourScore</span>, <span class="s35">1000</span>, and assigns it to the memory location of <span class="s35">myScore</span>. As a result, <span class="s35">myScore </span>becomes <span class="s35">1000</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The last statement in the function stores the value of <span class="s35">temp</span>, <span class="s35">150</span>, in the address pointed to by <span class="s35">pY</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pY = temp;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Because <span class="s35">pY </span>points to <span class="s35">yourScore</span>, <span class="s35">yourScore </span>becomes <span class="s35">150</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After the function ends, control returns to <span class="s35">main()</span>, where I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>. This time, <span class="s35">1000 </span>and <span class="s35">150 </span>are displayed. The variables have exchanged values. Success at last!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_291.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s54" target="_blank">You can also pass a constant pointer to a constant. This works much like passing a constant reference, which is done to efficiently pass an object that you don’t need to change. I’ve adapted the Inventory Displayer program from Chapter 6, which demonstrates passing constant references, to pass a constant pointer to a constant. You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">inventory_displayer_pointer_ver.cpp</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_292.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part305.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part307.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
