<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using a Constant Pointer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part298.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part300.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark10">Using a Constant Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As you<span class="s12">’</span>ve seen, pointers can point to different objects at different times in a program. However, by using the <span class="s35">const </span>keyword when you declare and initialize a pointer, you can restrict the pointer so it can only point to the object it was initialized to point to. A pointer like this is called a <span class="s11">constant pointer</span>. Another way to say this is to say that the address stored in a constant pointer can never change<span class="s12">—</span>it<span class="s12">’</span>s constant. Here<span class="s12">’</span>s an example of creating a constant pointer:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int score = 100;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* const pScore = &amp;score;    //a constant pointer</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The preceding code creates a constant pointer, <span class="s35">pScore</span>, which points to <span class="s35">score</span>. You create a constant pointer by putting <span class="s35">const </span>right before the name of the pointer when you declare it.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like all constants, you must initialize a constant pointer when you first declare it. The following line is illegal and will produce a big, fat compile error.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* const pScore;    //illegal - - you must initialize a constant pointer</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">pScore </span>is a constant pointer, it can<span class="s12">’</span>t ever point to any other memory location. The following code is also quite illegal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pScore = &amp;anotherScore;    //illegal – pScore can’t point to a different object</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although you can<span class="s12">’</span>t change <span class="s35">pScore </span>itself, you can use <span class="s35">pScore </span>to change the value to which it points. The following line is completely legal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*pScore = 500;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark817">232 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark863">&zwnj;</a><a name="bookmark864">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Confused? Don<span class="s12">’</span>t be. It<span class="s12">’</span>s perfectly fine to use a constant pointer to change the value to which it points. Remember, the restriction on a constant pointer is that its value<span class="s12">—</span>the address that the pointer stores<span class="s12">—</span>can<span class="s12">’</span>t change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The way a constant pointer works should remind you of something<span class="s12">—</span>a reference. Like a reference, a constant pointer can refer only to the object it was initialized to refer to.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_284.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can use a constant pointer instead of a reference in your programs, you should stick with references when possible. References have a cleaner syntax than pointers and can make your code easier to read.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_285.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part298.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part300.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
