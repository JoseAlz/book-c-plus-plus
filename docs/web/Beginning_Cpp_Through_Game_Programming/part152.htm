<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part151.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part153.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Which is better, a <span class="s35">while </span>loop or a <span class="s35">for </span>loop?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Neither is inherently better than the other. Use the loop that best fits your needs.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When might it be better to use a <span class="s35">for </span>loop than a <span class="s35">while </span>loop?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: You can create a <span class="s35">while </span>loop to do the job of any <span class="s35">for </span>loop; however, there are some cases that cry out for a <span class="s35">for </span>loop. Those include counting and iterating through a sequence.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can I use <span class="s35">break </span>and <span class="s35">continue </span>statements with <span class="s35">for </span>loops?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Sure. And they behave just like they do in <span class="s35">while </span>loops: <span class="s35">break </span>ends the loop and <span class="s35">continue </span>jumps control back to the top of the loop.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q:  Why  do  programmers  tend  to  use  variable  names  such  as  <span class="s35">i</span>,  <span class="s35">j</span>,  and  <span class="s35">k  </span>as counters in <span class="s35">for  </span>loops?</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark421">112 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Believe it or not, programmers use <span class="s35">i</span>, <span class="s35">j</span>, and <span class="s35">k  </span>mainly out of tradition. The practice started in early versions of the FORTRAN language, in which integer variables had to start with certain letters, including <span class="s35">i</span>, <span class="s35">j</span>, and <span class="s35">k</span>.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: I don<span class="s12">’</span>t have to include a file to use <span class="s35">int </span>or <span class="s35">char </span>types, so why do I have to include the <span class="s35">string </span>file to use strings?</p><p style="padding-top: 5pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: <span class="s35">int </span>and <span class="s35">char </span>are built-in types. They<span class="s12">’</span>re always accessible in any C<span class="s14">þþ </span>program. The <span class="s35">string </span>type, on the other hand, is not a built-in type. It<span class="s12">’</span>s defined as part of the standard library in the file <span class="s35">string</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How did C-style strings get their name?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;text-align: justify;">A: In the C programming language, programmers represent strings with arrays of characters terminated by a null character. This practice carried over to C<span class="s14">þþ</span>. After the new <span class="s35">string </span>type was introduced in C<span class="s14">þþ</span>, programmers needed a way to differentiate between the two. Therefore, the old method was dubbed C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I use <span class="s35">string </span>objects instead of C-style strings?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: <span class="s35">string </span>objects have advantages over C-style strings. The most obvious is that they are dynamically sizeable. You don<span class="s12">’</span>t have to specify a length limit when you create one.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Should I ever use C-style strings?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: You should opt for <span class="s35">string </span>objects whenever possible. If you<span class="s12">’</span>re working on an existing project that uses C-style strings, then you might have to work with C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is operator overloading?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 107%;text-align: justify;">A: It<span class="s12">’</span>s a process that allows you to define the use of familiar operators in different contexts with different but predictable results. For example, the <span class="s35">+ </span>operator that is used to add numbers is overloaded by the <span class="s35">string </span>type to join strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can<span class="s12">’</span>t operator overloading be confusing?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: It<span class="s12">’</span>s true that by overloading an operator you give it another meaning. But the new meaning applies only in a specific new context. For example, it<span class="s12">’</span>s clear in</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark422">Discussion Questions 113</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">the expression <span class="s35">4+ 6 </span>that the <span class="s35">+ </span>operator adds numbers, while in the expression</p><p class="s35" style="padding-left: 41pt;text-indent: 14pt;line-height: 152%;text-align: left;">myString1 + myString2<span class="p">, the </span>+ <span class="p">operator joins strings. Q: Can I use the </span>+= <span class="p">operator to concatenate strings?</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A: Yes, the <span class="s35">+= </span>operator is overloaded so it works with strings.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: To get the number of characters in a <span class="s35">string </span>object, should I use the <span class="s35">length()</span></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">member function or the <span class="s35">size() </span>member function?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark353">A: Both </a><span class="s35">length() </span>and <span class="s35">size() </span>return the same value, so you can use either. Q: What<span class="s12">’</span>s a predicate function?<a name="bookmark423">&zwnj;</a></p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: A function that returns either <span class="s35">true </span>or <span class="s35">false</span>. The <span class="s35">string </span>object member function <span class="s35">empty() </span>is an example of a predicate function.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: What happens if I try to assign a value to an element beyond the bounds of an array?</p><p style="padding-top: 5pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: C<span class="s14">þþ </span>will allow you to make the assignment. However, the results are unpredictable and might cause your program to crash. That<span class="s12">’</span>s because you<span class="s12">’</span>re altering some unknown part of your computer<span class="s12">’</span>s memory.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I use multidimensional arrays?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: To make working with a group of elements more intuitive. For example, you could represent a chessboard with a one-dimensional array, as in <span class="s35">chessBoard[64]</span>, or you could represent it with a more intuitive, two- dimensional array, as in <span class="s35">chessBoard[8][8]</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part151.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part153.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
