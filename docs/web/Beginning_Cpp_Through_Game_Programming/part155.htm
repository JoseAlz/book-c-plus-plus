<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Standard Template Library: Hangman</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part154.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part156.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark6" class="s28" name="bookmark426">The Standard Template Library: Hangman</a><a name="bookmark472">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far you<span class="s12">’</span>ve seen how to work with sequences of values using arrays. But there are more sophisticated ways to work with collections of values. In fact, working with collections is so common that part of standard C++ is dedicated to doing just that. In this chapter, you<span class="s12">’</span>ll get an introduction to this important library. Specifically, you<span class="s12">’</span>ll learn to:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">vector </span>objects to work with sequences of values</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">vector </span>member functions to manipulate sequence elements</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use iterators to move through sequences</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use library algorithms to work with groups of elements</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Plan your programs with pseudocode</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 113%;text-align: left;"><span class="s23">Introducing the Standard Template Library </span>Good game programmers are lazy. It<span class="s12">’</span>s not that they don<span class="s12">’</span>t want to work; it<span class="s12">’</span>s just that they don<span class="s12">’</span>t want to redo work that<span class="s12">’</span>s already been done<span class="s12">—</span>especially if it has</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 14pt;text-align: left;">been done well. The STL (<span class="s11">Standard Template Library</span>) represents a powerful</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">collection of programming work that<span class="s12">’</span>s been done well. It provides a group of containers, algorithms, and iterators, among other things.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">So what<span class="s12">’</span>s a container and how can it help you write games? Well, containers let you store and access collections of values of the same type. Yes, arrays let you do</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 8pt;text-indent: 0pt;text-align: right;">115</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark427">116 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark473">&zwnj;</a><a name="bookmark474">&zwnj;</a><a name="bookmark475">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the same thing, but the STL containers offer more flexibility and power than a simple but trusty array. The STL defines a variety of container types; each works in a different way to meet different needs.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The algorithms defined in the STL work with its containers. The <span class="s11">algorithms </span>are common functions that game programmers find themselves repeatedly applying to groups of values. They include algorithms for sorting, searching, copying, merging, inserting, and removing container elements. The cool thing is that the same algorithm can work its magic on many different container types.</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s11">Iterators </span>are objects that identify elements in containers and can be manipulated to move among elements. They<span class="s12">’</span>re great for, well, iterating through containers. In addition, iterators are required by the STL algorithms.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All of this makes a lot more sense when you see an actual implementation of one of the container types, so that<span class="s12">’</span>s up next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part156.htm">Using Vectors</a><a class="toc1" href="part157.htm">Introducing the Hero’s Inventory 2.0 Program</a><a class="toc1" href="part158.htm">Preparing to Use Vectors</a><a class="toc1" href="part159.htm">Declaring a Vector</a><a class="toc1" href="part160.htm">Using the push_back() Member Function</a><a class="toc1" href="part161.htm">Using the size() Member Function</a><a class="toc1" href="part162.htm">Indexing Vectors</a><a class="toc1" href="part163.htm">Calling Member Functions of an Element</a><a class="toc1" href="part164.htm">Using the pop_back() Member Function</a><a class="toc1" href="part165.htm">Using the clear() Member Function</a><a class="toc1" href="part166.htm">Using the empty() Member Function</a><a class="toc0" href="part167.htm">Using Iterators</a><a class="toc1" href="part168.htm">Introducing the Hero’s Inventory 3.0 Program</a><a class="toc1" href="part169.htm">Declaring Iterators</a><a class="toc1" href="part170.htm">Looping through a Vector</a><a class="toc1" href="part171.htm">Changing the Value of a Vector Element</a><a class="toc1" href="part172.htm">Accessing Member Functions of a Vector Element</a><a class="toc1" href="part173.htm">Using the insert() Vector Member Function</a><a class="toc1" href="part174.htm">Using the erase() Vector Member Function</a><a class="toc0" href="part175.htm">Using Algorithms</a><a class="toc1" href="part176.htm">Introducing the High Scores Program</a><a class="toc1" href="part177.htm">Preparing to Use Algorithms</a><a class="toc1" href="part178.htm">Using the find() Algorithm</a><a class="toc1" href="part179.htm">Using the random_shuffle() Algorithm</a><a class="toc1" href="part180.htm">Using the sort() Algorithm</a><a class="toc0" href="part181.htm">Understanding Vector Performance</a><a class="toc1" href="part182.htm">Examining Vector Growth</a><a class="toc1" href="part183.htm">Examining Element Insertion and Deletion</a><a class="toc0" href="part184.htm">Examining Other STL Containers</a><a class="toc0" href="part185.htm">Planning Your Programs</a><a class="toc1" href="part186.htm">Using Pseudocode</a><a class="toc1" href="part187.htm">Using Stepwise Refinement</a><a class="toc0" href="part188.htm">Introducing Hangman</a><a class="toc1" href="part189.htm">Planning the Game</a><a class="toc1" href="part190.htm">Setting Up the Program</a><a class="toc1" href="part191.htm">Initializing Variables and Constants</a><a class="toc1" href="part192.htm">Entering the Main Loop</a><a class="toc1" href="part193.htm">Getting the Player’s Guess</a><a class="toc1" href="part194.htm">Ending the Game</a><a class="toc0" href="part195.htm">Summary</a><a class="toc0" href="part196.htm">Questions and Answers</a><a class="toc0" href="part197.htm">Discussion Questions</a><a class="toc0" href="part198.htm">Exercises</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part154.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part156.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
