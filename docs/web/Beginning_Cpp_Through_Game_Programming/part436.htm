<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>D</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part435.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part437.htm">Next &gt;</a></p><p class="s34" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">D</p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part309.htm#bookmark880" class="s69">dangling pointers, </a><a href="part319.htm#bookmark901" class="s69">241, </a>250<a href="part320.htm#bookmark902" class="s79">–</a>251,</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="part382.htm#bookmark1096" class="s69">301, 325</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part121.htm#bookmark367" class="s69">data members, </a><a href="part149.htm#bookmark416" class="s69">87, 110</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part327.htm#bookmark948" class="s75">accessing, </a>259<a href="part329.htm#bookmark952" class="s85">–</a><a href="part329.htm#bookmark952" class="s75">260</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part358.htm#bookmark1044" class="s75">container, </a>291<a href="part359.htm#bookmark1046" class="s85">–</a><a href="part359.htm#bookmark1046" class="s75">292</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">declaring, 258</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part368.htm#bookmark1066" class="s75">heap and, </a>303<a href="part374.htm#bookmark1080" class="s85">–</a><a href="part374.htm#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="part372.htm#bookmark1074" class="s75">declaring and deﬁning copy constructors, </a>309<a href="part373.htm#bookmark1078" class="s85">–</a><a href="part373.htm#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s75">declaring and deﬁning destructors, </a>308<a href="part372.htm#bookmark1074" class="s85">–</a><a href="part372.htm#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="part370.htm#bookmark1069" class="s75" name="bookmark1257">declaring data members that point to values on heap, </a>307<a href="part371.htm#bookmark1071" class="s85">–</a><a href="part371.htm#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="part368.htm#bookmark1066" class="s75">Heap Data Member program, </a>303<a href="part370.htm#bookmark1069" class="s85">–</a><a href="part370.htm#bookmark1069" class="s75">307</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="part373.htm#bookmark1078" class="s75">overloading assignment operator, </a>313<a href="part374.htm#bookmark1080" class="s85">–</a><a href="part374.htm#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part357.htm#bookmark1042" class="s75">object, </a>290<a href="part358.htm#bookmark1044" class="s85">–</a><a href="part358.htm#bookmark1044" class="s75">291</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck <a href="part413.htm#bookmark1196" class="s69">class, BlackJack, </a><a href="part413.htm#bookmark1198" class="s69">357, </a><span class="s68">360,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">370<a href="part420.htm#bookmark1215" class="s79">–</a><a href="part420.htm#bookmark1215" class="s69">373</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck m_Deck <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 41pt;text-indent: 11pt;text-align: left;">Game <a href="part413.htm#bookmark1198" class="s69">class, </a><span class="s68">360 declaring</span></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part332.htm#bookmark956" class="s75">constructors, </a>262<a href="part333.htm#bookmark958" class="s85">–</a><a href="part333.htm#bookmark958" class="s75">263</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part372.htm#bookmark1074" class="s75">copy constructors, </a>309<a href="part373.htm#bookmark1078" class="s85">–</a><a href="part373.htm#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">data members, </a><a href="part370.htm#bookmark1069" class="s75">258, </a>307<a href="part371.htm#bookmark1071" class="s85">–</a><a href="part371.htm#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s75">destructors, </a>308<a href="part372.htm#bookmark1074" class="s85">–</a><a href="part372.htm#bookmark1074" class="s75">309</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part201.htm#bookmark609" class="s75">functions, </a><a href="part241.htm#bookmark680" class="s75">153, 183</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part168.htm#bookmark495" class="s75">iterators, </a>125<a href="part169.htm#bookmark497" class="s85">–</a><a href="part169.htm#bookmark497" class="s75">126</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">member functions, 258</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part141.htm#bookmark403" class="s75">multidimensional arrays, 105</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part291.htm#bookmark846" class="s75">pointers, </a>226<a href="part292.htm#bookmark849" class="s85">–</a><a href="part319.htm#bookmark899" class="s75">227, 249</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part249.htm#bookmark737" class="s75">references, 189</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part341.htm#bookmark975" class="s75">static data members, </a><a href="part343.htm#bookmark978" class="s75">272 static member functions, </a><a href="part40.htm#bookmark127" class="s75">273 variables, </a>19<a href="part41.htm#bookmark131" class="s85">–</a><a href="part214.htm#bookmark634" class="s75">20, 165</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part157.htm#bookmark479" class="s75">vectors, </a>119<a href="part159.htm#bookmark482" class="s85">–</a><a href="part159.htm#bookmark482" class="s75">120</a></p><p class="s68" style="padding-left: 56pt;text-indent: 0pt;text-align: center;"><a href="part373.htm#bookmark1076" class="s69">deep copy, </a><a href="part383.htm#bookmark1099" class="s69">310, </a><a href="part223.htm#bookmark650" class="s69">326 default arguments,  </a>171<a href="part227.htm#bookmark656" class="s79">–</a><a href="part243.htm#bookmark682" class="s69">174, 184</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="part225.htm#bookmark653" class="s75">assigning to parameters, </a>173<a href="part227.htm#bookmark656" class="s85">–</a><a href="part227.htm#bookmark656" class="s75">174</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="part223.htm#bookmark650" class="s75">Give Me a Number program, </a>171<a href="part225.htm#bookmark651" class="s85">–</a><a href="part225.htm#bookmark651" class="s75">172</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part227.htm#bookmark656" class="s75">overriding, 174</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="part225.htm#bookmark653" class="s75">specifying, 173</a></p><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="part373.htm#bookmark1078" class="s69">default assignment operator, </a><a href="part383.htm#bookmark1099" class="s69">313, 326</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part332.htm#bookmark956" class="s69">default constructor, </a>262<a href="part333.htm#bookmark958" class="s79">–</a><a href="part352.htm#bookmark1002" class="s69">263, 284</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part372.htm#bookmark1074" class="s69">default copy constructor, </a><a href="part383.htm#bookmark1099" class="s69">309, 326</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s69">default destructor, 308</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">default <a href="part112.htm#bookmark310" class="s69">keyword, 77</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">default <a href="part79.htm#bookmark253" class="s69">statement, 51</a></p><p class="s68" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">deﬁning</p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part337.htm#bookmark965" class="s75">accessor member functions, </a>267<a href="part338.htm#bookmark967" class="s85">–</a><a href="part338.htm#bookmark967" class="s75">268</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part338.htm#bookmark967" class="s75">constant member functions, </a>268<a href="part339.htm#bookmark969" class="s85">–</a><a href="part339.htm#bookmark969" class="s75">269</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part332.htm#bookmark956" class="s75">constructors, </a>262<a href="part333.htm#bookmark958" class="s85">–</a><a href="part333.htm#bookmark958" class="s75">263</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part372.htm#bookmark1074" class="s75">copy constructors, </a>309<a href="part373.htm#bookmark1078" class="s85">–</a><a href="part373.htm#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s75">destructors, </a>308<a href="part372.htm#bookmark1074" class="s85">–</a><a href="part372.htm#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part56.htm#bookmark156" class="s75">enumerations, </a>31<a href="part58.htm#bookmark158" class="s85">–</a><a href="part58.htm#bookmark158" class="s75">32</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part202.htm#bookmark611" class="s75">functions, 154</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark945" class="s75">member functions, </a>258<a href="part327.htm#bookmark949" class="s85">–</a><a href="part351.htm#bookmark998" class="s75">259, </a><a href="part45.htm#bookmark138" class="s75">282 new names for types, 23</a></p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="part322.htm#bookmark938" class="s75">new types, </a>255<a href="part329.htm#bookmark952" class="s85">–</a>260 accessing data members,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">259<a href="part329.htm#bookmark952" class="s85">–</a><a href="part329.htm#bookmark952" class="s75">260</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="part329.htm#bookmark952" class="s75">calling member functions, 260</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">declaring data members, </a>258 declaring member</p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">functions, 258</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="part326.htm#bookmark944" class="s75">deﬁning member functions, </a>258<a href="part327.htm#bookmark948" class="s85">–</a><a href="part327.htm#bookmark948" class="s75">259</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="part327.htm#bookmark948" class="s75">instatiating objects, </a>259 Simple Critter program,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">256<a href="part325.htm#bookmark942" class="s85">–</a><a href="part325.htm#bookmark942" class="s75">257</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part343.htm#bookmark978" class="s75">static member functions, </a>273 variables inside <span class="s73">switch</span></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="part215.htm#bookmark636" class="s75">statements, 166</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part406.htm#bookmark1184" class="s75">virtual destructors, </a>351<a href="part407.htm#bookmark1186" class="s85">–</a><a href="part407.htm#bookmark1186" class="s75">352</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><span class="s72">delete </span><a href="part366.htm#bookmark1061" class="s69">operator, </a>300<a href="part367.htm#bookmark1063" class="s79">–</a><a href="part382.htm#bookmark1096" class="s69">301, </a>325 <span class="s72">deque </span><a href="part184.htm#bookmark526" class="s69">STL container, </a><a href="part170.htm#bookmark500" class="s69">139 dereference operator (*), </a><a href="part195.htm#bookmark547" class="s69">128, </a>146,</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark859" class="s69">230</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">dereferencing</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part170.htm#bookmark500" class="s75">iterators, 128</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part294.htm#bookmark852" class="s75">pointers, </a>228<a href="part295.htm#bookmark855" class="s85">–</a><a href="part319.htm#bookmark899" class="s75">229, 249</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="part423.htm#bookmark1222" class="s69">derived classes, 379</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part389.htm#bookmark1150" class="s75">from base classes, </a>335<a href="part390.htm#bookmark1152" class="s85">–</a>336 deriving from abstract classes,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">355<a href="part411.htm#bookmark1194" class="s85">–</a><a href="part411.htm#bookmark1194" class="s75">356</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part390.htm#bookmark1152" class="s75">instantiating objects from, </a>336<a href="part391.htm#bookmark1155" class="s85">–</a><a href="part391.htm#bookmark1155" class="s75">337</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part395.htm#bookmark1163" class="s75">using access modiﬁers when deriving, 340</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part405.htm#bookmark1183" class="s75">using base class pointers to objects, </a>350<a href="part406.htm#bookmark1184" class="s85">–</a><a href="part406.htm#bookmark1184" class="s75">351</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="part402.htm#bookmark1177" class="s75">using overloaded assignment operators and copy constructors in, </a>346<a href="part403.htm#bookmark1180" class="s85">–</a><a href="part403.htm#bookmark1180" class="s75">347</a></p><p class="s68" style="padding-left: 21pt;text-indent: -12pt;text-align: left;"><a href="part96.htm#bookmark281" class="s69">Designers Network Program, </a>62<a href="part96.htm#bookmark283" class="s79">–</a><a href="part96.htm#bookmark283" class="s69">65</a></p><p style="text-indent: 0pt;text-align: right;"><a href="part383.htm#bookmark1099" class="s69">destructors, 326</a></p><p style="text-indent: 0pt;text-align: right;"><a href="part423.htm#bookmark1222" class="s75">base class, 379</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s75">declaring, </a>308<a href="part372.htm#bookmark1074" class="s85">–</a><a href="part372.htm#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1072" class="s75">deﬁning, </a>308<a href="part372.htm#bookmark1075" class="s85">–</a><a href="part372.htm#bookmark1075" class="s75">309</a></p><p style="padding-top: 7pt;padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="part390.htm#bookmark1152" class="s75">instantiating objects from derived class, 336</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part403.htm#bookmark1180" class="s75">virtual, 347</a></p><p class="s68" style="padding-left: 9pt;text-indent: 11pt;text-align: left;"><a href="part425.htm#bookmark1226" class="s75">when to make virtual, </a><span class="s74">381 </span><a href="part100.htm#bookmark290" class="s69">Die Roller program, </a>68<a href="part102.htm#bookmark292" class="s79">–</a>69 <span class="s72">display() </span>function</p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part259.htm#bookmark755" class="s75">constant referencees and, </a>197 passing and returning arrays,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">247<a href="part317.htm#bookmark895" class="s85">–</a><a href="part317.htm#bookmark895" class="s75">248</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">displayBoard()<span class="s68">function,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part277.htm#bookmark786" class="s69">Tic-Tac-Toe game, </a>210<a href="part279.htm#bookmark789" class="s79">–</a><a href="part279.htm#bookmark789" class="s69">211</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">do <a href="part85.htm#bookmark264" class="s69">loops, </a><span class="s68">56</span><a href="part88.htm#bookmark268" class="s79">–</a><a href="part112.htm#bookmark310" class="s69">58, 77</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="part98.htm#bookmark285" class="s75">logical NOT operator, </a><a href="part87.htm#bookmark266" class="s75">66 overview, </a>57<a href="part88.htm#bookmark268" class="s85">–</a><a href="part88.htm#bookmark268" class="s75">58</a></p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="part85.htm#bookmark264" class="s75">Play Again 2.0 program, </a>56<a href="part87.htm#bookmark266" class="s85">–</a><a href="part87.htm#bookmark266" class="s75">57</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="part296.htm#bookmark859" class="s69">dot operator, </a>230 <span class="s72">double </span><a href="part38.htm#bookmark124" class="s69">type, </a><a href="part40.htm#bookmark127" class="s69">18, 19</a><i>tbl </i><a href="part196.htm#bookmark551" class="s69">double-ended queue, 148</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="part155.htm#bookmark475" class="s69">dynamic array, </a>116 dynamic memory</p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part363.htm#bookmark1054" class="s75">allocating, </a>296<a href="part368.htm#bookmark1066" class="s85">–</a><a href="part368.htm#bookmark1066" class="s75">303</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="part367.htm#bookmark1063" class="s75">avoiding memory leaks, 301</a><a href="part368.htm#bookmark1066" class="s85">– </a><a href="part368.htm#bookmark1066" class="s75">303</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">delete <a href="part366.htm#bookmark1061" class="s75">operator, </a><span class="s74">300</span><a href="part367.htm#bookmark1063" class="s85">–</a><a href="part367.htm#bookmark1063" class="s75">301</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="part364.htm#bookmark1058" class="s75">Heap program, </a>297<a href="part365.htm#bookmark1060" class="s85">–</a><a href="part365.htm#bookmark1060" class="s75">299</a></p><p class="s74" style="padding-left: 21pt;text-indent: 11pt;text-align: left;"><span class="s73">new </span><a href="part365.htm#bookmark1060" class="s75">operator, </a>299<a href="part366.htm#bookmark1061" class="s85">–</a>300 data members and heap,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">303<a href="part374.htm#bookmark1080" class="s85">–</a><a href="part374.htm#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="part372.htm#bookmark1074" class="s75">copy constructors, </a>309<a href="part373.htm#bookmark1078" class="s85">–</a><a href="part373.htm#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part370.htm#bookmark1069" class="s75">declaring, </a>307<a href="part371.htm#bookmark1071" class="s85">–</a><a href="part371.htm#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="part371.htm#bookmark1071" class="s75">destructors, </a>308<a href="part372.htm#bookmark1074" class="s85">–</a>309 Heap Data Member</p><p class="s74" style="padding-left: 33pt;text-indent: 11pt;text-align: left;"><a href="part368.htm#bookmark1066" class="s75">program, </a>303<a href="part370.htm#bookmark1069" class="s85">–</a>307 overloading assignment op-</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part373.htm#bookmark1078" class="s75">erator, </a>313<a href="part374.htm#bookmark1080" class="s85">–</a><a href="part374.htm#bookmark1080" class="s75">315</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part435.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part437.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
