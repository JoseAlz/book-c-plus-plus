<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Examining Vector Growth</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part181.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part183.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark7">Examining Vector Growth</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Although vectors grow dynamically as needed, every vector has a specific size. When a new element added to a vector pushes the vector beyond its current size, the computer reallocates memory and might even copy all of the vector elements to this newly seized chunk of memory real estate. This can cause a performance hit.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The most important thing to keep in mind about program performance is whether or not you need to care. For example, vector memory reallocation might not occur at a performance-critical part of your program. In that case, you can safely ignore the cost of reallocation. Also, with small vectors, the reallocation cost might be insignificant so, again, you can safely ignore it. However, if you need greater control over when these memory reallocations occur, you have it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Using the capacity() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">capacity() vector </span>member function returns the capacity of a vector<span class="s12">—</span>in other words, the number of elements that a vector can hold before a program must reallocate more memory for it. A vector<span class="s12">’</span>s capacity is not the same thing as its size (the number of elements a vector currently holds). Here<span class="s12">’</span>s a code snippet to help drive this point home:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Creating a 10 element vector to hold scores.\n&quot;; vector&lt;int&gt; scores(10, 0);    //initialize all 10 elements to 0 cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p class="s19" style="padding-top: 2pt;padding-left: 265pt;text-indent: 0pt;text-align: left;"><a name="bookmark521">Understanding Vector Performance 137</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Adding a score.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">scores.push_back(0);    //memory is reallocated to accommodate growth cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Right after I declare and initialize the vector, this code reports that its size and capacity are both 10. However, after an element is added, the code reports that the vector<span class="s12">’</span>s size is 11 while its capacity is 20. That<span class="s12">’</span>s because the capacity of a vector doubles every time a program reallocates additional memory for it. In this case, when a new score was added, memory was reallocated, and the capacity of the vector doubled from 10 to 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Using the reserve() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">reserve() </span>member function increases the capacity of a vector to the number supplied as an argument. Using <span class="s35">reserve() </span>gives you control over when a reallocation of additional memory occurs. Here<span class="s12">’</span>s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Creating a list of scores.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">vector&lt;int&gt; scores(10, 0);    //initialize all 10 elements to 0 cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Reserving more memory.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">scores.reserve(20);    //reserve memory for 10 additional elements cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Right after I declare and initialize the vector, this code reports that its size and capacity are both 10. However, after I reserve memory for 10 additional elements, the code reports that the vector<span class="s12">’</span>s size is still 10 while its capacity is 20.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By using <span class="s35">reserve() </span>to keep a vector<span class="s12">’</span>s capacity large enough for your purposes, you can delay memory reallocation to a time of your choosing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_180.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">As a beginning game programmer, it’s good to be aware of how vector memory allocation works; however, don’t obsess over it. The first game programs you’ll write probably won’t benefit from a more manual process of vector memory allocation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_181.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark454">138 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark522">&zwnj;</a><a name="bookmark523">&zwnj;</a><a name="bookmark524">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part181.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part183.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
