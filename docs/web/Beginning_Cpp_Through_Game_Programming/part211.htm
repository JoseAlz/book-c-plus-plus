<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding Software Reuse</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part210.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part212.htm">Next &gt;</a></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30">Understanding Software Reuse</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can reuse functions in other programs. For example, since asking the user a yes or no question is such a common thing to do in a game, you could create an <span class="s35">askYesNo() </span>function and use it in all of your future game programs. So writing good functions not only saves you time and energy in your current game project, but it can save you effort in future ones, too.</p><p class="s24" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark568">Rea l Worl d</a><a name="bookmark627">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_201.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark569">It’s always a waste of time to reinvent the wheel, so </a><i>software reuse</i>—employing existing software and other elements in new projects—is a technique that game companies take to heart. The benefits of software reuse include:<a name="bookmark628">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Increased company productivity. </span><span class="s19">By reusing code and other elements that already exist, such as a graphics engine, game companies can get their projects done with less effort.</span></p><p class="s29" style="padding-top: 8pt;padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Improved software quality. </span><span class="s19">If a game company already has a tested piece of code, such as a networking module, then the company can reuse the code with the knowledge that it’s bug-free.</span></p><p class="s29" style="padding-top: 8pt;padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Improved software performance. </span><span class="s19">Once a game company has a high-performance piece of code, using it again not only saves the company the trouble of reinventing the wheel, it saves them from reinventing a less efficient one.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_202.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can reuse code you<span class="s12">’</span>ve written by copying from one program and pasting it into another, but there is a better way. You can divide up a big game project into multiple files. You<span class="s12">’</span>ll learn about this technique in Chapter 10, <span class="s12">“</span>Inheritance and Polymorphism: Blackjack.<span class="s12">”</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part210.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part212.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
