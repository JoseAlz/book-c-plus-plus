<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Increment and Decrement Operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part52.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part54.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="part3.htm#bookmark3" class="h1">Using Increment and Decrement </a><h1 href="#bookmark3">Operators</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I use the <span class="s11">increment operator </span>(<span class="s40">þþ</span>) which increases the value of a variable by one. I use the operator to increase the value of <span class="s35">lives </span>twice. First I use it in the following line:</p><p class="s40" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">þþ<span class="s35">lives;</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I use it again in the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">lives<span class="s40">þþ</span>;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Each line has the same net effect; it increments <span class="s35">lives </span>from <span class="s35">3 </span>to <span class="s35">4</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As you can see, you can place the operator before or after the variable you<span class="s12">’</span>re incrementing. When you place the operator before the variable, the operator is called the <span class="s11">prefix increment operator</span>; when you place it after the variable, it<span class="s12">’</span>s called the <span class="s11">postfix increment operator</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point, you might be thinking that there<span class="s12">’</span>s no difference between the postfix and prefix versions, but you<span class="s12">’</span>d be wrong. In a situation where you only increment a single variable (as you just saw), both operators produce the same final result. But in a more complex expression, the results can be different.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To demonstrate this important difference, I perform a calculation that would be appropriate for the end of a game level. I calculate a bonus based on the number</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark149">28 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">of lives a player has, and I also increment the number of lives. However, I perform this calculation in two different ways. The first time, I use the prefix increment operator.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">int bonus = <span class="s40">þþ</span>lives * 10;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark61">The prefix increment operator increments a variable </a><span class="s11">before </span>the evaluation of a larger  expression involving the variable. <span class="s40">þþ</span><span class="s35">lives * 10 </span>is evaluated  by first incrementing <span class="s35">lives</span>, and then multiplying that result by <span class="s35">10</span>. Therefore, the code is equivalent to <span class="s35">4* 10</span>, which is <span class="s35">40</span>, of course. This means that now <span class="s35">lives </span>is <span class="s35">4 </span>and <span class="s35">bonus </span>is <span class="s35">40</span>.<a name="bookmark150">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After setting <span class="s35">lives </span>back to <span class="s35">3</span>, I calculate <span class="s35">bonus </span>again, this time using the postfix increment operator.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">bonus = lives<span class="s40">þþ </span>* 10;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The postfix increment operator increments a variable <span class="s11">after </span>the evaluation of a larger expression involving the variable. <span class="s35">lives</span><span class="s40">þþ </span><span class="s35">* 10 </span>is evaluated by multi- plying the current value of <span class="s35">lives </span>by <span class="s35">10</span>. Therefore, the code is equivalent to <span class="s35">3 * 10</span>, which is <span class="s35">30</span>, of course. Then, after this calculation, <span class="s35">lives </span>is incremented. After the line is executed, <span class="s35">lives </span>is <span class="s35">4 </span>and <span class="s35">bonus </span>is <span class="s35">30</span>.</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C<span class="s14">þþ </span>also defines the <span class="s11">decrement operator</span>, <span class="s12">–</span>. It works just like the increment operator, except it decrements a variable. It comes in the two flavors (prefix and postfix) as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part52.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part54.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
