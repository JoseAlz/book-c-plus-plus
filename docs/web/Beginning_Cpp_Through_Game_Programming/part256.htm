<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Passing by Reference</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part255.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part257.htm">Next &gt;</a></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark8">Passing by Reference</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">It<span class="s12">’</span>s possible to give a function access to an argument variable by passing a parameter a reference to the argument variable. As a result, anything done to the parameter will be done to the argument variable. To <span class="s11">pass by reference</span>, you must first declare the parameter as a reference.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can tell that a call to <span class="s35">goodSwap() </span>passes both arguments by reference by looking at the function header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void goodSwap(int&amp; x, int&amp; y)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This means that when I call <span class="s35">goodSwap() </span>with the following line, the parameter <span class="s35">x</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">will refer to <span class="s35">myScore </span>and the parameter <span class="s35">y </span>will refer to <span class="s35">yourScore</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">goodSwap(myScore, yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This means that <span class="s35">x </span>is just another name for <span class="s35">myScore </span>and <span class="s35">y </span>is just another name for <span class="s35">yourScore</span>. When <span class="s35">goodSwap() </span>executes and <span class="s35">x </span>and <span class="s35">y </span>exchange values, what really happens is that <span class="s35">myScore </span>and <span class="s35">yourScore </span>exchange values.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After the function ends, control returns to <span class="s35">main()</span>, where I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>. This time <span class="s35">1000 </span>and <span class="s35">150 </span>are displayed. The variables have exchanged values. I<span class="s12">’</span>ve taken the large score and left you with the small one. Success at last!</p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark700">Passing References for Efficiency 195</a><a name="bookmark701">&zwnj;</a><a name="bookmark749">&zwnj;</a><a name="bookmark750">&zwnj;</a><a name="bookmark751">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part255.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part257.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
