<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Overloading the operator&lt;&lt;() Function</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part422.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part424.htm">Next &gt;</a></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">Overloading the operator&lt;&lt;() Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The following function definition overloads the <span class="s35">&lt;&lt; </span>operator so I can send a <span class="s35">Card</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to the standard output.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">378 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//overloads &lt;&lt; operator so Card object can be sent to cout ostream&amp; operator&lt;&lt;(ostream&amp; os, const Card&amp; aCard)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 187pt;text-indent: -125pt;line-height: 118%;text-align: left;">const string RANKS[] = {&quot;0&quot;, &quot;A&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;};</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const string SUITS[] = {&quot;c&quot;, &quot;d&quot;, &quot;h&quot;, &quot;s&quot;};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (aCard.m_IsFaceUp)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; RANKS[aCard.m_Rank] &lt;&lt; SUITS[aCard.m_Suit];</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;XX&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return os;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function uses the rank and suit values of the object as array indices. I begin the array <span class="s35">RANKS </span>with <span class="s35">&quot;0&quot; </span>to compensate for the fact that the value for the <span class="s35">rank </span>enumeration defined in <span class="s35">Card </span>begins at <span class="s35">1</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The last function definition overloads the <span class="s35">&lt;&lt; </span>operator so I can send a <span class="s35">GenericPlayer</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to the standard output.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//overloads &lt;&lt; operator so a GenericPlayer object can be sent to cout ostream&amp; operator&lt;&lt;(ostream&amp; os, const GenericPlayer&amp; aGenericPlayer)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">os &lt;&lt; aGenericPlayer.m_Name &lt;&lt; &quot;:\t&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">vector&lt;Card*&gt;::const_iterator pCard; if (!aGenericPlayer.m_Cards.empty())</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 108pt;text-indent: -26pt;line-height: 118%;text-align: left;">for (pCard = aGenericPlayer.m_Cards.begin(); pCard != aGenericPlayer.m_Cards.end();</p><p class="s35" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">++pCard)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">os &lt;&lt; *(*pCard) &lt;&lt; &quot;\t&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (aGenericPlayer.GetTotal() != 0)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1140">Summary 379</a><a name="bookmark1221">&zwnj;</a><a name="bookmark1222">&zwnj;</a><a name="bookmark1223">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;(&quot; &lt;&lt; aGenericPlayer.GetTotal() &lt;&lt; &quot;)&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;&lt;empty&gt;&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return os;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The function displays the generic player<span class="s12">â€™</span>s name and cards, along with the total value of the cards.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part422.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part424.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
