<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Overloading Operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part362.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part364.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">Overloading Operators</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Overloading operators might sound like something you want to avoid at all costs<span class="s12">—</span>as in, <span class="s12">“</span>Look out, that operator is overloaded and she<span class="s12">’</span>s about to blow!<span class="s12">”— </span>but it<span class="s12">’</span>s not. Operator overloading lets you give meaning to built-in operators used with new types that you define. For example, you could overload the <span class="s35">* </span>operator so that when it is used with two 3D matrices (objects instantiated from some class that you<span class="s12">’</span>ve defined), the result is the multiplication of the matrices.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To overload an operator, define a function called <span class="s35">operatorX</span>, where <span class="s35">X </span>is the operator you want to overload. That<span class="s12">’</span>s what I do when I overload the <span class="s35">&lt;&lt; </span>operator; I define a function named <span class="s35">operator&lt;&lt;</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;Critter Object - &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">os &lt;&lt; &quot;m_Name: &quot; &lt;&lt; aCritter.m_Name; return os;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1054">296 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1055">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function overloads the <span class="s35">&lt;&lt; </span>operator so that when I send a <span class="s35">Critter </span>object with the <span class="s35">&lt;&lt; </span>to <span class="s35">cout</span>, the data member <span class="s35">m_Name </span>is displayed. Essentially, the function allows me to easily display <span class="s35">Critter </span>objects. The function can directly access the private data member <span class="s35">m_Name </span>of a <span class="s35">Critter </span>object because I made the function a friend of the <span class="s35">Critter </span>class with the following line in <span class="s35">Critter</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This means I can simply display a <span class="s35">Critter </span>object by sending it to <span class="s35">cout </span>with the</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1014">&lt;&lt; </a><span class="p">operator, which is what I do in </span>main() <span class="p">with the following line, which displays the text </span>Critter Object – m_Name: Poochie<span class="p">.</span><a name="bookmark1056">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; crit;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_336.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">With all the tools and debugging options available to game programmers, sometimes simply displaying the values of variables is the best way to understand what’s happening in your programs. Overloading the <span class="s35">&lt;&lt; </span>operator can help you do that.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_337.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This function works because <span class="s35">cout </span>is of the type <span class="s35">ostream</span>, which already overloads the <span class="s35">&lt;&lt; </span>operator so that you can send built-in types to <span class="s35">cout</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part362.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part364.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
