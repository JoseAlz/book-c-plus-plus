<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Defining Accessor Member Functions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part337.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part339.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">Defining Accessor Member Functions</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">An <span class="s11">accessor member function </span>allows indirect access to a data member. Because <span class="s35">m_Hunger </span>is private, I wrote an accessor member function, <span class="s35">GetHunger()</span>, to return the value of the data member. (For now, you can ignore the keyword <span class="s35">const</span>.)</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::GetHunger() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I put the member function to work in <span class="s35">main() </span>with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Calling GetHunger(): &quot; &lt;&lt; crit.GetHunger() &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the preceding code, <span class="s35">crit.GetHunger() </span>simply returns the value of <span class="s35">crit</span><span class="s12">’</span>s <span class="s35">m_Hunger </span>data member, which is <span class="s35">5</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark967">268 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_318.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Just as you can with regular functions, you can inline member functions. One way to inline a member function is to define it right inside of the class definition, where you’d normally only declare the member function. If you include a member function definition in a class, then of course you don’t need to define it outside of the class.</p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">An exception to this rule is that when you define a member function in a class definition using the keyword <span class="s35">virtual</span>, the member function is not automatically inlined. You’ll learn about virtual functions in Chapter 10, “Inheritance and Polymorphism: Blackjack.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_319.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark921">At this point, you might be wondering why you</a><span class="s12">’</span>d go to the trouble of making a data member private only to grant full access to it through accessor functions. The answer is that you don<span class="s12">’</span>t generally grant full access. For example, take a look at the accessor member function I defined for setting an object<span class="s12">’</span>s <span class="s35">m_Hunger </span>data member, <span class="s35">SetHunger()</span>:<a name="bookmark968">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::SetHunger(int hunger)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (hunger &lt; 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You can’t set a critter’s hunger to a negative number.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Hunger = hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  this  accessor  member  function,  I  first  check  to  make  sure  that  the  value passed to the member function is greater than zero. If it<span class="s12">’</span>s not, it<span class="s12">’</span>s an illegal value and  I  display  a  message,  leaving  the  data  member  unchanged.  If  the  value  is greater than zero, then I make the change. This way, <span class="s35">SetHunger()  </span>protects the integrity of <span class="s35">m_Hunger</span>, ensuring that it can<span class="s12">’</span>t be set to a negative number. Just as I<span class="s12">’</span>ve done here, most game programmers begin their accessor member function names with <span class="s35">Get  </span>or <span class="s35">Set</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part337.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part339.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
