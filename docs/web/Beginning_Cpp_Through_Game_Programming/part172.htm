<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Accessing Member Functions of a Vector Element</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part171.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part173.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark6">Accessing Member Functions of a Vector Element</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I display the number of characters in the name of the first item in the hero<span class="s12">’</span>s inventory.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; (*myIterator).size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*myIterator).size() </span>says, <span class="s12">“</span>Take the result of dereferencing <span class="s35">myIterator </span>and call that object<span class="s12">’</span>s <span class="s35">size() </span>member function.<span class="s12">” </span>Because <span class="s35">myIterator </span>refers to the <span class="s35">string </span>object equal to <span class="s35">&quot;battle axe&quot;</span>, the code returns 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_167.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Whenever you dereference an iterator to access a data member or member function, surround the dereferenced iterator by a pair of parentheses. This ensures that the dot operator will be applied to the object the iterator references.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_168.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*myIterator).size() </span>is not the prettiest, so C++ offers an alternative, more intuitive way to express the same thing, which I demonstrate in the next two lines of the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; myIterator-&gt;size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The preceding code does exactly the same thing the first pair of lines I presented in this section do; it displays the number of characters in <span class="s35">&quot;battle axe&quot;</span>. However, notice that I substitute <span class="s35">myIterator-&gt;size() </span>for <span class="s35">(*myIterator).size()</span>. You can see that this version (with the <span class="s35">-&gt; </span>symbol) is more readable. The two pieces of code mean exactly the same thing to the computer, but this new version is easier for humans to use. In general, you can use the <span class="s35">-&gt; </span>operator to access the member functions or data members of an object that an iterator references.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark444">130 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark504">&zwnj;</a><a name="bookmark505">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_169.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><i>Syntactic sugar </i>is a nicer, alternative syntax. It replaces harsh syntax with something that’s a bit easier to swallow. As an example, instead of writing the code <span class="s35">(*myIterator).size()</span>, I can use the syntactic sugar provided by the <span class="s35">-&gt; </span>operator and write <span class="s35">myIterator-&gt;size()</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_170.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part171.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part173.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
