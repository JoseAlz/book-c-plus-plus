<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Object Data Members</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part357.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part359.htm">Next &gt;</a></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark11">Using Object Data Members</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One way to use aggregation when you<span class="s12">’</span>re defining a class is to declare a data member that can hold another object. That<span class="s12">’</span>s what I did in <span class="s35">Critter </span>with the following line, which declares the data member <span class="s35">m_Name </span>to hold a <span class="s35">string </span>object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Generally, you use aggregation when an object has another object. In this case, a critter has a name. These kinds of relationships are called <span class="s11">has-a </span>relationships.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1044">Using Aggregation 291</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">I put the declaration for the critter<span class="s12">’</span>s name to use when I instantiate a new object with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(&quot;Poochie&quot;);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">which calls the <span class="s35">Critter </span>constructor:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Critter::Critter(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1009">By passing the string literal </a><span class="s35">&quot;Poochie&quot;</span>, the constructor is called and a <span class="s35">string </span>object for the name is instantiated, which the constructor assigns to <span class="s35">m_Name</span>. A new critter named Poochie is born.<a name="bookmark1045">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I display the critter<span class="s12">’</span>s name with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;My critter’s name is &quot; &lt;&lt; crit.GetName() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The code <span class="s35">crit.GetName() </span>returns a copy of the <span class="s35">string </span>object for the name of the critter, which is then sent to <span class="s35">cout </span>and displayed on the screen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part357.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part359.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
