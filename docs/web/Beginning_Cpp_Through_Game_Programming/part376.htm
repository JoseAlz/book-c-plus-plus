<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Player Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part375.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part377.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark12">The Player Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first thing I do is create a <span class="s35">Player </span>class to represent the players who are waiting in the game lobby. Because I don<span class="s12">’</span>t know how many players I<span class="s12">’</span>ll have in my lobby at one time, it makes sense to use a dynamic data structure. Normally, I<span class="s12">’</span>d go to my toolbox of containers from the STL. But I decided to take a different approach in this program and create my own kind of container using dynamically allocated memory that I manage. I didn<span class="s12">’</span>t do this because it<span class="s12">’</span>s a better programming choice<span class="s12">—</span>always see whether you can leverage good work done by other programmers, like the STL<span class="s12">—</span>but because it makes for a better game programming example. It<span class="s12">’</span>s a great way to really see dynamic memory in action.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website </a>(www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">game_lobby.cpp</span>. Here<span class="s12">’</span>s the beginning of the program, which includes the <span class="s35">Player </span>class:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Game Lobby</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Simulates a game lobby where players wait #include &lt;iostream&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">Introducing the Game Lobby Program 317</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">#include &lt;string&gt; using namespace std; class Player</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Player(const string&amp; name = &quot;&quot;); string GetName() const;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Player* GetNext() const; void SetNext(Player* next);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* m_pNext;    //Pointer to next player in list</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Player::Player(const string&amp; name): m_Name(name),</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pNext(0)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">string Player::GetName() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Player* Player::GetNext() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_pNext;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Player::SetNext(Player* next)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pNext = next;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">m_Name </span>data member holds the name of a player. That<span class="s12">’</span>s pretty straightfor- ward, but you might be wondering about the other data member, <span class="s35">m_pNext</span>. It<span class="s12">’</span>s a pointer to a <span class="s35">Player </span>object, which means that each <span class="s35">Player </span>object can hold a name and point to another <span class="s35">Player </span>object. You<span class="s12">’</span>ll get the point of all this when I talk</p><p style="text-indent: 0pt;text-align: left;"><span><img width="52" height="11" alt="image" src="Image_370.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1084">318 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="51" height="12" alt="image" src="Image_371.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="33" height="10" alt="image" src="Image_372.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="136" height="78" alt="image" src="Image_373.png"/></span></p><p class="s37" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.12</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A <span class="s35">Player </span>object can hold a name and point to another <span class="s35">Player </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">about the <span class="s35">Lobby </span>class. Figure 9.12 provides a visual representation of a <span class="s35">Player</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1027">object.</a><a name="bookmark1085">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The class has a get accessor method for <span class="s35">m_Name </span>and get and set accessor member functions  for  <span class="s35">m_pNext</span>.  Finally,  the  constructor  is  pretty  simple.  It  initializes <span class="s35">m_Name </span>to a <span class="s35">string </span>object based on what<span class="s12">’</span>s passed to the constructor. It also sets <span class="s35">m_pNext  </span>to <span class="s35">0</span>, making it a null pointer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part375.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part377.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
