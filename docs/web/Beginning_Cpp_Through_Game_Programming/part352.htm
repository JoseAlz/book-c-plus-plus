<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part351.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part353.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is procedural programming?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: A paradigm where tasks are broken down into a series of smaller tasks and implemented in manageable chunks of code, such as functions. In procedural programming, functions and data are separate.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is an object?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: An entity that combines data and functions. Q: Why create objects?</p><p style="padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Because the world<span class="s12">—</span>and especially game worlds<span class="s12">—</span>are full of objects. By creating your own types, you can represent objects and their relationships to other objects more directly and intuitively than you might be able to otherwise.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is object-oriented programming?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: A paradigm where work is accomplished through objects. It allows pro- grammers to define their own types of objects. The objects usually have relationships to each other and can interact.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: Is C++ an object-oriented programming language or a procedural program- ming language?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: C++ is a multi-paradigm programming language. It allows a game pro- grammer to write games in a procedural way or an object-oriented way<span class="s12">—</span>or through a combination of both (to name just a few options).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Should I always try to write object-oriented game programs?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Although object-oriented programming is used in almost every commercial game on the market, you don<span class="s12">’</span>t have to write games using this paradigm. C++ lets you use one of several programming paradigms. In general, though, large game projects will almost surely benefit from an object-oriented approach.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1002">284 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why not make all class members public?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: Because it goes against the idea of encapsulation. Q: What is encapsulation?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: The quality of being self-contained. In the world of OOP, encapsulation prevents client code from directly accessing the internals of an object. Instead, it encourages client code to use a defined interface to the object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are the benefits of encapsulation?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: In the world of OOP, encapsulation protects the integrity of an object. For example, you might have a spaceship object with a fuel data member. By preventing direct access to this data member, you can guarantee that it never becomes an illegal value (such as a negative number).</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Should I provide access to data members through accessor member functions?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Some game programmers say you should never provide access to data members through accessor member functions because even though this kind of access is indirect, it goes against the idea of encapsulation. Instead, they say you should write classes with member functions that provide the client with all of the functionality it could need, eliminating the client<span class="s12">’</span>s need to access a specific data member.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are mutable data members?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Data members that can be modified even by constant member functions. You create a mutable data member using the keyword <span class="s35">mutable</span>. You can also modify a mutable data member of a constant object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why is it useful to have a default constructor?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Because there might be times when objects are automatically created without any argument values passed to a constructor<span class="s12">—</span>for example, when you create an array of objects.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is a structure?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A structure is very similar to a class. The only real difference is that the default access level for structures is public. You define a structure by using the keyword <span class="s35">struct</span>.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark935">Exercises 285</a><a name="bookmark1003">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">Q: Why does C++ have both structures and classes? A: So that C++ retains backward compatibly with C. Q: When should I use structures?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Some game programmers use structures to group only data together, without functions (because that<span class="s12">’</span>s how C structures work). But it<span class="s12">’</span>s probably best to avoid structures whenever possible and use classes instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part351.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part353.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
