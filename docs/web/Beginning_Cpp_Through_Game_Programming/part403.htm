<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Using Overloaded Assignment Operators and Copy Constructors in Derived Classes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part402.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part404.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark12" class="s30">Using Overloaded Assignment Operators and Copy Constructors in Derived Classes</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You already know how to write an overloaded assignment operator and a copy constructor for a class. However, writing them for a derived class requires a little bit more work because they aren<span class="s12">’</span>t inherited from a base class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When you overload the assignment operator in a derived class, you usually want to call the assignment operator member function from the base class, which you can explicitly call using the base class name as a prefix. If <span class="s35">Boss </span>is derived from <span class="s35">Enemy</span>, the overloaded assignment operator member function defined in <span class="s35">Boss </span>could start:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss&amp; operator=(const Boss&amp; b)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Enemy::operator=(b);        //handles the data members inherited from Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//now take care of data members defined in Boss</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The explicit call to <span class="s35">Enemy</span><span class="s12">’</span>s assignment operator member function handles the data members inherited from <span class="s35">Enemy</span>. The rest of the member function would take care of the data members defined in <span class="s35">Boss</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 308pt;text-indent: 0pt;text-align: left;"><a name="bookmark1120">Introducing Polymorphism 347</a><a name="bookmark1179">&zwnj;</a><a name="bookmark1180">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">For the copy constructor, you also usually want to call the copy constructor from a base class, which you can call just like any base class constructor. If <span class="s35">Boss </span>is derived from <span class="s35">Enemy</span>, the copy constructor defined in <span class="s35">Boss </span>could start:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss (const Boss&amp; b): Enemy(b)    //handles the data members inherited from Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//now take care of data members defined in Boss</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By calling <span class="s35">Enemy</span><span class="s12">’</span>s copy constructor with <span class="s35">Enemy(b)</span>, you copy that <span class="s35">Enemy</span><span class="s12">’</span>s data members into the new <span class="s35">Boss </span>object. In the remainder of <span class="s35">Boss</span><span class="s12">’ </span>copy constructor, you can take care of copying the data members declared in <span class="s35">Boss </span>into the new object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part402.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part404.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
