<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Understanding Order of Operations</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part99.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part101.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark209"><h1 href="#bookmark4">Understanding Order of Operations</h1></a><a name="bookmark288">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just like arithmetic operators, logical operators have precedence levels that affect the  order  in  which  an  expression  is  evaluated.  Logical  NOT,  <span class="s35">!</span>,  has  a  higher level of precedence than logical AND, <span class="s35">&amp;&amp;</span>, which has a higher precedence than logical OR, <span class="s35">||</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as with arithmetic operators, if you want an operation with lower precedence to be evaluated first, you can use parentheses. You can create complex expressions that involve arithmetic operators, relational operators, and logical operators. Operator precedence will define the exact order in which elements of the expression are evaluated. However, it<span class="s12">’</span>s best to try to create expressions that are clear and simple, not ones that require a mastery of the operator precedence list to decipher.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">For a list of C++ operators and their precedence levels, see Appendix B.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark210">68 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark289">&zwnj;</a><a name="bookmark290">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_107.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can use parentheses in a larger expression to change the way in which it’s evaluated, you can also use <i>redundant parentheses</i>—parentheses that don’t change the value of the expressions—to make the expression clearer. Let me give you a simple example. Check out the following expression from the Designers Network program:</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">(username == &quot;S.Meier&quot; &amp;&amp; password == &quot;civilization&quot;)</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Now, here’s the expression with some redundant parentheses:</p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">( (username == &quot;S.Meier&quot;) &amp;&amp; (password == &quot;civilization&quot;) )</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark211">While the extra parentheses don’t change the meaning of the expression, they really help the two smaller expressions, joined by the </a><span class="s35">&amp;&amp; </span>operator, stand out.<a name="bookmark291">&zwnj;</a></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Using redundant parentheses is a bit of an art form. Are they helpful or just plain redundant? That’s a call you as the programmer have to make.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part99.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part101.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
