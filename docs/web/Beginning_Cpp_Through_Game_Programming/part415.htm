<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The Card Class</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part414.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part416.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><h1 href="#bookmark13">The Card Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After some initial statements, I define the <span class="s35">Card </span>class for an individual playing card.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Blackjack</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Plays a simple version of the casino game of blackjack; for 1 - 7 players</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">362 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">#include &lt;ctime&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">using namespace std; class Card</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 119pt;text-indent: -57pt;line-height: 118%;text-align: left;">enum rank {ACE = 1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING};</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">enum suit {CLUBS, DIAMONDS, HEARTS, SPADES};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//overloading &lt;&lt; operator so can send Card object to standard output friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Card&amp; aCard);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Card(rank r = ACE, suit s = SPADES, bool ifu = true);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//returns the value of a card, 1 - 11 int GetValue() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//flips a card; if face up, becomes face down and vice versa void Flip();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">rank m_Rank; suit m_Suit; bool m_IsFaceUp;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Card::Card(rank r, suit s, bool ifu):    m_Rank(r), m_Suit(s), m_IsFaceUp(ifu)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int Card::GetValue() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//if a cards is face down, its value is 0 int value = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_IsFaceUp)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//value is number showing on card value = m_Rank;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//value is 10 for face cards if (value &gt; 10)</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1202">Introducing the Blackjack Game 363</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">value = 10;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return value;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Card::Flip()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_IsFaceUp = !(m_IsFaceUp);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1132">}</a><a name="bookmark1203">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I define two enumerations, <span class="s35">rank  </span>and <span class="s35">suit</span>, to use as the types for the rank and suit data members of the class, <span class="s35">m_Rank </span>and <span class="s35">m_Suit</span>. This has two benefits. First, it makes the code more readable. A suit data member will have a value like <span class="s35">CLUBS </span>or  <span class="s35">HEARTS  </span>instead  of  <span class="s35">0  </span>or  <span class="s35">2</span>.  Second,  it  limits  the  values  that  these  two  data members can have. <span class="s35">m_Suit </span>can only store a value from <span class="s35">suit</span>, and <span class="s35">m_Rank </span>can only store a value from <span class="s35">rank</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I make the overloaded <span class="s35">operator&lt;&lt;() </span>function a friend of the class so I can display a card object on the screen.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">GetValue() <span class="p">returns a value for a </span>Card <span class="p">object, which can be between </span>0 <span class="p">and </span>11<span class="p">. Aces are valued at </span>11<span class="p">. (I deal with potentially counting them as </span>1 <span class="p">in the </span>Hand <span class="p">class, based on the other cards in the hand.) A face-down card has a value of </span>0<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part414.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part416.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
