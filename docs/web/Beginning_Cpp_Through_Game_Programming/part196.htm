<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Questions and Answers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part195.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part197.htm">Next &gt;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why is the STL important?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 107%;text-align: left;">A: Because it saves game programmers time and effort. The STL provides commonly used container types and algorithms.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Is the STL fast?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Definitely. The STL has been honed by hundreds of programmers to eke out as much performance as possible on each supported platform.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When should I use a vector instead of an array?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Almost always. Vectors are efficient and flexible. They do require a little more memory than arrays, but this tradeoff is almost always worth the benefits.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark550">Questions and Answers 147</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Is a vector as fast as an array?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Accessing a vector element can be just as fast as accessing an array element. Also, iterating though a vector can be just as fast as iterating through an array.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: If I can use the subscripting operator with vectors, why would I ever need iterators?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: There are several reasons. First, many of the <span class="s35">vector </span>member functions require iterators. (<span class="s35">insert() </span>and <span class="s35">erase() </span>are two examples.) Second, STL algorithms require iterators. And third, you can<span class="s12">’</span>t use the subscripting operator with most of the STL containers, so you<span class="s12">’</span>re going to have to learn to use iterators sooner or later.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Which is the best way to access elements of a vector<span class="s12">—</span>through iterators or through the subscripting operator?</p><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -18pt;line-height: 106%;text-align: justify;">A: It depends. If you need random-element access, then the subscripting operator is a natural fit. If you need to use STL algorithms, then you must use iterators.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: What about iterating through the elements of a vector? Should I use the subscripting operator or an iterator?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: You can use either method. However, an advantage of using an iterator is that it gives you the flexibility to substitute a different STL container in place of a vector (such as a list) without much code changing.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why does the STL define more than one sequential container type?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A: Different sequential container types have different performance properties.</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: center;">They<span class="s12">’</span>re like tools in a toolbox; each tool is best suited for a different job.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are container adaptors?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Container adaptors are based on one of the STL sequence containers; they represent standard computer data structures. Although they are not official containers, they look and feel just like them.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s a stack?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A data structure in which elements are removed in the reverse order from how they were added. This means that the last element added is the first one</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark551">148 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: left;">removed. This is just like a real-life stack, from which you remove the last item you placed on the top of the stack.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a queue?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: A data structure in which elements are removed in the same order they were added. This is just like a real-life queue, such as a line of people in which the first person in line gets served first.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark468">Q: What</a><span class="s12">’</span>s a double-ended queue?<a name="bookmark552">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark469">A: A queue in which elements can be added or removed from either end. Q: What</a><span class="s12">’</span>s a priority queue?<a name="bookmark553">&zwnj;</a></p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: A data structure that supports finding and removing the element with the highest priority.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When would I use pseudocode?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: Any time you want to plan a program or section of code. Q: When would I use stepwise refinement?</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A: When you want to get even more detailed with your pseudocode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part195.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part197.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
