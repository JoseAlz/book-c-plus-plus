<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Inheritance and Polymorphism: Blackjack</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part386.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part388.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="part3.htm#bookmark12" class="s28" name="bookmark1104">Inheritance and Polymorphism: Blackjack</a><a name="bookmark1146">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Classes give you the perfect way to represent game entities that have attributes and behaviors. But game entities are often related. In this chapter, you<span class="s12">’</span>ll learn about inheritance and polymorphism, which give you ways to express those connections and can make defining and using classes even simpler and more intuitive. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Derive one class from another</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use inherited data members and member functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Override base class member functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Define virtual functions to enable polymorphism</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Declare pure virtual functions to define abstract classes</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part388.htm">Introducing Inheritance</a><a class="toc1" href="part389.htm">Introducing the Simple Boss Program</a><a class="toc1" href="part390.htm">Deriving from a Base Class</a><a class="toc1" href="part391.htm">Instantiating Objects from a Derived Class</a><a class="toc1" href="part392.htm">Using Inherited Members</a><a class="toc0" href="part393.htm">Controlling Access under Inheritance</a><a class="toc1" href="part394.htm">Introducing the Simple Boss 2.0 Program</a><a class="toc1" href="part395.htm">Using Access Modifiers with Class Members</a><a class="toc1" href="part396.htm">Using Access Modifiers When Deriving Classes</a><a class="toc0" href="part397.htm">Calling and Overriding Base Class Member Functions</a><a class="toc1" href="part398.htm">Introducing the Overriding Boss Program</a><a class="toc1" href="part399.htm">Calling Base Class Constructors</a><a class="toc1" href="part400.htm">Declaring Virtual Base Class Member Functions</a><a class="toc1" href="part401.htm">Overriding Virtual Base Class Member Functions</a><a class="toc1" href="part402.htm">Calling Base Class Member Functions</a><a class="toc0" href="part403.htm">Using Overloaded Assignment Operators and Copy Constructors in Derived Classes</a><a class="toc0" href="part404.htm">Introducing Polymorphism</a><a class="toc1" href="part405.htm">Introducing the Polymorphic Bad Guy Program</a><a class="toc1" href="part406.htm">Using Base Class Pointers to Derived Class Objects</a><a class="toc1" href="part407.htm">Defining Virtual Destructors</a><a class="toc0" href="part408.htm">Using Abstract Classes</a><a class="toc1" href="part409.htm">Introducing the Abstract Creature Program</a><a class="toc1" href="part410.htm">Declaring Pure Virtual Functions</a><a class="toc1" href="part411.htm">Deriving a Class from an Abstract Class</a><a class="toc0" href="part412.htm">Introducing the Blackjack Game</a><a class="toc1" href="part413.htm">Designing the Classes</a><a class="toc1" href="part414.htm">Planning the Game Logic</a><a class="toc1" href="part415.htm">The Card Class</a><a class="toc1" href="part416.htm">The Hand Class</a><a class="toc1" href="part417.htm">The GenericPlayer Class</a><a class="toc1" href="part418.htm">The Player Class</a><a class="toc1" href="part419.htm">The House Class</a><a class="toc1" href="part420.htm">The Deck Class</a><a class="toc1" href="part421.htm">The Game Class</a><a class="toc1" href="part422.htm">The main() Function</a><a class="toc1" href="part423.htm">Overloading the operator&lt;&lt;() Function</a><a class="toc0" href="part424.htm">Summary</a><a class="toc0" href="part425.htm">Questions and Answers</a><a class="toc0" href="part426.htm">Discussion Questions</a><a class="toc0" href="part427.htm">Exercises</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part386.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part388.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
