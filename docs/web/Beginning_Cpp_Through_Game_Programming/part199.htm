<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Functions: Mad Lib</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s28">Functions: Mad Lib</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark556">Every program you</a><span class="s12">’</span>ve seen so far has consisted of one function<span class="s12">—</span><span class="s35">main()</span>.<a name="bookmark605">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, once your programs reach a certain size or level of complexity, it becomes hard to work with them like this. Fortunately, there are ways to break up big programs into smaller, bite-sized chunks of code. In this chapter, you<span class="s12">’</span>ll learn about one way<span class="s12">—</span>creating new functions. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Write new functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Accept values into your new functions through parameters</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Return information from your new functions through return values</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Work with global variables and constants</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Overload functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Inline functions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part200.htm">Creating Functions</a><a class="toc1" href="part201.htm">Introducing the Instructions Program</a><a class="toc1" href="part202.htm">Declaring Functions</a><a class="toc1" href="part203.htm">Defining Functions</a><a class="toc1" href="part204.htm">Calling Functions</a><a class="toc1" href="part205.htm">Understanding Abstraction</a><a class="toc0" href="part206.htm">Using Parameters and Return Values</a><a class="toc1" href="part207.htm">Introducing the Yes or No Program</a><a class="toc1" href="part208.htm">Returning a Value</a><a class="toc1" href="part209.htm">Accepting Values into Parameters</a><a class="toc1" href="part210.htm">Understanding Encapsulation</a><a class="toc0" href="part211.htm">Understanding Software Reuse</a><a class="toc0" href="part212.htm">Working with Scopes</a><a class="toc1" href="part213.htm">Introducing the Scoping Program</a><a class="toc1" href="part214.htm">Working with Separate Scopes</a><a class="toc1" href="part215.htm">Working with Nested Scopes</a><a class="toc0" href="part216.htm">Using Global Variables</a><a class="toc1" href="part217.htm">Introducing the Global Reach Program</a><a class="toc1" href="part218.htm">Declaring Global Variables</a><a class="toc1" href="part219.htm">Accessing Global Variables</a><a class="toc1" href="part220.htm">Hiding Global Variables</a><a class="toc1" href="part221.htm">Altering Global Variables</a><a class="toc1" href="part222.htm">Minimizing the Use of Global Variables</a><a class="toc0" href="part223.htm">Using Global Constants</a><a class="toc0" href="part224.htm">Using Default Arguments</a><a class="toc1" href="part225.htm">Introducing the Give Me a Number Program</a><a class="toc1" href="part226.htm">Specifying Default Arguments</a><a class="toc1" href="part227.htm">Assigning Default Arguments to Parameters</a><a class="toc1" href="part228.htm">Overriding Default Arguments</a><a class="toc0" href="part229.htm">Overloading Functions</a><a class="toc1" href="part230.htm">Introducing the Triple Program</a><a class="toc1" href="part231.htm">Creating Overloaded Functions</a><a class="toc1" href="part232.htm">Calling Overloaded Functions</a><a class="toc0" href="part233.htm">Inlining Functions</a><a class="toc1" href="part234.htm">Introducing the Taking Damage Program</a><a class="toc1" href="part235.htm">Specifying Functions for Inlining</a><a class="toc1" href="part236.htm">Calling Inlined Functions</a><a class="toc0" href="part237.htm">Introducing the Mad Lib Game</a><a class="toc1" href="part238.htm">Setting Up the Program</a><a class="toc1" href="part239.htm">The main() Function</a><a class="toc1" href="part240.htm">The askText() Function</a><a class="toc1" href="part241.htm">The askNumber() Function</a><a class="toc1" href="part242.htm">The tellStory() Function</a><a class="toc0" href="part243.htm">Summary</a><a class="toc0" href="part244.htm">Questions and Answers</a><a class="toc0" href="part245.htm">Discussion Questions</a><a class="toc0" href="part246.htm">Exercises</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part198.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part200.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
