<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Returning a Pointer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part308.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part310.htm">Next &gt;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><h1 href="#bookmark10">Returning a Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Before you can return a pointer from a function, you must specify that you<span class="s12">’</span>re returning one. That<span class="s12">’</span>s what I do in the <span class="s35">refToElement() </span>header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string* ptrToElement(vector&lt;string&gt;* const pVec, int i)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark880">Returning Pointers 241</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By starting the header with <span class="s35">string*</span>, I<span class="s12">’</span>m saying that the function will return a pointer to a <span class="s35">string </span>object (and not a <span class="s35">string </span>object itself). To specify that a function returns a pointer to an object of a particular type, put an asterisk after the type name of the return type.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The body of the function <span class="s35">ptrToElement() </span>contains only one statement, which returns a pointer to the element at position <span class="s35">i </span>in the vector pointed to by <span class="s35">pVec</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return &amp;((*pVec)[i]);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark827">The </a><span class="s35">return </span>statement might look a little cryptic, so I<span class="s12">’</span>ll step through it. Whenever you come upon a complex expression, evaluate it like the computer does<span class="s12">—</span>by starting with the innermost part. I<span class="s12">’</span>ll start with <span class="s35">(*pVec)[i]</span>, which means the element in position <span class="s35">i </span>of the vector pointed to by <span class="s35">pVec</span>. By applying the address of operator (<span class="s35">&amp;</span>) to the expression, it becomes the address of the element in position <span class="s35">i </span>of the vector pointed to by <span class="s35">pVec</span>.<a name="bookmark881">&zwnj;</a></p><p class="s24" style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_294.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although returning a pointer can be an efficient way to send information back to a calling function, you have to be careful not to return a pointer that points to an out-of-scope object. For example, the following function returns a pointer that, if used, could crash the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">string* badPointer()</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;line-height: 119%;text-align: left;">string local = &quot;This string will cease to exist once the function ends.&quot;; string* pLocal = &amp;local;</p><p class="s35" style="padding-left: 79pt;text-indent: 0pt;line-height: 11pt;text-align: left;">return pLocal;</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">That’s because <span class="s35">badPointer() </span>returns a pointer to a string that no longer exists after the function ends. A pointer to a non-existent object is called a <i>dangling pointer</i>. Attempting to dereference a dangling pointer can lead to disastrous results. One way to avoid dangling pointers is to never return a pointer to a local variable.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_295.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part308.htm">&lt; Previous</a><span> | </span><a href="../Beginning_Cpp_Through_Game_Programming.html">Contents</a><span> | </span><a href="part310.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
