<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Beginning_Cpp_Through_Game_Programming</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 33.5pt; }
 .s2 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 h4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10.5pt; }
 .s3 { color: black; font-family:Calibri, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s4 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s5 { color: black; font-family:SimSun; font-style: normal; font-weight: normal; text-decoration: none; font-size: 5.5pt; vertical-align: 1pt; }
 .s6 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7.5pt; }
 .s7 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt; }
 .s8 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 7.5pt; }
 .s9 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 4.5pt; vertical-align: 1pt; }
 .s10 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s11 { color: black; font-family:"Palatino Linotype", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s13 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18pt; }
 .p, p { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; margin:0pt; }
 .h2, h2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s14 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s15 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .a, a { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s16 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s17 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s18 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s19 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s20 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s21 { color: black; font-family:Verdana, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s22 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18pt; }
 .s23 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15pt; }
 .s24 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s25 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s26 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s27 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 18pt; }
 .s28 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 20pt; }
 .s29 { color: #4C4C4C; font-family:"MS UI Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7pt; }
 .s30 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15pt; }
 .s31 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 15pt; }
 .s32 { color: #4C4C4C; font-family:"MS UI Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; vertical-align: 1pt; }
 .h1, h1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s33 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt; }
 .s34 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s35 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s36 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s37 { color: black; font-family:"Arial Narrow", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s38 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s39 { color: black; font-family:"Century Gothic", sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s40 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s41 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s42 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s43 { color: black; font-family:"Arial Narrow", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s44 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 h3 { color: black; font-family:Calibri, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s45 { color: black; font-family:"Arial Narrow", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s46 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s47 { color: black; font-family:"Arial Narrow", sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 10pt; }
 .s48 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s49 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s50 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s51 { color: black; font-family:Georgia, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s52 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s53 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s54 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s55 { color: black; font-family:Georgia, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 .s56 { color: black; font-family:Georgia, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s57 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s58 { color: black; font-family:Arial, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s59 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: 60pt; }
 .s60 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 6pt; }
 .s61 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; vertical-align: 41pt; }
 .s63 { color: black; font-family:"Trebuchet MS", sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s64 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: -2pt; }
 .s65 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; vertical-align: -3pt; }
 .s66 { color: black; font-family:"Trebuchet MS", sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s67 { color: #FFF; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 27.5pt; }
 .s68 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s69 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s70 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s71 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s72 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8pt; }
 .s73 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s74 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s75 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s76 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s77 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s78 { color: black; font-family:Verdana, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s79 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s80 { color: black; font-family:"Century Gothic", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8pt; }
 .s81 { color: black; font-family:"Palatino Linotype", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s82 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s83 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s85 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt; }
 .s86 { color: black; font-family:"Arial Narrow", sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s87 { color: black; font-family:Garamond, serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 .s88 { color: black; font-family:Verdana, sans-serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 8pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 li {display: block; }
 #l2 {padding-left: 0pt;counter-reset: d1 1; }
 #l2> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: e1 1; }
 #l3> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt;counter-reset: f1 1; }
 #l4> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l4> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 li {display: block; }
 #l5 {padding-left: 0pt;counter-reset: g1 1; }
 #l5> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l5> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: h1 1; }
 #l6> li>*:first-child:before {counter-increment: h1; content: counter(h1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: h1 0;  }
 li {display: block; }
 #l7 {padding-left: 0pt;counter-reset: i1 1; }
 #l7> li>*:first-child:before {counter-increment: i1; content: counter(i1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 li {display: block; }
 #l8 {padding-left: 0pt;counter-reset: j1 1; }
 #l8> li>*:first-child:before {counter-increment: j1; content: counter(j1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l8> li:first-child>*:first-child:before {counter-increment: j1 0;  }
 li {display: block; }
 #l9 {padding-left: 0pt;counter-reset: k1 1; }
 #l9> li>*:first-child:before {counter-increment: k1; content: counter(k1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 li {display: block; }
 #l10 {padding-left: 0pt;counter-reset: l1 1; }
 #l10> li>*:first-child:before {counter-increment: l1; content: counter(l1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l10> li:first-child>*:first-child:before {counter-increment: l1 0;  }
 li {display: block; }
 #l11 {padding-left: 0pt;counter-reset: m1 1; }
 #l11> li>*:first-child:before {counter-increment: m1; content: counter(m1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l11> li:first-child>*:first-child:before {counter-increment: m1 0;  }
 li {display: block; }
 #l12 {padding-left: 0pt;counter-reset: n1 1; }
 #l12> li>*:first-child:before {counter-increment: n1; content: counter(n1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: n1 0;  }
 li {display: block; }
 #l13 {padding-left: 0pt;counter-reset: o1 1; }
 #l13> li>*:first-child:before {counter-increment: o1; content: counter(o1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l13> li:first-child>*:first-child:before {counter-increment: o1 0;  }
 li {display: block; }
 #l14 {padding-left: 0pt;counter-reset: p1 1; }
 #l14> li>*:first-child:before {counter-increment: p1; content: counter(p1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l14> li:first-child>*:first-child:before {counter-increment: p1 0;  }
 li {display: block; }
 #l15 {padding-left: 0pt;counter-reset: q1 1; }
 #l15> li>*:first-child:before {counter-increment: q1; content: counter(q1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: q1 0;  }
 li {display: block; }
 #l16 {padding-left: 0pt;counter-reset: r1 1; }
 #l16> li>*:first-child:before {counter-increment: r1; content: counter(r1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l16> li:first-child>*:first-child:before {counter-increment: r1 0;  }
 li {display: block; }
 #l17 {padding-left: 0pt;counter-reset: s1 1; }
 #l17> li>*:first-child:before {counter-increment: s1; content: counter(s1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: s1 0;  }
 li {display: block; }
 #l18 {padding-left: 0pt;counter-reset: t1 1; }
 #l18> li>*:first-child:before {counter-increment: t1; content: counter(t1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l18> li:first-child>*:first-child:before {counter-increment: t1 0;  }
 li {display: block; }
 #l19 {padding-left: 0pt;counter-reset: u1 1; }
 #l19> li>*:first-child:before {counter-increment: u1; content: counter(u1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l19> li:first-child>*:first-child:before {counter-increment: u1 0;  }
 li {display: block; }
 #l20 {padding-left: 0pt;counter-reset: v1 1; }
 #l20> li>*:first-child:before {counter-increment: v1; content: counter(v1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l20> li:first-child>*:first-child:before {counter-increment: v1 0;  }
 li {display: block; }
 #l21 {padding-left: 0pt;counter-reset: w1 1; }
 #l21> li>*:first-child:before {counter-increment: w1; content: counter(w1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l21> li:first-child>*:first-child:before {counter-increment: w1 0;  }
 li {display: block; }
 #l22 {padding-left: 0pt;counter-reset: x1 1; }
 #l22> li>*:first-child:before {counter-increment: x1; content: counter(x1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l22> li:first-child>*:first-child:before {counter-increment: x1 0;  }
 li {display: block; }
 #l23 {padding-left: 0pt;counter-reset: y1 1; }
 #l23> li>*:first-child:before {counter-increment: y1; content: counter(y1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l23> li:first-child>*:first-child:before {counter-increment: y1 0;  }
 li {display: block; }
 #l24 {padding-left: 0pt;counter-reset: z1 1; }
 #l24> li>*:first-child:before {counter-increment: z1; content: counter(z1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l24> li:first-child>*:first-child:before {counter-increment: z1 0;  }
 li {display: block; }
 #l25 {padding-left: 0pt;counter-reset: c1 1; }
 #l25> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l25> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 li {display: block; }
 #l26 {padding-left: 0pt; }
 #l26> li>*:first-child:before {content: "* "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 8.5pt; }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><span><img width="336" height="417" alt="image" src="Image_001.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="280" height="343" alt="image" src="Image_002.gif"/></span></p><p class="s1" style="padding-top: 6pt;padding-left: 140pt;text-indent: 6pt;line-height: 85%;text-align: right;">Beginning C++ Through Game Programming, Third Edition</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="318" height="59" alt="image" src="Image_003.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s2" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">Michael Dawson</p><p style="text-indent: 0pt;text-align: left;"/><h4 style="padding-top: 3pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">Course Technology PTR</h4><p class="s3" style="padding-top: 2pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">A part of Cengage Learning</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><span><img width="179" height="27" alt="image" src="Image_004.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="582" height="0" alt="image" src="Image_005.png"/></span></p><p class="s4" style="padding-top: 4pt;padding-left: 46pt;text-indent: 0pt;text-align: left;">Australia <span class="s5">. </span>Brazil <span class="s5">. </span>Japan <span class="s5">. </span>Korea <span class="s5">. </span>Mexico <span class="s5">. </span>Singapore <span class="s5">. </span>Spain <span class="s5">. </span>United Kingdom <span class="s5">. </span>United States</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="179" height="27" alt="image" src="Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="538" height="598" alt="image" src="Image_007.png"/></span></p><p class="s6" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;line-height: 109%;text-align: left;">Beginning C++ Through Game Programming, Third Edition</p><p class="s6" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">Michael Dawson</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 26pt;text-indent: 0pt;line-height: 109%;text-align: left;">Publisher and General Manager, Course Technology PTR: <span class="s7">Stacy L. Hiquet</span></p><p class="s6" style="padding-top: 2pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Associate Director of Marketing:</p><p class="s7" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">Sarah Panella</p><p class="s6" style="padding-top: 3pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Manager of Editorial Services:</p><p class="s7" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">Heather Talbot</p><p class="s6" style="padding-top: 3pt;padding-left: 26pt;text-indent: 0pt;line-height: 141%;text-align: left;">Marketing Manager: <span class="s7">Jordan Castellani </span>Senior Acquisitions Editor: <span class="s7">Emi Smith </span>Project Editor: <span class="s7">Jenny Davidson </span>Technical Reviewer: <span class="s7">Maneesh Sethi</span></p><p class="s6" style="padding-left: 26pt;text-indent: 0pt;line-height: 108%;text-align: left;">Interior Layout Tech: <span class="s7">MPS Limited, a Macmillan Company</span></p><p class="s6" style="padding-top: 3pt;padding-left: 26pt;text-indent: 0pt;line-height: 141%;text-align: left;">Cover Designer: <span class="s7">Mike Tanamachi </span>Indexer: <span class="s7">Kevin Broccoli </span>Proofreader: <span class="s7">Michael Beady</span></p><p class="s7" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">© <span class="s4">2011 </span>Course Technology, a part of Cengage Learning.</p><p class="s7" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 109%;text-align: left;">ALL RIGHTS RESERVED. No part of this work covered by the copyright herein may be reproduced, transmitted, stored, or used in any form or by any means graphic, electronic, or mechanical, including but not limited to photocopying, recording, scanning, digitizing, taping, Web distribution, information networks, or information storage and retrieval systems, except as permitted under Section <span class="s4">107 </span>or <span class="s4">108 </span>of the <span class="s4">1976 </span>United States Copyright Act, without the prior written permission of the publisher.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 8pt;text-indent: 0pt;text-align: center;">For product information and technology assistance, contact us at</p><p class="s6" style="padding-left: 8pt;text-indent: 0pt;text-align: center;">Cengage Learning Customer &amp; Sales Support, <span class="s4">1-800-354-9706</span></p><p class="s6" style="padding-top: 6pt;padding-left: 13pt;text-indent: 0pt;line-height: 109%;text-align: center;"><a href="http://www.cengage.com/permissions" style=" color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt;" target="_blank">For permission to use material from this  text  or  product, submit all requests online at </a>www.cengage.com/permissions <a href="mailto:permissionrequest@cengage.com" style=" color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 7.5pt;" target="_blank">Further permissions questions can be emailed to </a><a href="mailto:permissionrequest@cengage.com" class="s8" target="_blank">permissionrequest@cengage.com</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 141%;text-align: left;">All trademarks are the property of their respective owners. All images <span class="s9">C </span>Cengage Learning unless otherwise noted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Library of Congress Control Number: <span class="s4">2010928011</span></p><p class="s7" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ISBN-<span class="s4">13: 978-1-4354-5742-3</span></p><p class="s7" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ISBN-<span class="s4">10: 1-4354-5742-0</span></p><p class="s7" style="padding-top: 1pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">eISBN-<span class="s4">10:1-4354-5743-9</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s6" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Course Technology, a part of Cengage Learning</p><p class="s4" style="padding-left: 5pt;text-indent: 0pt;line-height: 109%;text-align: left;">20 <span class="s7">Channel Center Street Boston, MA </span>02210</p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 9pt;text-align: left;">USA</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;line-height: 109%;text-align: justify;">Cengage Learning is a leading provider of customized learning solutions with of<span class="s4">ﬁ</span>ce locations around the globe, including Singapore, the United Kingdom, Australia, Mexico, Brazil, and Japan. Locate your local of<span class="s4">ﬁ</span>ce at: <b>international.cengage.com/region</b></p><p class="s7" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 108%;text-align: left;">Cengage Learning products are represented in Canada by Nelson Education, Ltd.</p><p class="s7" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">For your lifelong learning solutions, visit <b>courseptr.com</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s7" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Visit our corporate website at <b>cengage.com</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 5pt;padding-left: 26pt;text-indent: 0pt;text-align: left;">Printed in the United States of America 1 2 3 4 5 6 7 12 11 10</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 5pt;padding-left: 57pt;text-indent: 0pt;line-height: 91%;text-align: center;">To my sweet, tough cookie<span class="s12">—</span>for all of the help, support, understanding (and distractions) you offered.</p><p class="s11" style="padding-top: 7pt;padding-left: 57pt;text-indent: 0pt;line-height: 91%;text-align: center;">And to Ariella Saraswati Dawson, a girl who<span class="s12">’</span>s even more impressive than her name. I look forward to rediscovering the world with you, Monkey.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="259" alt="image" src="Image_008.gif"/></span></p><p class="s13" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a0">Acknowledgments</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every book you<span class="s12">’</span>ve ever read perpetuates a big fat lie. And I<span class="s12">’</span>m here to out the publishing industry<span class="s12">’</span>s dirty little secret<span class="s12">—</span>books are not <span class="s12">“</span>by<span class="s12">” </span>only one person. Yes, you see only one name on book covers (including this one), but it takes a team of dedicated people to pull off the ﬁnal product. Authors could not do it alone; I certainly could not have done it alone. So I want to thank all those who helped make this book a reality.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Thanks to Jenny Davidson for her dual role as Project Editor and Copy Editor. Jenny kept me on schedule and my commas in place.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Thanks to Maneesh Sethi, my Technical Reviewer, who made sure my programs worked the way I said they did.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Thanks to Michael Beady, my Proofreader. His work makes this book look good<span class="s12">—</span>literally.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I also want to thank Emi Smith, my Senior Acquisitions Editor, for all of her encouragement.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Finally, I want to thank all of the game programmers who created the games I played while growing up. They inspired me to work in the industry and create games of my own. I hope I can inspire a few readers to do the same.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="259" alt="image" src="Image_009.gif"/></span></p><p class="s13" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a1">About the Author</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h2 style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Michael Dawson <span class="p">is a game programming author and instructor who teaches students the art and science of writing their own games. Mike has developed and taught game programming courses for UCLA Extension, The Digital Media Academy, and The Los Angeles Film School. In addition, his books have been required reading in colleges and universities around the country.</span></h2><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Mike got his start in the game industry as a producer and designer, but he also <span class="s12">“</span>starred<span class="s12">” </span>in an adventure game in which the player controls the main character, named Mike Dawson. In the game, the player directs the digitized images of Dawson, who must stop an extraterrestrial invasion before an implanted alien embryo is born from his head.</p><p class="s11" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="p">In real life, Mike is the author of </span>Beginning C<span class="s14">þþ </span>Through Game Programming<span class="p">, </span>Python Programming for the Absolute Beginner<span class="p">, </span>C<span class="s14">þþ </span>Projects: Programming with Text-Based Games<span class="p">, and </span>Guide to Programming with Python<span class="p">. He earned his bachelor</span><span class="s12">’</span><a href="http://www.programgames.com/" class="s15" target="_blank">s degree in Computer Science from the University of Southern California. Visit his website at </a><span class="p">www.programgames.com to learn more or to get support for any of his books.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="259" alt="image" src="Image_010.gif"/></span></p><p class="s13" style="padding-top: 9pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a name="bookmark0">Contents</a><a name="bookmark1">&zwnj;</a><a name="bookmark2">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 105pt;text-indent: 0pt;text-align: left;"><a href="#bookmark15">Introduction xviii</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:30.6462pt" cellspacing="0"><tr style="height:13pt"><td style="width:47pt"><p style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark74" class="s16">Chapter</a></p></td><td style="width:19pt"><p style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark74" class="s16">1</a></p></td><td style="width:317pt"><p style="padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;"><a href="#bookmark74" class="s16">Types, Variables, and Standard I/O: Lost Fortune . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;line-height: 11pt;text-align: right;"><a href="#bookmark74" class="s16">1</a></p></td></tr><tr style="height:15pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark76" class="s17">Introducing C</a><a href="#bookmark76" class="s18">þþ </a><a href="#bookmark76" class="s17">. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-top: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark76" class="s17">1</a></p></td></tr><tr style="height:15pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark77" class="s17">Using C</a><a href="#bookmark77" class="s18">þþ </a><a href="#bookmark77" class="s17">for Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-top: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark77" class="s17">2</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark79" class="s17">Creating an Executable File . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark79" class="s17">2</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark81" class="s17">Dealing with Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark81" class="s17">4</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark83" class="s17">Understanding the ISO Standard . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark83" class="s17">5</a></p></td></tr><tr style="height:15pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark85" class="s17">Writing Your First C</a><a href="#bookmark85" class="s18">þþ </a><a href="#bookmark85" class="s17">Program . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-top: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark85" class="s17">5</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark86" class="s17">Introducing the Game Over Program . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark86" class="s17">5</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark88" class="s17">Commenting Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark88" class="s17">7</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark91" class="s17">Using Whitespace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark91" class="s17">7</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark92" class="s17">Including Other Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark92" class="s17">7</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark93" class="s17">Defining the main() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark93" class="s17">8</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark96" class="s17">Displaying Text through the Standard Output . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark96" class="s17">8</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 1pt;text-indent: 0pt;text-align: right;"><a href="#bookmark98" class="s17">Terminating Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark98" class="s17">9</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark99" class="s17">Returning a Value from main() . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark99" class="s17">10</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark101" class="s17">Working with the std Namespace . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark101" class="s17">10</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark102" class="s17">Introducing the Game Over 2.0 Program . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark102" class="s17">10</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark103" class="s17">Employing a using Directive . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark103" class="s17">11</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark105" class="s17">Introducing the Game Over 3.0 Program . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark105" class="s17">11</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;text-align: right;"><a href="#bookmark106" class="s17">Employing using Declarations . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark106" class="s17">12</a></p></td></tr><tr style="height:12pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:317pt"><p style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: right;"><a href="#bookmark108" class="s17">Understanding When to Employ using . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:14pt"><p style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;"><a href="#bookmark108" class="s17">12</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">vi</p><p class="s19" style="padding-top: 2pt;padding-left: 391pt;text-indent: 0pt;text-align: left;"><a name="bookmark3">Contents vii</a></p><p style="padding-top: 22pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark109" class="a">Using Arithmetic Operators </a><a href="#bookmark109">13</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark110" class="a">Introducing the Expensive Calculator Program </a><a href="#bookmark110">13</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark112" class="a">Adding, Subtracting, and Multiplying </a><a href="#bookmark112">14</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark114" class="a">Understanding Integer and Floating Point Division </a><a href="#bookmark114">14</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark115" class="a">Using the Modulus Operator </a><a href="#bookmark115">15</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark117" class="a">Understanding Order of Operations </a><a href="#bookmark117">15</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark118" class="a">Declaring and Initializing Variables </a><a href="#bookmark118">16</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark119" class="a">Introducing the Game Stats Program </a><a href="#bookmark119">16</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark122" class="a">Understanding Fundamental Types </a><a href="#bookmark122">18</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark123" class="a">Understanding Type Modifiers </a><a href="#bookmark123">18</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark126" class="a">Declaring Variables </a><a href="#bookmark126">19</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark129" class="a">Naming Variables </a><a href="#bookmark129">20</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark132" class="a">Assigning Values to Variables </a><a href="#bookmark132">21</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark134" class="a">Initializing Variables </a><a href="#bookmark134">22</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark136" class="a">Displaying Variable Values </a><a href="#bookmark136">22</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark137" class="a">Getting User Input </a><a href="#bookmark137">23</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark139" class="a">Defining New Names for Types </a><a href="#bookmark139">23</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark140" class="a">Understanding Which Types to Use </a><a href="#bookmark140">24</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark141" class="a">Performing Arithmetic Operations with Variables </a><a href="#bookmark141">24</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark143" class="a">Introducing the Game Stats 2.0 Program </a><a href="#bookmark143">24</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark145" class="a">Altering the Value of a Variable </a><a href="#bookmark145">26</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark146" class="a">Using Combined Assignment Operators </a><a href="#bookmark146">26</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark147" class="a">Using Increment and Decrement Operators </a><a href="#bookmark147">27</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark150" class="a">Dealing with Integer Wrap Around </a><a href="#bookmark150">28</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark151" class="a">Working with Constants </a><a href="#bookmark151">29</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark153" class="a">Introducing the Game Stats 3.0 Program </a><a href="#bookmark153">29</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark155" class="a">Using Constants </a><a href="#bookmark155">31</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark157" class="a">Using Enumerations </a><a href="#bookmark157">31</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark159" class="a">Introducing Lost Fortune </a><a href="#bookmark159">32</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark160" class="a">Setting Up the Program </a><a href="#bookmark160">32</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark162" class="a">Getting Information from the Player </a><a href="#bookmark162">33</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark164" class="a">Telling the Story </a><a href="#bookmark164">34</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark167" class="a">Summary </a><a href="#bookmark167">35</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark170" class="a">Questions and Answers </a><a href="#bookmark170">36</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark172" class="a">Discussion Questions </a><a href="#bookmark172">38</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark174" class="a">Exercises </a><a href="#bookmark174">38</a></p><p style="padding-top: 19pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark225" class="s20">Chapter 2 Truth, Branching, and the Game Loop:</a></p><p style="padding-top: 1pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark225" class="s20">Guess My Number 39</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark227">Understanding Truth 39</a></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark4">viii Contents</a></p><p style="padding-top: 22pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark230" class="a">Using the if Statement </a><a href="#bookmark230">40</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark231" class="a">Introducing the Score Rater Program </a><a href="#bookmark231">41</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark234" class="a">Testing true and false </a><a href="#bookmark234">42</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark236" class="a">Interpreting a Value as true or false </a><a href="#bookmark236">43</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark237" class="a">Using Relational Operators </a><a href="#bookmark237">44</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark239" class="a">Nesting if Statements </a><a href="#bookmark239">44</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark241" class="a">Using the else Clause </a><a href="#bookmark241">45</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark242" class="a">Introducing the Score Rater 2.0 Program </a><a href="#bookmark242">46</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark245" class="a">Creating Two Ways to Branch </a><a href="#bookmark245">47</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark246" class="a">Using a Sequence of if Statements with else Clauses </a><a href="#bookmark246">48</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark248" class="a">Introducing the Score Rater 3.0 Program </a><a href="#bookmark248">49</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark251" class="a">Creating a Sequence of if Statements with else Clauses </a><a href="#bookmark251">50</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark252" class="a">Using the switch Statement </a><a href="#bookmark252">51</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark254" class="a">Introducing the Menu Chooser Program </a><a href="#bookmark254">52</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark257" class="a">Creating Multiple Ways to Branch </a><a href="#bookmark257">54</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark258" class="a">Using while Loops </a><a href="#bookmark258">54</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark260" class="a">Introducing the Play Again Program </a><a href="#bookmark260">54</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark262" class="a">Looping with a while Loop </a><a href="#bookmark262">55</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark263" class="a">Using do Loops </a><a href="#bookmark263">56</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark265" class="a">Introducing the Play Again 2.0 Program </a><a href="#bookmark265">56</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark267" class="a">Looping with a do Loop </a><a href="#bookmark267">57</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark269" class="a">Using break and continue Statements </a><a href="#bookmark269">58</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark270" class="a">Introducing the Finicky Counter Program </a><a href="#bookmark270">58</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark272" class="a">Creating a while (true) Loop </a><a href="#bookmark272">60</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark274" class="a">Using the break Statement to Exit a Loop </a><a href="#bookmark274">60</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark275">Using the continue Statement to Jump Back</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark275" class="a">to the Top of a Loop </a><a href="#bookmark275">61</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark276">Understanding When to Use break and continue 61</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark279" class="a">Using Logical Operators </a><a href="#bookmark279">61</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark280" class="a">Introducing the Designers Network Program </a><a href="#bookmark280">62</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark282" class="a">Using the Logical AND Operator </a><a href="#bookmark282">65</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark284" class="a">Using the Logical OR Operator </a><a href="#bookmark284">66</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark286" class="a">Using the Logical NOT Operator </a><a href="#bookmark286">66</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark288" class="a">Understanding Order of Operations </a><a href="#bookmark288">67</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark289" class="a">Generating Random Numbers </a><a href="#bookmark289">68</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark291" class="a">Introducing the Die Roller Program </a><a href="#bookmark291">68</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark293" class="a">Calling the rand() Function </a><a href="#bookmark293">69</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark295" class="a">Seeding the Random Number Generator </a><a href="#bookmark295">70</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark297" class="a">Calculating a Number within a Range </a><a href="#bookmark297">71</a></p><p class="s19" style="padding-top: 2pt;padding-left: 391pt;text-indent: 0pt;text-align: left;"><a name="bookmark5">Contents ix</a></p><p style="padding-top: 22pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark298" class="a">Understanding the Game Loop </a><a href="#bookmark298">72</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark301" class="a">Introducing Guess My Number </a><a href="#bookmark301">73</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark302" class="a">Applying the Game Loop </a><a href="#bookmark302">74</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark304" class="a">Setting Up the Game </a><a href="#bookmark304">74</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark306" class="a">Creating the Game Loop </a><a href="#bookmark306">76</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark308" class="a">Wrapping Up the Game </a><a href="#bookmark308">76</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark309" class="a">Summary </a><a href="#bookmark309">76</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark311" class="a">Questions and Answers </a><a href="#bookmark311">78</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark314" class="a">Discussion Questions </a><a href="#bookmark314">80</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark315" class="a">Exercises </a><a href="#bookmark315">80</a></p><p style="padding-top: 19pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark355" class="s20">Chapter 3 For Loops, Strings, and Arrays: Word Jumble 81</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark357" class="a">Using for Loops </a><a href="#bookmark357">81</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark358" class="a">Introducing the Counter Program </a><a href="#bookmark358">82</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark361" class="a">Counting with for Loops </a><a href="#bookmark361">84</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark363" class="a">Using Empty Statements in for Loops </a><a href="#bookmark363">85</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark364" class="a">Nesting for Loops </a><a href="#bookmark364">86</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark366" class="a">Understanding Objects </a><a href="#bookmark366">87</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark369" class="a">Using String Objects </a><a href="#bookmark369">89</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark371" class="a">Introducing the String Tester Program </a><a href="#bookmark371">89</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark373" class="a">Creating string Objects </a><a href="#bookmark373">91</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark374" class="a">Concatenating string Objects </a><a href="#bookmark374">92</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark376" class="a">Using the size() Member Function </a><a href="#bookmark376">92</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark377" class="a">Indexing a string Object </a><a href="#bookmark377">93</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark379" class="a">Iterating through string Objects </a><a href="#bookmark379">93</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark380" class="a">Using the find() Member Function </a><a href="#bookmark380">94</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark382" class="a">Using the erase() Member Function </a><a href="#bookmark382">95</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark384" class="a">Using the empty() Member Function </a><a href="#bookmark384">96</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark385" class="a">Using Arrays </a><a href="#bookmark385">96</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark387" class="a">Introducing the Hero’s Inventory Program </a><a href="#bookmark387">96</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark390" class="a">Creating Arrays </a><a href="#bookmark390">98</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark392" class="a">Indexing Arrays </a><a href="#bookmark392">99</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark394" class="a">Accessing Member Functions of an Array Element </a><a href="#bookmark394">100</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark395" class="a">Being Aware of Array Bounds </a><a href="#bookmark395">100</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark397" class="a">Understanding C-Style Strings </a><a href="#bookmark397">101</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark399" class="a">Using Multidimensional Arrays </a><a href="#bookmark399">103</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark400" class="a">Introducing the Tic-Tac-Toe Board Program </a><a href="#bookmark400">103</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark402" class="a">Creating Multidimensional Arrays </a><a href="#bookmark402">105</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark404" class="a">Indexing Multidimensional Arrays </a><a href="#bookmark404">105</a></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">x Contents</a></p><p style="padding-top: 22pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark405" class="a">Introducing Word Jumble </a><a href="#bookmark405">106</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark407" class="a">Setting Up the Program </a><a href="#bookmark407">107</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark409" class="a">Picking a Word to Jumble </a><a href="#bookmark409">107</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark411" class="a">Jumbling the Word </a><a href="#bookmark411">108</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark412" class="a">Welcoming the Player </a><a href="#bookmark412">109</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark414" class="a">Entering the Game Loop </a><a href="#bookmark414">109</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark415" class="a">Saying Goodbye </a><a href="#bookmark415">110</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark418" class="a">Summary </a><a href="#bookmark418">110</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark420" class="a">Questions and Answers </a><a href="#bookmark420">111</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark423" class="a">Discussion Questions </a><a href="#bookmark423">113</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark424" class="a">Exercises </a><a href="#bookmark424">114</a></p><p style="padding-top: 19pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark470" class="s20">Chapter 4 The Standard Template Library: Hangman 115</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark472" class="a">Introducing the Standard Template Library </a><a href="#bookmark472">115</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark473" class="a">Using Vectors </a><a href="#bookmark473">116</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark476" class="a">Introducing the Hero’s Inventory 2.0 Program </a><a href="#bookmark476">117</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark478" class="a">Preparing to Use Vectors </a><a href="#bookmark478">119</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark480" class="a">Declaring a Vector </a><a href="#bookmark480">119</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark481" class="a">Using the push_back() Member Function </a><a href="#bookmark481">120</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark483" class="a">Using the size() Member Function </a><a href="#bookmark483">120</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark484" class="a">Indexing Vectors </a><a href="#bookmark484">121</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark486" class="a">Calling Member Functions of an Element </a><a href="#bookmark486">121</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark487" class="a">Using the pop_back() Member Function </a><a href="#bookmark487">122</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark488" class="a">Using the clear() Member Function </a><a href="#bookmark488">122</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark491" class="a">Using the empty() Member Function </a><a href="#bookmark491">122</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark492" class="a">Using Iterators </a><a href="#bookmark492">123</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark493" class="a">Introducing the Hero’s Inventory 3.0 Program </a><a href="#bookmark493">123</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark496" class="a">Declaring Iterators </a><a href="#bookmark496">125</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark498" class="a">Looping through a Vector </a><a href="#bookmark498">126</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark501" class="a">Changing the Value of a Vector Element </a><a href="#bookmark501">128</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark502" class="a">Accessing Member Functions of a Vector Element </a><a href="#bookmark502">129</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark504" class="a">Using the insert() Vector Member Function </a><a href="#bookmark504">130</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark506" class="a">Using the erase() Vector Member Function </a><a href="#bookmark506">130</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark507" class="a">Using Algorithms </a><a href="#bookmark507">131</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark509" class="a">Introducing the High Scores Program </a><a href="#bookmark509">131</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark511" class="a">Preparing to Use Algorithms </a><a href="#bookmark511">133</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark512" class="a">Using the find() Algorithm </a><a href="#bookmark512">134</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark514" class="a">Using the random_shuffle() Algorithm </a><a href="#bookmark514">134</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark515" class="a">Using the sort() Algorithm </a><a href="#bookmark515">135</a></p><p class="s19" style="padding-top: 2pt;padding-left: 391pt;text-indent: 0pt;text-align: left;"><a name="bookmark7">Contents xi</a></p><p style="padding-top: 22pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark517" class="a">Understanding Vector Performance </a><a href="#bookmark517">136</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark518" class="a">Examining Vector Growth </a><a href="#bookmark518">136</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark522" class="a">Examining Element Insertion and Deletion </a><a href="#bookmark522">138</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark525" class="a">Examining Other STL Containers </a><a href="#bookmark525">138</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark527" class="a">Planning Your Programs </a><a href="#bookmark527">139</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark528" class="a">Using Pseudocode </a><a href="#bookmark528">139</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark531">Using Stepwise Refinement 140</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark532" class="a">Introducing Hangman </a><a href="#bookmark532">141</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark535" class="a">Planning the Game </a><a href="#bookmark535">141</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark537" class="a">Setting Up the Program </a><a href="#bookmark537">142</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark538" class="a">Initializing Variables and Constants </a><a href="#bookmark538">143</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark540" class="a">Entering the Main Loop </a><a href="#bookmark540">143</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark541" class="a">Getting the Player’s Guess </a><a href="#bookmark541">144</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark543" class="a">Ending the Game </a><a href="#bookmark543">145</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark546" class="a">Summary </a><a href="#bookmark546">145</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark549" class="a">Questions and Answers </a><a href="#bookmark549">146</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark552" class="a">Discussion Questions </a><a href="#bookmark552">148</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark553" class="a">Exercises </a><a href="#bookmark553">148</a></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark603" class="s20">Chapter 5 Functions: Mad Lib 151</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark605" class="a">Creating Functions </a><a href="#bookmark605">151</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark606" class="a">Introducing the Instructions Program </a><a href="#bookmark606">152</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark608" class="a">Declaring Functions </a><a href="#bookmark608">153</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark610" class="a">Defining Functions </a><a href="#bookmark610">154</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark613" class="a">Calling Functions </a><a href="#bookmark613">154</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark614" class="a">Understanding Abstraction </a><a href="#bookmark614">155</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark616" class="a">Using Parameters and Return Values </a><a href="#bookmark616">155</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark617" class="a">Introducing the Yes or No Program </a><a href="#bookmark617">155</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark619" class="a">Returning a Value </a><a href="#bookmark619">157</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark621" class="a">Accepting Values into Parameters </a><a href="#bookmark621">158</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark623" class="a">Understanding Encapsulation </a><a href="#bookmark623">160</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark625" class="a">Understanding Software Reuse </a><a href="#bookmark625">161</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark627" class="a">Working with Scopes </a><a href="#bookmark627">161</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark628" class="a">Introducing the Scoping Program </a><a href="#bookmark628">161</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark630" class="a">Working with Separate Scopes </a><a href="#bookmark630">163</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark632" class="a">Working with Nested Scopes </a><a href="#bookmark632">165</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark635" class="a">Using Global Variables </a><a href="#bookmark635">166</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark638" class="a">Introducing the Global Reach Program </a><a href="#bookmark638">166</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark639" class="a">Declaring Global Variables </a><a href="#bookmark639">168</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark641" class="a">Accessing Global Variables </a><a href="#bookmark641">168</a></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark8">xii Contents</a></p><p style="padding-top: 22pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark642" class="a">Hiding Global Variables </a><a href="#bookmark642">169</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark644" class="a">Altering Global Variables </a><a href="#bookmark644">169</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark645" class="a">Minimizing the Use of Global Variables </a><a href="#bookmark645">170</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark646" class="a">Using Global Constants </a><a href="#bookmark646">170</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark648" class="a">Using Default Arguments </a><a href="#bookmark648">171</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark649" class="a">Introducing the Give Me a Number Program </a><a href="#bookmark649">171</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark652" class="a">Specifying Default Arguments </a><a href="#bookmark652">173</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark654" class="a">Assigning Default Arguments to Parameters </a><a href="#bookmark654">173</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark655" class="a">Overriding Default Arguments </a><a href="#bookmark655">174</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark658" class="a">Overloading Functions </a><a href="#bookmark658">174</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark659" class="a">Introducing the Triple Program </a><a href="#bookmark659">174</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark661" class="a">Creating Overloaded Functions </a><a href="#bookmark661">176</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark663" class="a">Calling Overloaded Functions </a><a href="#bookmark663">177</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark664" class="a">Inlining Functions </a><a href="#bookmark664">177</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark667" class="a">Introducing the Taking Damage Program </a><a href="#bookmark667">177</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark668" class="a">Specifying Functions for Inlining </a><a href="#bookmark668">179</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark670" class="a">Calling Inlined Functions </a><a href="#bookmark670">179</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark671" class="a">Introducing the Mad Lib Game </a><a href="#bookmark671">180</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark673" class="a">Setting Up the Program </a><a href="#bookmark673">181</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark675" class="a">The main() Function </a><a href="#bookmark675">181</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark676" class="a">The askText() Function </a><a href="#bookmark676">182</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark678" class="a">The askNumber() Function </a><a href="#bookmark678">182</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark679" class="a">The tellStory() Function </a><a href="#bookmark679">183</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark681" class="a">Summary </a><a href="#bookmark681">183</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark684" class="a">Questions and Answers </a><a href="#bookmark684">184</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark687" class="a">Discussion Questions </a><a href="#bookmark687">186</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark689" class="a">Exercises </a><a href="#bookmark689">186</a></p><p style="padding-top: 13pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark732" class="s20">Chapter 6 References: Tic-Tac-Toe 187</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark734" class="a">Using References </a><a href="#bookmark734">187</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark735" class="a">Introducing the Referencing Program </a><a href="#bookmark735">187</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark736" class="a">Creating References </a><a href="#bookmark736">189</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark738" class="a">Accessing Referenced Values </a><a href="#bookmark738">190</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark740">Altering Referenced Values 190</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark741" class="a">Passing References to Alter Arguments </a><a href="#bookmark741">191</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark743" class="a">Introducing the Swap Program </a><a href="#bookmark743">191</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark746" class="a">Passing by Value </a><a href="#bookmark746">193</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark747" class="a">Passing by Reference </a><a href="#bookmark747">194</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark749">Passing References for Efficiency 195</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark750" class="a">Introducing the Inventory Displayer Program </a><a href="#bookmark750">195</a></p><p class="s19" style="padding-top: 2pt;padding-left: 391pt;text-indent: 0pt;text-align: left;"><a name="bookmark9">Contents xiii</a></p><p style="padding-top: 22pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark753" class="a">Understanding the Pitfalls of Reference Passing </a><a href="#bookmark753">196</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark754" class="a">Declaring Parameters as Constant References </a><a href="#bookmark754">197</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark756" class="a">Passing a Constant Reference </a><a href="#bookmark756">197</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark757" class="a">Deciding How to Pass Arguments </a><a href="#bookmark757">198</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark759" class="a">Returning References </a><a href="#bookmark759">198</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark760" class="a">Introducing the Inventory Referencer Program </a><a href="#bookmark760">199</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark763" class="a">Returning a Reference </a><a href="#bookmark763">200</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark765" class="a">Displaying the Value of a Returned Reference </a><a href="#bookmark765">201</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark766" class="a">Assigning a Returned Reference to a Reference </a><a href="#bookmark766">202</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark767" class="a">Assigning a Returned Reference to a Variable </a><a href="#bookmark767">202</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark769" class="a">Altering an Object through a Returned Reference </a><a href="#bookmark769">202</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark770" class="a">Introducing the Tic-Tac-Toe Game </a><a href="#bookmark770">203</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark772" class="a">Planning the Game </a><a href="#bookmark772">203</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark775" class="a">Setting Up the Program </a><a href="#bookmark775">205</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark777" class="a">The main() Function </a><a href="#bookmark777">207</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark779" class="a">The instructions() Function </a><a href="#bookmark779">208</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark781" class="a">The askYesNo() Function </a><a href="#bookmark781">208</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark782" class="a">The askNumber() Function </a><a href="#bookmark782">209</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark784" class="a">The humanPiece() Function </a><a href="#bookmark784">209</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark785" class="a">The opponent() Function </a><a href="#bookmark785">210</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark787" class="a">The displayBoard() Function </a><a href="#bookmark787">210</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark788" class="a">The winner() Function </a><a href="#bookmark788">211</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark791" class="a">The isLegal() Function </a><a href="#bookmark791">212</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark792" class="a">The humanMove() Function </a><a href="#bookmark792">213</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark794" class="a">The computerMove() Function </a><a href="#bookmark794">213</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark796" class="a">The announceWinner() Function </a><a href="#bookmark796">217</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark799" class="a">Summary </a><a href="#bookmark799">217</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark801" class="a">Questions and Answers </a><a href="#bookmark801">218</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark804" class="a">Discussion Questions </a><a href="#bookmark804">220</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark805" class="a">Exercises </a><a href="#bookmark805">221</a></p><p style="padding-top: 14pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark840" class="s20">Chapter 7 Pointers: Tic-Tac-Toe 2.0 223</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark842" class="a">Understanding Pointer Basics </a><a href="#bookmark842">223</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark843" class="a">Introducing the Pointing Program </a><a href="#bookmark843">224</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark845" class="a">Declaring Pointers </a><a href="#bookmark845">226</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark848" class="a">Initializing Pointers </a><a href="#bookmark848">227</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark851" class="a">Assigning Addresses to Pointers </a><a href="#bookmark851">227</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark854" class="a">Dereferencing Pointers </a><a href="#bookmark854">228</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark857" class="a">Reassigning Pointers </a><a href="#bookmark857">229</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark858" class="a">Using Pointers to Objects </a><a href="#bookmark858">230</a></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark10">xiv Contents</a></p><p style="padding-top: 22pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark860" class="a">Understanding Pointers and Constants </a><a href="#bookmark860">231</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark861" class="a">Using a Constant Pointer </a><a href="#bookmark861">231</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark863" class="a">Using a Pointer to a Constant </a><a href="#bookmark863">232</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark865" class="a">Using a Constant Pointer to a Constant </a><a href="#bookmark865">233</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark866" class="a">Summarizing Constants and Pointers </a><a href="#bookmark866">234</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark868" class="a">Passing Pointers </a><a href="#bookmark868">234</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark869" class="a">Introducing the Swap Pointer Version Program </a><a href="#bookmark869">234</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark871" class="a">Passing by Value </a><a href="#bookmark871">236</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark872" class="a">Passing a Constant Pointer </a><a href="#bookmark872">237</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark875" class="a">Returning Pointers </a><a href="#bookmark875">238</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark876" class="a">Introducing the Inventory Pointer Program </a><a href="#bookmark876">239</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark879" class="a">Returning a Pointer </a><a href="#bookmark879">240</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark881" class="a">Using a Returned Pointer to Display a Value </a><a href="#bookmark881">241</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark882" class="a">Assigning a Returned Pointer to a Pointer </a><a href="#bookmark882">242</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark884">Assigning to a Variable the Value Pointed</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark884" class="a">to by a Returned Pointer </a><a href="#bookmark884">242</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark886" class="a">Altering an Object through a Returned Pointer </a><a href="#bookmark886">243</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark887" class="a">Understanding the Relationship between Pointers and </a><a href="#bookmark887">Arrays 244</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark889" class="a">Introducing the Array Passer Program </a><a href="#bookmark889">244</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark890" class="a">Using an Array Name as a Constant Pointer </a><a href="#bookmark890">246</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark892" class="a">Passing and Returning Arrays </a><a href="#bookmark892">247</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark894" class="a">Introducing the Tic-Tac-Toe 2.0 Game </a><a href="#bookmark894">248</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark897" class="a">Summary </a><a href="#bookmark897">248</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark900" class="a">Questions and Answers </a><a href="#bookmark900">250</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark903" class="a">Discussion Questions </a><a href="#bookmark903">252</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark904" class="a">Exercises </a><a href="#bookmark904">252</a></p><p style="padding-top: 19pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark937" class="s20">Chapter 8 Classes: Critter Caretaker 255</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark939" class="a">Defining New Types </a><a href="#bookmark939">255</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark940" class="a">Introducing the Simple Critter Program </a><a href="#bookmark940">256</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark943" class="a">Defining a Class </a><a href="#bookmark943">257</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark946" class="a">Defining Member Functions </a><a href="#bookmark946">258</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark947" class="a">Instantiating Objects </a><a href="#bookmark947">259</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark950" class="a">Accessing Data Members </a><a href="#bookmark950">259</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark951">Calling Member Functions 260</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark953" class="a">Using Constructors </a><a href="#bookmark953">260</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark954" class="a">Introducing the Constructor Critter Program </a><a href="#bookmark954">261</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark957" class="a">Declaring and Defining a Constructor </a><a href="#bookmark957">262</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark959" class="a">Calling a Constructor Automatically </a><a href="#bookmark959">263</a></p><p class="s19" style="padding-top: 2pt;padding-left: 391pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">Contents xv</a></p><p style="padding-top: 22pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark960" class="a">Setting Member Access Levels </a><a href="#bookmark960">264</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark961" class="a">Introducing the Private Critter Program </a><a href="#bookmark961">264</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark964" class="a">Specifying Public and Private Access Levels </a><a href="#bookmark964">266</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark966" class="a">Defining Accessor Member Functions </a><a href="#bookmark966">267</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark968" class="a">Defining Constant Member Functions </a><a href="#bookmark968">268</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark970" class="a">Using Static Data Members and Member Functions </a><a href="#bookmark970">269</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark971">Introducing the Static Critter Program 270</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark974" class="a">Declaring and Initializing Static Data Members </a><a href="#bookmark974">272</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark976">Accessing Static Data Members 272</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark977" class="a">Declaring and Defining Static Member Functions </a><a href="#bookmark977">273</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark980" class="a">Calling Static Member Functions </a><a href="#bookmark980">273</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark981" class="a">Introducing the Critter Caretaker Game </a><a href="#bookmark981">274</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark983" class="a">Planning the Game </a><a href="#bookmark983">275</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark987" class="a">Planning the Pseudocode </a><a href="#bookmark987">276</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark988" class="a">The Critter Class </a><a href="#bookmark988">277</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark994" class="a">The main() Function </a><a href="#bookmark994">280</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark996" class="a">Summary </a><a href="#bookmark996">281</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark999" class="a">Questions and Answers </a><a href="#bookmark999">283</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1003" class="a">Discussion Questions </a><a href="#bookmark1003">285</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1004" class="a">Exercises </a><a href="#bookmark1004">285</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:38.639pt" cellspacing="0"><tr style="height:13pt"><td style="width:47pt"><p style="padding-left: 2pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark1037" class="s16">Chapter</a></p></td><td style="width:19pt"><p style="padding-left: 3pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark1037" class="s16">9</a></p></td><td style="width:307pt"><p style="padding-left: 9pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="#bookmark1037" class="s16">Advanced Classes and Dynamic Memory:</a></p></td><td style="width:24pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:15pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-left: 9pt;text-indent: 0pt;line-height: 12pt;text-align: left;"><a href="#bookmark1037" class="s16">Game Lobby . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;line-height: 12pt;text-align: right;"><a href="#bookmark1037" class="s16">287</a></p></td></tr><tr style="height:15pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-top: 1pt;padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1039" class="s17">Using Aggregation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-top: 1pt;padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1039" class="s17">287</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1040" class="s17">Introducing the Critter Farm Program . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1040" class="s17">288</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1043" class="s17">Using Object Data Members . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1043" class="s17">290</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1045" class="s17">Using Container Data Members . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1045" class="s17">291</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1047" class="s17">Using Friend Functions and Operator Overloading . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1047" class="s17">292</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1048" class="s17">Introducing the Friend Critter Program . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1048" class="s17">292</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1050" class="s17">Creating Friend Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1050" class="s17">295</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1053" class="s17">Overloading Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1053" class="s17">295</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1056" class="s17">Dynamically Allocating Memory . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1056" class="s17">296</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1057" class="s17">Introducing the Heap Program . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1057" class="s17">297</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1059" class="s17">Using the new Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1059" class="s17">299</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1062" class="s17">Using the delete Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1062" class="s17">300</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1064" class="s17">Avoiding Memory Leaks . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1064" class="s17">301</a></p></td></tr><tr style="height:14pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-right: 3pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1065" class="s17">Working with Data Members and the Heap . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-right: 2pt;text-indent: 0pt;text-align: right;"><a href="#bookmark1065" class="s17">303</a></p></td></tr><tr style="height:40pt"><td style="width:47pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:19pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:307pt"><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1067" class="s17">Introducing the Heap Data Member Program . . . . . . . . . . . . .</a></p><p style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1068" class="s17">Declaring Data Members that Point to</a></p><p style="padding-top: 3pt;padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1068" class="s17">Values on the Heap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</a></p></td><td style="width:24pt"><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1067" class="s17">303</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1068" class="s17">307</a></p></td></tr></table><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">xvi Contents</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1070" class="a">Declaring and Defining Destructors </a><a href="#bookmark1070">308</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1073" class="a">Declaring and Defining Copy Constructors </a><a href="#bookmark1073">309</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1077" class="a">Overloading the Assignment Operator </a><a href="#bookmark1077">313</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1081" class="a">Introducing the Game Lobby Program </a><a href="#bookmark1081">315</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1083" class="a">The Player Class </a><a href="#bookmark1083">316</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1085" class="a">The Lobby Class </a><a href="#bookmark1085">318</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1087" class="a">The Lobby::AddPlayer() Member Function </a><a href="#bookmark1087">320</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1089" class="a">The Lobby::RemovePlayer() Member Function </a><a href="#bookmark1089">322</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1091" class="a">The Lobby::Clear() Member Function </a><a href="#bookmark1091">322</a></p><p style="padding-top: 2pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1093" class="a">The operator</a><a href="#bookmark1093" class="s21">&lt;&lt;</a><a href="#bookmark1093" class="a">() Member Function </a><a href="#bookmark1093">323</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1095" class="a">The main() Function </a><a href="#bookmark1095">324</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1098" class="a">Summary </a><a href="#bookmark1098">325</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1100" class="a">Questions and Answers </a><a href="#bookmark1100">326</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1101" class="a">Discussion Questions </a><a href="#bookmark1101">328</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1102" class="a">Exercises </a><a href="#bookmark1102">328</a></p><p style="padding-top: 13pt;padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1144" class="s20">Chapter 10 Inheritance and Polymorphism: Blackjack 331</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1146" class="a">Introducing Inheritance </a><a href="#bookmark1146">331</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1148">Introducing the Simple Boss Program 333</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1151" class="a">Deriving from a Base Class </a><a href="#bookmark1151">335</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1153" class="a">Instantiating Objects from a Derived Class </a><a href="#bookmark1153">336</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1154" class="a">Using Inherited Members </a><a href="#bookmark1154">337</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1156" class="a">Controlling Access under Inheritance </a><a href="#bookmark1156">337</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1157" class="a">Introducing the Simple Boss 2.0 Program </a><a href="#bookmark1157">338</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1161" class="a">Using Access Modifiers with Class Members </a><a href="#bookmark1161">339</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1162" class="a">Using Access Modifiers when Deriving Classes </a><a href="#bookmark1162">340</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1165" class="a">Calling and Overriding Base Class Member Functions </a><a href="#bookmark1165">340</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1166" class="a">Introducing the Overriding Boss Program </a><a href="#bookmark1166">341</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1170" class="a">Calling Base Class Constructors </a><a href="#bookmark1170">343</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1171" class="a">Declaring Virtual Base Class Member Functions </a><a href="#bookmark1171">344</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1174" class="a">Overriding Virtual Base Class Member Functions </a><a href="#bookmark1174">344</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1176" class="a">Calling Base Class Member Functions </a><a href="#bookmark1176">345</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1178">Using Overloaded Assignment Operators and</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1178" class="a">Copy Constructors in Derived Classes </a><a href="#bookmark1178">346</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1179" class="a">Introducing Polymorphism </a><a href="#bookmark1179">347</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1181" class="a">Introducing the Polymorphic Bad Guy Program </a><a href="#bookmark1181">347</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1182" class="a">Using Base Class Pointers to Derived Class Objects </a><a href="#bookmark1182">350</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1185" class="a">Defining Virtual Destructors </a><a href="#bookmark1185">351</a></p><p style="padding-top: 3pt;padding-left: 106pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1187" class="a">Using Abstract Classes </a><a href="#bookmark1187">352</a></p><p style="padding-top: 3pt;padding-left: 120pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1188" class="a">Introducing the Abstract Creature Program </a><a href="#bookmark1188">352</a></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark13">Contents xvii</a></p><p style="padding-top: 22pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1190" class="a">Declaring Pure Virtual Functions </a><a href="#bookmark1190">354</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1191" class="a">Deriving a Class from an Abstract Class </a><a href="#bookmark1191">355</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1193" class="a">Introducing the Blackjack Game </a><a href="#bookmark1193">356</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1195" class="a">Designing the Classes </a><a href="#bookmark1195">356</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1199" class="a">Planning the Game Logic </a><a href="#bookmark1199">360</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1201" class="a">The Card Class </a><a href="#bookmark1201">361</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1203" class="a">The Hand Class </a><a href="#bookmark1203">363</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1206" class="a">The GenericPlayer Class </a><a href="#bookmark1206">366</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1208" class="a">The Player Class </a><a href="#bookmark1208">368</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1211" class="a">The House Class </a><a href="#bookmark1211">369</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1213" class="a">The Deck Class </a><a href="#bookmark1213">370</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1216" class="a">The Game Class </a><a href="#bookmark1216">373</a></p><p style="padding-top: 3pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1218" class="a">The main() Function </a><a href="#bookmark1218">376</a></p><p style="padding-top: 2pt;padding-left: 128pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1220" class="a">Overloading the operator</a><a href="#bookmark1220" class="s21">&lt;&lt;</a><a href="#bookmark1220" class="a">() Function </a><a href="#bookmark1220">377</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1221" class="a">Summary </a><a href="#bookmark1221">379</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1225" class="a">Questions and Answers </a><a href="#bookmark1225">380</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1227" class="a">Discussion Questions </a><a href="#bookmark1227">382</a></p><p style="padding-top: 3pt;padding-left: 114pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1229" class="a">Exercises </a><a href="#bookmark1229">382</a></p><p style="padding-top: 17pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1231" class="s20">Appendix A Creating Your First C++ Program 383</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1238" class="s20">Appendix B Operator Precedence 389</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1242" class="s20">Appendix C Keywords 391</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1246" class="s20">Appendix D ASCII Chart 393</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1250" class="s20">Appendix E Escape Sequences 397</a></p><p style="padding-top: 17pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1276" class="s20">Index 399</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="212" height="259" alt="image" src="Image_011.gif"/></span></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="s22" name="bookmark14">Introduction</a><a name="bookmark15">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;">Cutting-edge computer games rival the best that Hollywood has to offer in visual effects, musical score, and pure adrenaline rush. But games are a form of enter- tainment unlike any other; they can keep players glued to their monitors for hours on end. What sets games apart and makes them so engrossing is interactivity. In a computer game, you don<span class="s12">’</span>t simply sit back and watch a hero ﬁghting against all odds, you <span class="s11">become </span>the hero.</p><p style="padding-top: 5pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The key to achieving this interactivity is programming. It<span class="s12">’</span>s programming that allows an alien creature, an attack squadron, or an entire army to react differently to a player in different situations. Through programming, a game<span class="s12">’</span>s story can unfold in new ways. In fact, as the result of programming, a game can respond to a player in ways that the game creators might never have imagined.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;">Although there are literally thousands of computer programming languages, C<span class="s14">þþ </span>is the game industry standard. If you were to wander the PC game section of your favorite store and grab a title at random, the odds are overwhelming that the game in your hand would be written largely or exclusively in C<span class="s14">þþ</span>. The bottom line is this: If you want to program computer games professionally, you must know C<span class="s14">þþ</span>.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;">The goal of this book is to introduce you to the C<span class="s14">þþ </span>language from a game programming perspective. Although no single book can make you the master of two deep topics such as C<span class="s14">þþ </span>and game programming, this book will start you on your journey.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">xviii</p><p class="s19" style="padding-top: 2pt;padding-left: 374pt;text-indent: 0pt;text-align: left;">Introduction xix</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a2">Who This Book Is For</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This book is for anyone who wants to program games. It<span class="s12">’</span>s aimed at the total beginner and assumes no previous programming experience. If you<span class="s12">’</span>re comfor- table using your computer, then you can start your game programming odyssey right here. But just because this book is written for the beginner, that doesn<span class="s12">’</span>t mean learning C<span class="s14">þþ </span>and game programming will be easy. You<span class="s12">’</span>ll have to read, work, and experiment. By the end of this book, you<span class="s12">’</span>ll have a solid foundation in the game programming language of the professionals.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a3">How This Book Is Organized</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I start at the very beginning of C<span class="s14">þþ </span>and game programming, assuming no experience in either. As the chapters progress, I cover more advanced topics, building on previous material.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In each chapter, I cover one or several related topics. I move through concepts one step at a time by writing bite-sized, game-related programs to demonstrate each idea. At the end of each chapter, I combine some of the most important concepts in a single game. The last chapter of the book ends with the most ambitious project<span class="s12">—</span>one that harnesses all of the major concepts presented throughout the book.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In addition to learning about C<span class="s14">þþ </span>and game programming, you<span class="s12">’</span>ll also learn how to organize your work, break down problems into manageable chunks, and reﬁne your code. You<span class="s12">’</span>ll be challenged at times, but never overwhelmed. Most of all, you<span class="s12">’</span>ll have fun while learning. In the process, you<span class="s12">’</span>ll create some cool computer games and gain insight into the craft of game programming.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><b>Chapter 1: Types, Variables, and Standard I/O: Lost Fortune. </b>You<span class="s12">’</span>ll be introduced to the fundamentals of C<span class="s14">þþ</span>, the standard language of the game industry. You<span class="s12">’</span>ll learn to display output in a console window, perform arithmetic computations, use variables, and get player input from the keyboard.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 2: Truth, Branching, and the Game Loop: Guess My Number. </b>You<span class="s12">’</span>ll create more interesting games by writing programs that execute, skip, or repeat sections of code based on some condition. You<span class="s12">’</span>ll learn how to generate random numbers to add some unpredictability to your games. And you<span class="s12">’</span>ll learn about the Game Loop<span class="s12">—</span>a fundamental way to organize your games to keep the action going.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">xx Introduction</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 3: For Loops, Strings, and Arrays: Word Jumble. </b>You<span class="s12">’</span>ll learn about sequences and work with strings<span class="s12">—</span>sequences of characters that are perfect for word games. You also learn about software objects<span class="s12">—</span>entities that can be used to represent objects in your games, such as alien spacecrafts, healing potions, or even the player himself.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 4: The Standard Template Library: Hangman. </b>You<span class="s12">’</span>ll be introduced to a powerful library<span class="s12">—</span>a toolbox that game programmers (and even non-game programmers) rely on to hold collections of things, such as items in a player<span class="s12">’</span>s inventory. You<span class="s12">’</span>ll also learn about techniques that can help you plan larger game programs.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 5: Functions: Mad Lib. </b>You<span class="s12">’</span>ll learn to break up your game programs into smaller, more manageable chunks of code. You<span class="s12">’</span>ll accomplish this by dis- covering functions, the fundamental units of logic in your game programs.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;"><b>Chapter 6: References: Tic-Tac-Toe. </b>You<span class="s12">’</span>ll learn how to share information with different parts of your programs in an efﬁcient and clear manner. You<span class="s12">’</span>ll also see a brief example of AI (<span class="s11">arti</span><span class="s12">ﬁ</span><span class="s11">cial intelligence</span>) and you<span class="s12">’</span>ll learn how to give a computer opponent a little bit of personality.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;text-align: justify;"><b>Chapter 7: Pointers: Tic-Tac-Toe 2.0. </b>You<span class="s12">’</span>ll begin to discover some of the most low-level and powerful features of C<span class="s14">þþ</span>, such as how to directly address and manipulate your computer<span class="s12">’</span>s memory.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 8: Classes: Critter Caretaker. </b>You<span class="s12">’</span>ll learn how to create your own kinds of objects and deﬁne the ways they<span class="s12">’</span>ll interact with each other through object- oriented programming. In the process, you<span class="s12">’</span>ll create your very own critter to care for.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 9: Advanced Classes and Dynamic Memory: Game Lobby. </b>You<span class="s12">’</span>ll expand on your direct connection with the computer and learn to acquire and free memory as your game programs require. You<span class="s12">’</span>ll also see the pitfalls of using this <span class="s12">“</span>dynamic<span class="s12">” </span>memory and how to avoid them.</p><p style="padding-top: 6pt;padding-left: 33pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><b>Chapter 10: Inheritance and Polymorphism: Blackjack. </b>You<span class="s12">’</span>ll learn how to deﬁne objects in terms of other objects. Then you<span class="s12">’</span>ll pull everything you<span class="s12">’</span>ve learned together into one big ﬁnal game. You<span class="s12">’</span>ll see how a sizeable project is designed and implemented by creating a version of the classic casino game of Blackjack (tacky green felt not included).</p><p class="s19" style="padding-top: 2pt;padding-left: 374pt;text-indent: 0pt;text-align: left;">Introduction xxi</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a4">Conventions Used in This Book</a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Throughout the book, I<span class="s12">’</span>ll throw in a few other tidbits. For example, I italicize any <span class="s11">new term </span>and explain what it means. I also use a number of special elements, including the following:</p><p class="s24" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_012.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">These are good ideas that will help you become a better game programmer.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_013.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_014.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">These point out areas where it’s easy to make a mistake.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_015.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_016.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">These suggest techniques and shortcuts that will make your life as a game programmer easier.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_017.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_018.png"/></span></p><p class="s25" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">These are facts about the real world of game programming.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a5">Source Code for the Programs in this Book</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">All of the source code in this book is available online at www.courseptr.com/ </a>downloads. You can search for the book by ISBN (the book<span class="s12">’</span>s identiﬁcation number), which is 1435457420.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a6">A Word about Compilers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I might be getting a little ahead of myself here by talking about compilers, but the issue is important because a <span class="s11">compiler </span>is what translates the source code you write into a program that your computer can run. I recommend that you use Microsoft<span class="s12">’</span>s Visual C<span class="s14">þþ </span>2010 Express Edition, if you<span class="s12">’</span>re running Windows, since it includes a modern C<span class="s14">þþ </span>compiler<span class="s12">—</span>and is free. Once you<span class="s12">’</span>ve installed the soft- ware, check out Appendix A in this book, <span class="s12">“</span>Creating Your First C<span class="s14">þþ </span>Program,<span class="s12">” </span>which explains how to compile a C<span class="s14">þþ </span>program using Visual C<span class="s14">þþ </span>2010 Express Edition. If you<span class="s12">’</span>re using another compiler or IDE, check its documentation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;"><a name="bookmark16">This page intentionally left blank</a></p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="s27" name="bookmark17">chapter 1</a><a name="bookmark74">&zwnj;</a><a name="bookmark75">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_020.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="s28" name="bookmark18">Types, Variables, and Standard I/O: Lost Fortune</a><a name="bookmark76">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Game programming is demanding. It pushes both programmer and hardware to their limits. But it can also be extremely satisfying. In this chapter, you<span class="s12">’</span>ll be introduced to the fundamentals of C<span class="s14">þþ</span>, the standard language for AAA game titles. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Display output in a console window</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Perform arithmetic computations</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use variables to store, manipulate, and retrieve data</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Get user input</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Work with constants and enumerations</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Work with strings</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark1" class="s30" name="a7">Introducing C</a><a href="#bookmark1" class="s31">þþ</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C<span class="s14">þþ </span>is leveraged by millions of programmers around the world. It<span class="s12">’</span>s one of the most popular languages for writing computer applications<span class="s12">—</span>and <span class="s11">the </span>most popular language for writing big-budget computer games.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Created by Bjarne Stroustrup, C<span class="s14">þþ </span>is a direct descendant of the C language. In fact, C<span class="s14">þþ </span>retains almost all of C as a subset. However, C<span class="s14">þþ </span>offers better ways to do things and some brand-new capabilities, too.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">1</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark19">2 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark77">&zwnj;</a><a name="bookmark78">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark1" class="h1" name="a8">Using C</a><a href="#bookmark1" class="s33">þþ </a><h1 href="#bookmark1">for Games</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There are a variety of reasons why game programmers choose C<span class="s14">þþ</span>. Here are a few:</p><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>It</b><span class="s34">’</span><b>s fast. </b>Well-written C<span class="s14">þþ </span>programs can be blazingly fast. One of C<span class="s14">þþ</span><span class="s12">’</span>s design goals is performance. And if you need to squeeze out even more performance from your programs, C<span class="s14">þþ </span>allows you to use <span class="s11">assembly language</span><span class="s12">—</span>the lowest-level, human-readable programming language<span class="s12">—</span>to communicate directly with the computer<span class="s12">’</span>s hardware.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><a name="bookmark20"><span class="s29">n </span></a><b>It</b><span class="s34">’</span><b>s flexible. </b>C<span class="s14">þþ </span>is a multi-paradigm language that supports different styles of programming, including <span class="s11">object-oriented programming</span>. Unlike some other modern languages, though, C<span class="s14">þþ </span>doesn<span class="s12">’</span>t force one particular style on a programmer.<a name="bookmark79">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>It</b><span class="s34">’</span><b>s well-supported. </b>Because of its long history in the game industry, there<span class="s12">’</span>s a large pool of assets available to the C<span class="s14">þþ </span>game programmer, including graphics APIs and 2D, 3D, physics, and sound engines. All of this pre-exiting code can be leveraged by a C<span class="s14">þþ </span>programmer to greatly speed up the process of writing a new game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a9"><h1 href="#bookmark1">Creating an Executable File</h1></a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 94%;text-align: justify;">The file that you run to launch a program<span class="s12">—</span>whether you<span class="s12">’</span>re talking about a game or a business application<span class="s12">—</span>is an <span class="s11">executable file</span>. There are several steps to creating an executable file from C<span class="s14">þþ </span><span class="s11">source code </span>(a collection of instructions in the C<span class="s14">þþ </span>language). The process is illustrated in Figure 1.1.</p><ol id="l1"><li><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">First, the programmer uses an <span class="s11">editor </span>to write the C<span class="s14">þþ </span>source code, a file that usually has the extension <span class="s35">.cpp</span>. The editor is like a word</p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">processor for programs; it allows a programmer to create, edit, and save source code.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 93%;text-align: left;">After the programmer saves a source file, he or she invokes a C<span class="s14">þþ </span><span class="s11">compiler</span><span class="s12">—</span>an application that reads source code and translates it into an <span class="s11">object file</span>. Object files usually have the extension .obj.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Next, a linker links the object file to any external files as necessary, and then creates the executable file, which generally ends with the extension</p></li></ol><p class="s19" style="padding-top: 2pt;padding-left: 353pt;text-indent: 0pt;text-align: left;"><a name="bookmark80">Introducing C</a><span class="s36">þþ </span>3</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">.exe. At this point, a user (or gamer) can run the program by launching the executable file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="98" height="423" alt="image" src="Image_021.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Figure 1.1</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The creation of an executable file from C<span class="s36">þþ </span>source code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_022.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The process I’ve described is the simple case. Creating a complex application in C<span class="s36">þþ </span>often involves multiple source code files written by a programmer (or even a team of programmers).</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_023.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">To help automate this process, it<span class="s12">’</span>s common for a programmer to use an all-in- one tool for development, called an IDE (<span class="s11">Integrated Development Environment</span>). An IDE typically combines an editor, a compiler, and a linker, along with other</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark21">4 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark81">&zwnj;</a><a name="bookmark82">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">tools. A popular (and free) IDE for Windows is Microsoft<span class="s12">’</span>s Visual C<span class="s14">þþ </span><a href="http://www.microsoft.com/express/" class="s15" target="_blank">Express Edition. You can find out more about this IDE (and download a copy) at http:// www.microsoft.com/express/.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a10"><h1 href="#bookmark1">Dealing with Errors</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When I described the process for creating an executable from C<span class="s14">þþ </span>source, I left out one minor detail<span class="s12">—</span>errors. If to err is human, then programmers are the most human of us. Even the best programmers write code that generates errors the first (or fifth) time through. Programmers must fix the errors and start the entire process over. Here are the basic types of errors you<span class="s12">’</span>ll run into as you program in C<span class="s14">þþ</span>:</p><p style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Compile errors. </b>These occur during code compilation. As a result, an object file is not produced. These can be <span class="s11">syntax errors</span>, meaning that the compiler doesn<span class="s12">’</span>t understand something. They<span class="s12">’</span>re often caused by some- thing as simple as a typo. Compilers can issue warnings, too. Although you usually don<span class="s12">’</span>t have to heed the warnings, you should treat them as errors, fix them, and recompile.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>Link errors. </b>These occur during the linking process and may indicate that something the program references externally can<span class="s12">’</span>t be found. These errors are usually solved by adjusting the offending reference and starting the compile/link process again.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Run-time errors. </b>These occur when the executable is run. If the program does something illegal, it can crash abruptly. But a more subtle form of run-time error, a <span class="s11">logical error</span>, can make the program simply behave in unintended ways. If you<span class="s12">’</span>ve ever played a game where a character walked on air (that is, a character who shouldn<span class="s12">’</span>t be able to walk on air), then you<span class="s12">’</span>ve seen a logical error in action.</p><p class="s24" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_024.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Like other software creators, game companies work hard to produce bug-free products. Their last line of defense is the quality assurance personnel (the game testers). Game testers play games for a living, but their jobs are not as fun as you might think. Testers must play the same parts of a game over and over—perhaps hundreds of times—trying the unexpected and meticulously recording any anomalies. On top of monotonous work, the pay ain’t great either. But being a tester is a terrific way to get into a game company on the proverbial bottom rung.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_025.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark22">Writing Your First C</a><span class="s36">þþ </span>Program 5<a name="bookmark83">&zwnj;</a><a name="bookmark84">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a11"><h1 href="#bookmark1">Understanding the ISO Standard</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s11">ISO standard </span>for C<span class="s14">þþ </span>is a definition of C<span class="s14">þþ </span>that describes exactly how the language should work. It also defines a group of files, called the <span class="s11">standard library</span>, that contain building blocks for common programming tasks, such as <span class="s11">I/O</span><span class="s12">— </span>getting input and displaying output. The standard library makes life easier for programmers and provides fundamental code to save them from reinventing the wheel. I<span class="s12">’</span>ll be using the standard library in all of the programs in this book.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark23">Hin t</a><a name="bookmark85">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_026.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark24">The ISO standard is often called the </a><i>ANSI standard </i>or <i>ANSI/ISO standard</i>. These different names involve the acronyms of the various committees that have reviewed and established the standard. The most common way to refer to C<span class="s36">þþ </span>code that conforms to the ISO standard is simply <i>Standard C</i><span class="s39">þþ</span>.<a name="bookmark86">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_027.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">I used Microsoft<span class="s12">’</span>s Visual C<span class="s14">þþ </span>2010 Express Edition to develop the programs in this book. The compiler that<span class="s12">’</span>s a part of this IDE is pretty faithful to the ISO standard, so you should be able to compile, link, and run all of the programs using some other modern compiler as well. However, if you<span class="s12">’</span>re using Windows, I recommend using Visual C<span class="s14">þþ</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_028.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">For step-by-step instructions on how to create, save, compile, and run the Game Over program using Microsoft Visual C<span class="s36">þþ </span>2010 Express Edition, check out Appendix A. If you’re using another compiler or IDE, check its documentation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_029.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="s30" name="a12">Writing Your First C</a><a href="#bookmark1" class="s31">þþ </a><a href="#bookmark1" class="s30">Program</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Okay, enough theory. It<span class="s12">’</span>s time to get down to the nitty-gritty and write your first C<span class="s14">þþ </span>program. Although it is simple, the following program shows you the basic anatomy of a program. It also demonstrates how to display text in a console window.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="h1" name="a13">Introducing the Game Over </a><h1 href="#bookmark1">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The classic first task a programmer tackles in a new language is the Hello World program, which displays <span class="s35">Hello World </span>on the screen. The Game Over program</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark87">6 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">puts a gaming twist on the classic and displays <span class="s35">Game Over! </span>instead. Figure 1.2 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_030.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Figure 1.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Your first C<span class="s36">þþ </span>program displays the two most infamous words in computer gaming.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_over.cpp</span>.</p><p class="s24" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_031.png"/></span></p><p class="s35" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s54" target="_blank">You  can  download  all  of  the  source  code  for  the  programs  in  this  book  by  visiting  </a><a href="http://www.courseptr.com/downloads" class="a" target="_blank">www. courseptr.com/downloads</a> <span class="s19">and searching for this book. One way to search is by ISBN (the book&#39;s identification number), which is 1435457420.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_032.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Over</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// A first C<span class="s40">þþ </span>program</p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">#include &lt;iostream&gt; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 72pt;text-indent: 0pt;line-height: 118%;text-align: left;">std::cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; std::endl; return 0;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark25">Writing Your First C</a><span class="s36">þþ </span>Program 7<a name="bookmark88">&zwnj;</a><a name="bookmark89">&zwnj;</a><a name="bookmark90">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a14"><h1 href="#bookmark1">Commenting Code</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first two lines of the program are comments.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Over</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// A first C<span class="s40">þþ </span>program</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark26">Comments are completely ignored by the compiler; they</a><span class="s12">’</span>re meant for humans. They can help other programmers understand your intentions. But comments can also help you. They can remind you how you accomplished something that might not be clear at first glance.<a name="bookmark91">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark27">You can create a comment using two forward slashes in a row (</a><span class="s35">//</span>). Anything after this on the rest of the physical line is considered part of the comment. This means you can also include a comment after a piece of C<span class="s14">þþ </span>code, on the same line.<a name="bookmark92">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_033.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can also use what are called <i>C-style comments</i>, which can span multiple lines. All you have to do is start the comment with <span class="s35">/* </span>and end it with <span class="s35">*/</span>. Everything in between the two markers is part of the comment.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a15"><h1 href="#bookmark1">Using Whitespace</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next line in the program is a blank line. The compiler ignores blank lines. In fact, compilers ignore just about all <span class="s11">whitespace</span><span class="s12">—</span>spaces, tabs, and newlines. Like comments, whitespace is just for us humans.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Judicious use of whitespace helps make programs clearer. For example, you can use blank lines to separate sections of code that belong together. I also use whitespace (a tab, to be precise) at the beginning of the two lines between the curly braces to set them off.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a16"><h1 href="#bookmark1">Including Other Files</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The next line in the program is a preprocessor directive. You know this because the line begins with the <span class="s35"># </span>symbol.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">#include &lt;iostream&gt;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s11">preprocessor </span>runs before the compiler does its thing and substitutes text based on various directives. In this case, the line involves the <span class="s35">#include </span>directive, which tells the preprocessor to include the contents of another file.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">8 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark93">&zwnj;</a><a name="bookmark94">&zwnj;</a><a name="bookmark95">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">I include the file <span class="s35">iostream</span>, which is part of the standard library, because it contains code to help me display output. I surround the filename with less than (<span class="s35">&lt;</span>) and greater than (<span class="s35">&gt;</span>) characters to tell the compiler to find the file where it keeps all the files that came with the compiler. A file that you include in your programs like this is called a <span class="s11">header file</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a17"><h1 href="#bookmark2">Defining the main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next non-blank line is the header of a function called <span class="s35">main()</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark29">int main()</a><a name="bookmark96">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">function </span>is a group of programming code that can do some work and return a value. In this case, <span class="s35">int </span>indicates that the function will return an integer value. All function headers have a pair of parentheses after the function name.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All C<span class="s14">þþ </span>programs must have a function called <span class="s35">main()</span>, which is the starting point of the program. The real action begins here.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next line marks the beginning of the function.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">And the very last line of the program marks the end of the function.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">All functions are delimited by a pair of curly braces, and everything between them is part of the function. Code between two curly braces is called a <span class="s11">block </span>and is usually indented to show that it forms a unit. The block of code that makes up an entire function is called the <span class="s11">body </span>of the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="h1" name="a18">Displaying Text through the Standard </a><h1 href="#bookmark1">Output</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first line in the body of <span class="s35">main() </span>displays <span class="s35">Game Over!</span>, followed by a newline, in the console window.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">std::cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; std::endl;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: justify;"><span class="s35">&quot;Game Over!&quot; </span>is a <span class="s11">string</span><span class="s12">—</span>a series of printable characters. Technically, it<span class="s12">’</span>s a <span class="s11">string literal</span>, meaning it<span class="s12">’</span>s literally the characters between the quotes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><span class="s35">cout </span>is an object, defined in the file <span class="s35">iostream</span>, that<span class="s12">’</span>s used to send data to the standard output stream. In most programs (including this one), the standard output stream simply means the console window on the computer screen.</p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark97">Writing Your First C</a><span class="s36">þþ </span>Program 9</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I use the <span class="s11">output operator </span>(<span class="s35">&lt;&lt;</span>) to send the string to <span class="s35">cout</span>. You can think of the output operator like a funnel; it takes whatever<span class="s12">’</span>s on the open side and funnels it to the pointy side. So the string is funneled to the standard output<span class="s12">—</span>the screen.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I use <span class="s35">std </span>to prefix <span class="s35">cout </span>to tell the compiler that I mean <span class="s35">cout </span>from the standard library. <span class="s35">std </span>is a <span class="s11">namespace</span>. You can think of a namespace like an area code of a phone number<span class="s12">—</span>it identifies the group to which something belongs. You prefix a namespace using the <span class="s11">scope resolution operator </span>(<span class="s35">::</span>).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark30">Finally, I send </a><span class="s35">std::endl </span>to the standard output. <span class="s35">endl </span>is defined in <span class="s35">iostream </span>and is also an object in the <span class="s35">std </span>namespace. Sending <span class="s35">endl </span>to the standard output acts like  pressing  the  Enter  key  in  the  console  window.  In  fact,  if  I  were  to  send another string to the console window, it would appear on the next line.<a name="bookmark98">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I understand this might be a lot to take in, so check out Figure 1.3 for a visual representation of the relationship between all of the elements I<span class="s12">’</span>ve just described.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 101pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><span><img width="81" height="10" alt="image" src="Image_035.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="244" height="184" alt="image" src="Image_036.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Figure 1.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">An implementation of Standard C<span class="s36">þþ </span>includes a set of files called the standard library, which includes the file <span class="s35">iostream</span>, which defines various things, including the object <span class="s35">cout</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a19"><h1 href="#bookmark1">Terminating Statements</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You<span class="s12">’</span>ll notice that the first line of the function ends with a semicolon (<span class="s35">;</span>). That<span class="s12">’</span>s because the line is a <span class="s11">statement</span><span class="s12">—</span>the basic unit controlling the execution flow. All of your statements must end with a semicolon<span class="s12">—</span>otherwise, your compiler will complain with an error message and your program won<span class="s12">’</span>t compile.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark31">10 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark99">&zwnj;</a><a name="bookmark100">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="h1" name="a20">Returning a Value from </a><h1 href="#bookmark1">main()</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The last statement in the function returns <span class="s35">0 </span>to the operating system.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Returning <span class="s35">0 </span>from <span class="s35">main() </span>is a way to indicate that the program ended without a problem. The operating system doesn<span class="s12">’</span>t have to do anything with the return value. In general, you can simply return <span class="s35">0 </span>like I did here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark32">Tric k</a><a name="bookmark101">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_037.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark33">When you run the Game Over program, you might only see a console window appear and disappear just as quickly. That’s because C</a><span class="s36">þþ </span>is so fast that it opens a console window, displays <span class="s35">Game Over!</span>, and closes the window all in a split second. However, in Windows, you can create a batch file that runs your console program and pauses, keeping the console window open so you can see the results of your program. Since the compiled program is named <span class="s35">game_over.exe</span>, you can simply create a batch file comprised of the two lines<a name="bookmark102">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;line-height: 119%;text-align: left;">game_over.exe pause</p><p class="s19" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">To create a batch file:</p><ol id="l2"><li><p class="s19" style="padding-top: 6pt;padding-left: 82pt;text-indent: -10pt;text-align: left;">Open a text editor like Notepad (not Word or WordPad).</p></li><li><p class="s19" style="padding-top: 8pt;padding-left: 82pt;text-indent: -10pt;text-align: left;">Type your text.</p></li><li><p class="s19" style="padding-top: 8pt;padding-left: 82pt;text-indent: -10pt;text-align: left;">Save the file with a <span class="s35">.bat </span>extension, such as <span class="s35">game_over.bat.</span></p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Finally, run the batch file by double-clicking its icon. You should see the results of the program since the batch file keeps the console window open.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_038.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="s30" name="a21">Working with the std Namespace</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because it<span class="s12">’</span>s so common to use elements from the <span class="s35">std </span>namespace, I<span class="s12">’</span>ll show you two different methods for directly accessing these elements. This will save you the effort of using the <span class="s35">std:: </span>prefix all the time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="h1" name="a22">Introducing the Game Over 2.0 </a><h1 href="#bookmark1">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Game Over 2.0 program produces the exact results of the original Game Over program, illustrated in Figure 1.2. But there<span class="s12">’</span>s a difference in the way elements from the <span class="s35">std </span>namespace are accessed. You can download the code for</p><p class="s19" style="padding-top: 2pt;padding-left: 274pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">Working with the std Namespace 11</a><a name="bookmark103">&zwnj;</a><a name="bookmark104">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">this program from the Course Technology website (www.courseptr.com/down- </a>loads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_over2.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Over 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates a using directive</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark35">cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; endl; return 0;</a><a name="bookmark105">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a23"><h1 href="#bookmark1">Employing a using Directive</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The program starts in the same way. I use two opening comments and then include <span class="s35">iostream </span>for output. But next, I have a new type of statement.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This <span class="s35">using </span>directive gives me direct access to elements of the <span class="s35">std </span>namespace. Again, if a namespace is like an area code, then this line says that all of the elements in the <span class="s35">std </span>namespace should be like local phone numbers to me now. That is, I don<span class="s12">’</span>t have to use their area code (the <span class="s35">std:: </span>prefix) to access them.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I can use <span class="s35">cout </span>and <span class="s35">endl</span>, without any kind of prefix. This might not seem like a big deal to you now, but when you have dozens or even hundreds of references to these objects, you<span class="s12">’</span>ll thank me.</p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1" class="h1" name="a24">Introducing the Game Over 3.0 </a><h1 href="#bookmark1">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, there<span class="s12">’</span>s another way to accomplish what I did in Game Over 2.0: set up the file so that I don<span class="s12">’</span>t have to explicitly use the <span class="s35">std:: </span>prefix to access <span class="s35">cout </span>and <span class="s35">endl</span>. And that<span class="s12">’</span>s exactly what I<span class="s12">’</span><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">m going to show you in the Game Over 3.0 program, which displays the same text as its predecessors. You can download the code for this program from the Course Technology website (www.courseptr.com/down- </a>loads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_over3.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Over 3.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates using declarations</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">12 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark106">&zwnj;</a><a name="bookmark107">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using std::cout; using std::endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; endl; return 0;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark37"><h1 href="#bookmark1">Employing using Declarations</h1></a><a name="bookmark108">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this version, I write two <span class="s35">using </span>declarations.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">using std::cout; using std::endl;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By declaring exactly which elements from the <span class="s35">std </span>namespace I want local to my program, I<span class="s12">’</span>m able to access them directly, just as in Game Over 2.0. Although it requires more typing than a <span class="s35">using </span>directive, the advantage of this technique is that it clearly spells out those elements I plan to use. Plus, it doesn<span class="s12">’</span>t make local a bunch of other elements that I have no intention of using.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark1" class="h1" name="a25">Understanding When to Employ </a><h1 href="#bookmark1">using</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, you<span class="s12">’</span>ve seen two ways to make elements from a namespace local to your program. But which is the best technique?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A language purist would say you shouldn<span class="s12">’</span>t employ either version of <span class="s35">using </span>and that you should always prefix each and every element from a namespace with its identifier. In my opinion, that<span class="s12">’</span>s like calling your best friend by his first and last name all the time. It just seems a little too formal.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If you hate typing, you can employ the <span class="s35">using </span>directive. A decent compromise is to employ <span class="s35">using </span>declarations. In this book, I<span class="s12">’</span>ll employ the <span class="s35">using </span>directive most of the time for brevity<span class="s12">’</span>s sake.</p><p class="s24" style="padding-top: 11pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_039.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">I’ve laid out a few different options for working with namespaces. I’ve also tried to explain the advantages of each so you can decide which way to go in your own programs. Ultimately, though, the decision may be out of your hands. When you’re working on a project, whether it’s in the classroom or in the professional world, you’ll probably receive coding standards created by the</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark38">Using Arithmetic Operators 13</a><a name="bookmark39">&zwnj;</a><a name="bookmark109">&zwnj;</a><a name="bookmark110">&zwnj;</a><a name="bookmark111">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">person in charge. Regardless of your personal tastes, it’s always best to listen to those who hand out grades or paychecks.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_040.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="s30" name="a26">Using Arithmetic Operators</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Whether you<span class="s12">’</span>re tallying up the number of enemies killed or decreasing a player<span class="s12">’</span>s health level, you need your programs to do some math. As with other languages, C<span class="s14">þþ </span>has built-in arithmetic operators.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a27">Introducing the Expensive Calculator </a><h1 href="#bookmark3">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Most serious computer gamers invest heavily in a bleeding-edge, high-powered gaming rig. This next program, Expensive Calculator, can turn that monster of a machine into a simple calculator. The program demonstrates built-in arithmetic operators. Figure 1.4 shows off the results.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_041.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Figure 1.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">C<span class="s36">þþ </span>can add, subtract, multiply, divide, and even calculate a remainder.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">expensive_calculator.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Expensive Calculator</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates built-in arithmetic operators</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark40">14 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark112">&zwnj;</a><a name="bookmark113">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 128%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;7 + 3 = &quot; &lt;&lt; 7 + 3 &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;7 - 3 = &quot; &lt;&lt; 7 - 3 &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;7 * 3 = &quot; &lt;&lt; 7 * 3 &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;7 / 3 = &quot; &lt;&lt; 7 / 3 &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;"><a name="bookmark41">cout &lt;&lt; &quot;7.0 / 3.0 = &quot; &lt;&lt; 7.0 / 3.0 &lt;&lt; endl;</a><a name="bookmark114">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;7 % 3 = &quot; &lt;&lt; 7 % 3 &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;7 + 3 * 5 = &quot; &lt;&lt; 7 + 3 * 5 &lt;&lt; endl; cout &lt;&lt; &quot;(7 + 3) * 5 = &quot; &lt;&lt; (7 + 3) * 5 &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a28"><h1 href="#bookmark3">Adding, Subtracting, and Multiplying</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I use the built-in arithmetic operators for addition (the plus sign, <span class="s40">þ</span><span class="s35">)</span>, subtraction (the minus sign, <span class="s35">-</span>), and multiplication (an asterisk, <span class="s35">*</span>). The results depicted in Figure 1.4 are just what you<span class="s12">’</span>d expect.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Each arithmetic operator is part of an <span class="s11">expression</span><span class="s12">—</span>something that evaluates to a single value. So, for example, the expression <span class="s35">7 </span><span class="s40">þ </span><span class="s35">3 </span>evaluates to <span class="s35">10</span>, and that<span class="s12">’</span>s what gets sent to <span class="s35">cout</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a29">Understanding Integer and Floating Point </a><h1 href="#bookmark3">Division</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The symbol for division is the forward slash (<span class="s35">/</span>), so that<span class="s12">’</span>s what I use in the next line of code. However, the output might surprise you. According to C<span class="s14">þþ </span>(and that expensive gaming rig), 7 divided by 3 is 2. What<span class="s12">’</span>s going on? Well, the result of any arithmetic calculation involving only <span class="s11">integers </span>(numbers without fractional parts) is always another integer. And since <span class="s35">7 </span>and <span class="s35">3 </span>are both integers, the result must be an integer. The fractional part of the result is thrown away.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">To get a result that includes a fractional part, at least one of the values needs to be a <span class="s11">floating point </span>(a number with a fractional part). I demonstrate this in the</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark42">Using Arithmetic Operators 15</a><a name="bookmark115">&zwnj;</a><a name="bookmark116">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">next line with the expression <span class="s35">7.0 / 3.0</span>. This time the result is a more accurate</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">2.33333<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_042.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You might notice that while the result of <span class="s35">7.0 / 3.0 </span>(<span class="s35">2.33333</span>) includes a fractional part, it is still truncated. (The true result would stretch out <span class="s35">3</span>s after the decimal point forever.) It’s important to know that computers generally store only a limited number of significant digits for floating point numbers. However, C<span class="s36">þþ </span>offers categories of floating point numbers to meet the most demanding needs—even those of computationally intensive 3D games.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark43"><h1 href="#bookmark3">Using the Modulus Operator</h1></a><a name="bookmark117">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In the next statement, I use an operator that might be unfamiliar to you<span class="s12">—</span>the modulus operator (<span class="s35">%</span>). The modulus operator returns the remainder of integer division. In this case, <span class="s35">7 % 3 </span>produces the remainder of <span class="s35">7 / 3</span>, which is <span class="s35">1</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a30"><h1 href="#bookmark3">Understanding Order of Operations</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as in algebra, arithmetic expressions in C<span class="s14">þþ </span>are evaluated from left to right. But some operators have a higher precedence than others and are evaluated first, regardless of position. Multiplication, division, and modulus have equal prece- dence, which is higher than the precedence level that addition and subtraction share.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="p">The next line of code provides an example to help drive this home. Because multiplication has higher precedence than addition, you calculate the results of the multiplication first. So the expression </span>7 <span class="s40">þ </span>3 * 5 <span class="p">is equivalent to </span>7 <span class="s40">þ </span>15<span class="p">, which evaluates to </span>22<span class="p">.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="p">If you want an operation with lower precedence to occur first, you can use parentheses, which have higher precedence than any arithmetic operator. So in the next statement, the expression </span>(7 <span class="s40">þ </span>3) * 5 <span class="p">is equivalent to </span>10 * 5<span class="p">, which evaluates to </span>50<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_044.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">For a list of C<span class="s36">þþ </span>operators and their precedence levels, see Appendix B.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_045.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark44">16 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark45">&zwnj;</a><a name="bookmark118">&zwnj;</a><a name="bookmark119">&zwnj;</a><a name="bookmark120">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="s30" name="a31">Declaring and Initializing Variables</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">variable </span>represents a particular piece of your computer<span class="s12">’</span>s memory that has been set aside for you to use to store, retrieve, and manipulate data. So if you wanted to keep track of a player<span class="s12">’</span>s score, you could create a variable for it, then you could retrieve the score to display it. You could also update the score when the player blasts an alien enemy from the sky.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a32">Introducing the Game Stats </a><h1 href="#bookmark3">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Game Stats program displays information that you might want to keep track of in a space shooter game, such as a player<span class="s12">’</span>s score, the number of enemies the player has destroyed, and whether the player has his shields up. The program uses a group of variables to accomplish all of this. Figure 1.5 illustrates the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_046.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 1.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each game stat is stored in a variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_stats.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Stats</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates declaring and initializing variables</p><p class="s19" style="padding-top: 2pt;padding-left: 267pt;text-indent: 0pt;text-align: left;"><a name="bookmark121">Declaring and Initializing Variables 17</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">int score; double distance; char playAgain; bool shieldsUp;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 26pt;text-align: left;">short lives, aliensKilled; score = 0;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 10pt;text-align: left;">distance = 1200.76;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">playAgain = ’y’; shieldsUp = true; lives = 3;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">aliensKilled = 10;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">double engineTemp = 6572.89;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nscore: &quot; &lt;&lt; score &lt;&lt; endl; cout &lt;&lt; &quot;distance: &quot; &lt;&lt; distance &lt;&lt; endl; cout &lt;&lt; &quot;playAgain: &quot; &lt;&lt; playAgain &lt;&lt; endl;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">//skipping shieldsUp since you don’t generally print Boolean values cout &lt;&lt; &quot;lives: &quot; &lt;&lt; lives &lt;&lt; endl;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;aliensKilled: &quot;&lt;&lt; aliensKilled &lt;&lt; endl; cout &lt;&lt; &quot;engineTemp: &quot; &lt;&lt; engineTemp &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">int fuel;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nHow much fuel? &quot;; cin &gt;&gt; fuel;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;fuel: &quot; &lt;&lt; fuel &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">typedef unsigned short int ushort; ushort bonus = 10;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nbonus: &quot; &lt;&lt; bonus &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">18 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark47">&zwnj;</a><a name="bookmark122">&zwnj;</a><a name="bookmark123">&zwnj;</a><a name="bookmark124">&zwnj;</a><a name="bookmark125">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a33"><h1 href="#bookmark3">Understanding Fundamental Types</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Every variable you create has a <span class="s11">type</span>, which represents the kind of information you can store in the variable. It tells your compiler how much memory to set aside for the variable and it defines exactly what you can legally do with the variable.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s11">Fundamental  types</span><span class="s12">—</span>those  built  into  the  language<span class="s12">—</span>include  <span class="s35">bool  </span>for  Boolean values (<span class="s35">true  </span>or <span class="s35">false</span>), <span class="s35">char  </span>for single character values, <span class="s35">int  </span>for integers, <span class="s35">float </span>for  single-precision  floating  point  numbers,  and  <span class="s35">double  </span>for  double-precision floating point numbers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a34"><h1 href="#bookmark3">Understanding Type Modifiers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can use modifiers to alter a type. <span class="s35">short </span>is a modifier that can reduce the total number of values a variable can hold. <span class="s35">long </span>is a modifier that can increase the total number of values a variable can hold. <span class="s35">short </span>may decrease the storage space required for a variable while <span class="s35">long </span>may increase it. <span class="s35">short </span>and <span class="s35">long </span>can modify <span class="s35">int</span>. <span class="s35">long </span>can also modify <span class="s35">double</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">signed <span class="p">and </span>unsigned <span class="p">are modifiers that work only with integer types. </span>signed <span class="p">means that a variable can store both positive and negative values, while </span>unsigned <span class="p">means that a variable can store only positive values. Neither </span>signed <span class="p">nor </span>unsigned <span class="p">change the total number of values a variable can hold; they only change the range of values. </span>signed <span class="p">is the default for integer types.</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, confused with all of your type options? Well, don<span class="s12">’</span>t be. Table 1.1 summarizes commonly used types with some modifiers thrown in. The table also provides a range of values for each.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_047.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The range of values listed is based on my compiler. Yours might be different. Check your compiler’s documentation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_049.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">For brevity’s sake, <span class="s35">short int </span>can be written as just <span class="s35">short </span>and <span class="s35">long int </span>can be written as just</p><p class="s35" style="padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">long<span class="s19">.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_050.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="408" height="281" alt="image" src="Image_051.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">256 character values</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">true <span class="s41">or </span>false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">38 (seven significant digits)</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">308 (15 significant digits)</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">308 (15 significant digits)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 10pt;text-align: left;">3.4E <span class="s42">þ</span>/</p><p class="s41" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">1.7E <span class="s42">þ</span>/</p><p class="s41" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">1.7E <span class="s42">þ</span>/</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">32,768 to 32,767</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">0 to 65,535</p><p class="s41" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">2,147,483,648 to 2,147,483,647</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">0 to 4,294,967,295</p><p class="s41" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">2,147,483,648 to 2,147,483,647</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">0 to 4,294,967,295</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">short int</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;line-height: 119%;text-align: left;">unsigned short int int</p><p class="s35" style="text-indent: 0pt;line-height: 119%;text-align: left;">unsigned int long int</p><p class="s35" style="text-indent: 0pt;line-height: 119%;text-align: left;">unsigned long int float</p><p class="s35" style="text-indent: 0pt;line-height: 11pt;text-align: left;">double</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;line-height: 118%;text-align: left;">long double char</p><p class="s35" style="text-indent: 0pt;text-align: left;">bool</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 1.1 <span class="s44">Commonly Used Types</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Type Values</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 267pt;text-indent: 0pt;text-align: left;"><a name="bookmark48">Declaring and Initializing Variables 19</a><a name="bookmark126">&zwnj;</a><a name="bookmark127">&zwnj;</a><a name="bookmark128">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a35"><h1 href="#bookmark3">Declaring Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">All right, now that you<span class="s12">’</span>ve got a basic understanding of types, it<span class="s12">’</span>s time to get back to the program. One of the first things I do is <span class="s11">declare </span>a variable (request that it be created) with the line:</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">int score;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In this code, I declare a variable of type <span class="s35">int</span>, which I name <span class="s35">score</span>. You use a variable name to access the variable. You can see that to declare a variable you specify its type followed by a name of your choosing. Because the declaration is a statement, it must end with a semicolon.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I declare three more variables of yet three more types in the next three lines. <span class="s35">distance </span>is a variable of type <span class="s35">double</span>. <span class="s35">playAgain </span>is a variable of type <span class="s35">char</span>. And <span class="s35">shieldsUp </span>is a variable of type <span class="s35">bool</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Games (and all major applications) usually require lots of variables. Fortunately, C<span class="s14">þþ </span>allows you to declare multiple variables of the same type in a single statement. That<span class="s12">’</span>s just what I do next in the line.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">short lives, aliensKilled;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This line establishes two <span class="s35">short </span>variables<span class="s12">—</span><span class="s35">lives </span>and <span class="s35">aliensKilled</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark49">20 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark129">&zwnj;</a><a name="bookmark130">&zwnj;</a><a name="bookmark131">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Even though I<span class="s12">’</span>ve defined a bunch of variables at the top of my <span class="s35">main() </span>function, you don<span class="s12">’</span>t have to declare all of your variables in one place. As you<span class="s12">’</span>ll see later in the program, I often define a new variable just before I use it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a36"><h1 href="#bookmark3">Naming Variables</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">To declare a variable, you must provide a name, known as an <span class="s11">identifier</span>. There are only a few rules you have to follow to create a legal identifier.</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">An identifier can contain only numbers, letters, and underscores.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>An identifier can<span class="s12">’</span>t start with a number.</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>An identifier can<span class="s12">’</span>t be a C<span class="s14">þþ </span>keyword.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">keyword </span>is a special word that C<span class="s14">þþ </span>reserves for its own use. There aren<span class="s12">’</span>t many, but to see a full list, check out Appendix C.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 91%;text-align: justify;">In addition to the rules for creating <span class="s11">legal </span>variable names, following are some guidelines for creating <span class="s11">good </span>variable names.</p><p style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span><b>Choose descriptive names. </b>Variable names should be clear to another programmer. For example, use <span class="s35">score </span>instead of <span class="s35">s</span>. (One exception to this rule involves variables used for a brief period. In that case, single-letter variable names, such as <span class="s35">x</span>, are fine.)</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Be consistent. </b>There are different schools of thought about how to write multiword variable names. Is it <span class="s35">high_score </span>or <span class="s35">highScore</span>? In this book, I use the second style, where the initial letter of the second word (and any other words) is capitalized, known as <span class="s11">camel case</span>. But as long as you<span class="s12">’</span>re consistent, it<span class="s12">’</span>s not important which method you use.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><b>Follow the traditions of the language. </b>Some naming conventions are just traditions. For example, in most languages (C<span class="s14">þþ </span>included) variable names start with a lowercase letter. Another tradition is to avoid using an underscore as the first character of your variable names. Names that begin with an underscore can have special meaning.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span><b>Keep the length in check. </b>Even though <span class="s35">playerTwoBonusForRoundOne </span>is descriptive, it can make code hard to read. Plus, long names increase the risk of a typo. As a guideline, try to limit your variable names to fewer</p><p class="s19" style="padding-top: 2pt;padding-left: 267pt;text-indent: 0pt;text-align: left;"><a name="bookmark50">Declaring and Initializing Variables 21</a><a name="bookmark132">&zwnj;</a><a name="bookmark133">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">than 15 characters. Ultimately, though, your compiler sets an actual upper limit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_052.png"/></span></p><p class="s38" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Self-documenting <span class="s19">code is written in such a way that it’s easy to understand what is happening in the program independent of any comments. Choosing good variable names is an excellent step toward this kind of code.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a37"><h1 href="#bookmark3">Assigning Values to Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the next group of statements, I assign values to the six variables I declared. I<span class="s12">’</span>ll go through a few assignments and talk a little about each variable type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Assigning Values to Integer Variables</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In the following assignment statement I assign the value of <span class="s35">0 </span>to <span class="s35">score</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">score = 0;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Now <span class="s35">score </span>stores <span class="s35">0</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You assign a value to a variable by writing the variable name followed by the assignment operator (<span class="s35">=</span>) followed by an expression. (Yes, technically <span class="s35">0 </span>is an expression, which evaluates to, well, <span class="s35">0</span>.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Assigning Values to Floating Point Variables</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In the statement I assign <span class="s35">distance </span>the value <span class="s35">1200.76</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">distance = 1200.76;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">distance </span>is of type <span class="s35">double</span>, I can use it to store a number with a fractional part, which is just what I do.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Assigning Values to Character Variables</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In the following statement I assign <span class="s35">playAgain  </span>the single-character value <span class="s35">’y’</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">playAgain = ’y’;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As I did here, you can assign a character to a variable of type <span class="s35">char </span>by surrounding the character with single quotes.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark51">22 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark134">&zwnj;</a><a name="bookmark135">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Variables of type <span class="s35">char </span>can store the 128 ASCII character values (assuming that your system uses the ASCII character set). <span class="s11">ASCII</span>, short for <span class="s11">American Standard Code for Information Interchange</span>, is a code for representing characters. To see a complete ASCII listing, check out Appendix D.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Assigning Values to Boolean Variables</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In the following statement I assign <span class="s35">shieldsUp </span>the value <span class="s35">true</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">shieldsUp = true;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark52">In my program, this means that the player</a><span class="s12">’</span>s shields are up.<a name="bookmark136">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">shieldsUp </span>is a <span class="s35">bool </span>variable, which means it<span class="s12">’</span>s a Boolean variable. As such, it can represent  either  <span class="s35">true  </span>or  <span class="s35">false</span>.  Although  intriguing,  you<span class="s12">’</span>ll  have  to  wait  until Chapter 2, <span class="s12">“</span>Truth, Branching, and the Game Loop: Guess My Number,<span class="s12">” </span>to learn more about this kind of variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a38"><h1 href="#bookmark3">Initializing Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can both declare and assign a value to variables in a single initialization statement. That<span class="s12">’</span>s exactly what I do next.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">double engineTemp = 6572.89;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This line creates a variable of type <span class="s35">double </span>named <span class="s35">engineTemp</span>, which stores the value <span class="s35">6572.89</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as you can declare multiple variables in one statement, you can initialize more than one variable in a statement. You can even declare and initialize different variables in a single statement. Mix and match as you choose!</p><p class="s24" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_054.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can declare a variable without assigning it a value, it’s best to initialize a new variable with a starting value whenever you can. This makes your code clearer, plus it eliminates the chance of accessing an uninitialized variable, which may contain any value.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_055.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a39"><h1 href="#bookmark3">Displaying Variable Values</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To display the value of a variable of one of the fundamental types, just send it to <span class="s35">cout</span>.  That<span class="s12">’</span>s  what  I  do  next  in  the  program.  Note  that  I  don<span class="s12">’</span>t  try  to  display <span class="s35">shieldsUp  </span>because you don<span class="s12">’</span>t normally display <span class="s35">bool  </span>values.</p><p class="s19" style="padding-top: 2pt;padding-left: 267pt;text-indent: 0pt;text-align: left;"><a name="bookmark53">Declaring and Initializing Variables 23</a><a name="bookmark137">&zwnj;</a><a name="bookmark138">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_056.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">In the first statement of this section I use what’s called an <i>escape sequence</i>—a pair of characters that begins with a backslash (<span class="s35">\</span>), which represents special printable characters.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: justify;">cout &lt;&lt; &quot;\nscore: &quot; &lt;&lt; score &lt;&lt; endl;</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The escape sequence I used is <span class="s35">\n</span>, which represents a newline. When sent to <span class="s35">cout </span>as part of a string, it’s like pressing the Enter key in the console window. Another useful escape sequence is <span class="s35">\t</span>, which acts as a tab.</p><p class="s19" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">There are other escape sequences at your disposal. For a list of escape sequences, see Appendix E.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_057.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark54"><h1 href="#bookmark3">Getting User Input</h1></a><a name="bookmark139">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another way to assign a value to a variable is through user input. So next, I assign the value of a new variable, <span class="s35">fuel</span>, based on what the user enters. To do so I use the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: justify;">cin &gt;&gt; fuel;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just  like  <span class="s35">cout</span>,  <span class="s35">cin  </span>is  an  object  defined  in  <span class="s35">iostream</span>,  which  lives  in  the  <span class="s35">std </span>namespace.  To  store  a  value  in  the  variable,  I  use  <span class="s35">cin  </span>followed  by  <span class="s35">&gt;&gt;  </span>(the extraction  operator),  followed  by  the  variable  name.  You  can  use  <span class="s35">cin  </span>and  the extraction operator to get user input into variables of other fundamental types too. To prove that everything worked, I display <span class="s35">fuel  </span>to the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a40">Defining New Names for </a><h1 href="#bookmark3">Types</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can define a new name for an existing type. In fact, that<span class="s12">’</span>s what I do next in the line:</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: justify;">typedef unsigned short int ushort;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This code defines the identifier <span class="s35">ushort </span>as another name for the type <span class="s35">unsigned short int</span>. To define new names for existing types, use <span class="s35">typedef </span>followed by the current type, followed by the new name. <span class="s35">typedef </span>is often used to create shorter names for types with long names.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can use your new type name just like the original type. I initialize a <span class="s35">ushort </span>variable (which is really just an <span class="s35">unsigned short int</span>) named <span class="s35">bonus </span>and display its value.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark55">24 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark56">&zwnj;</a><a name="bookmark140">&zwnj;</a><a name="bookmark141">&zwnj;</a><a name="bookmark142">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="h1" name="a41">Understanding Which Types to </a><h1 href="#bookmark3">Use</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You have many choices when it comes to the fundamental types. So how do you know which type to use? Well, if you need an integer type, you<span class="s12">’</span>re probably best off using <span class="s35">int</span>. That<span class="s12">’</span>s because <span class="s35">int </span>is generally implemented so that it occupies an amount of memory that is most efficiently handled by the computer. If you need to represent integer values greater than the maximum <span class="s35">int </span>or values that will never be negative, feel free to use an <span class="s35">unsigned int</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark57">If you</a><span class="s12">’</span>re tight on memory, you can use a type that requires less storage. However, on most computers, memory shouldn<span class="s12">’</span>t be much of an issue. (Pro- gramming on game consoles or mobile devices is another story.)<a name="bookmark143">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Finally, if you need a floating point number, you<span class="s12">’</span>re probably best off using <span class="s35">float</span>, which again is likely to be implemented so that it occupies an amount of memory that is most efficiently handled by the computer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="a42">Performing Arithmetic Operations with Variables</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Once you have variables with values, you<span class="s12">’</span>ll want to change their values during the course of your game. You might want to add a bonus to a player<span class="s12">’</span>s score for defeating a boss, increasing the score. Or you might want to decrease the oxygen level in an airlock. By using operators you<span class="s12">’</span>ve already met (along with some new ones), you can accomplish all of this.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="h1" name="a43">Introducing the Game Stats 2.0 </a><h1 href="#bookmark3">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Game Stats 2.0 program manipulates variables that represent game stats and displays the results. Figure 1.6 shows the program in action.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_stats2.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Stats 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates arithmetic operations with variables</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 199pt;text-indent: 0pt;text-align: left;">Performing Arithmetic Operations with Variables 25</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_058.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 1.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each variable is altered in a different way.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">unsigned int score = 5000;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;score: &quot; &lt;&lt; score &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">//altering the value of a variable score = score + 100;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;score: &quot; &lt;&lt; score &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">//combined assignment operator score += 100;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;score: &quot; &lt;&lt; score &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 115%;text-align: left;">//increment operators int lives = 3; <span class="s40">þþ</span>lives;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;lives: &quot; &lt;&lt; lives &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 112%;text-align: left;">lives = 3; lives<span class="s40">þþ</span>;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;lives: &quot; &lt;&lt; lives &lt;&lt; endl;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark144">26 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">lives = 3;</p><p class="s35" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">int bonus = <span class="s40">þþ</span>lives * 10;</p><p class="s35" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;lives, bonus = &quot; &lt;&lt; lives &lt;&lt; &quot;, &quot; &lt;&lt; bonus &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">lives = 3;</p><p class="s35" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">bonus = lives<span class="s40">þþ </span>* 10;</p><p class="s35" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;lives, bonus = &quot; &lt;&lt; lives &lt;&lt; &quot;, &quot; &lt;&lt; bonus &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark58">//integer wrap around score = 4294967295;</a><a name="bookmark145">&zwnj;</a></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><a name="bookmark59">cout &lt;&lt; &quot;\nscore: &quot; &lt;&lt; score &lt;&lt; endl;</a><a name="bookmark146">&zwnj;</a></p><p class="s40" style="padding-top: 1pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">þþ<span class="s35">score;</span></p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;score: &quot; &lt;&lt; score &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_059.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you compile this program, you may get a warning similar to, “[Warning] this decimal constant is unsigned.” Fortunately, the warning does not stop the program from compiling and being run. The warning is the result of something called integer wrap around that you’ll probably want to avoid in your own programs; however, the wrap around is intentional in this program to show the results of the event. You’ll learn about integer wrap around in the discussion of this program, in the section “Dealing with Integer Wrap Around.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_060.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="h1" name="a44">Altering the Value of a </a><h1 href="#bookmark3">Variable</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">After I create a variable to hold the player<span class="s12">’</span>s score and display it, I alter the score by increasing it by 100.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">score = score + 100;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">This assignment statement says to take the current value of <span class="s35">score</span>, add <span class="s35">100</span>, and assign the result back to <span class="s35">score</span>. In effect, the line increases the value of <span class="s35">score </span>by <span class="s35">100</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a45"><h1 href="#bookmark3">Using Combined Assignment Operators</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">There<span class="s12">’</span>s an even shorter version of the preceding line, which I use next.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">score += 100;</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><span class="p">This statement produces the same results as </span>score = score <span class="s40">þ </span>100;<span class="p">. The </span><span class="s40">þ</span>=</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 16pt;text-align: left;">operator is called a <span class="s11">combined assignment operator </span>because it combines an</p><p class="s19" style="padding-top: 2pt;padding-left: 199pt;text-indent: 0pt;text-align: left;"><a name="bookmark60">Performing Arithmetic Operations with Variables 27</a><a name="bookmark147">&zwnj;</a><a name="bookmark148">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">arithmetic operation (addition, in this case) with assignment. This operator is shorthand for saying <span class="s12">“</span>add whatever<span class="s12">’</span>s on the right to what<span class="s12">’</span>s on the left and assign the result back to what<span class="s12">’</span>s on the left.<span class="s12">”</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There are versions of the combined assignment operator for all of the arithmetic operators you<span class="s12">’</span>ve met. To see a list, check out Table 1.2.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.139pt" cellspacing="0"><tr style="height:28pt"><td style="width:259pt" colspan="3" bgcolor="#E5E5E5"><p class="s45" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 1.2 <span class="s46">Combined Assignment Operators</span></p></td></tr><tr style="height:19pt"><td style="width:73pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Operator</p></td><td style="width:83pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 22pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">Example</p></td><td style="width:103pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Equivalent To</p></td></tr><tr style="height:18pt"><td style="width:73pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s48" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">+=</p></td><td style="width:83pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s48" style="padding-top: 5pt;padding-left: 21pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">x += 5;</p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s48" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">x = x + 5;</p></td></tr><tr style="height:13pt"><td style="width:73pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">-=</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 21pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">x -= 5;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">x = x - 5;</p></td></tr><tr style="height:13pt"><td style="width:73pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">*=</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 21pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">x *= 5;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">x = x * 5;</p></td></tr><tr style="height:13pt"><td style="width:73pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">/=</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 21pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">x /= 5;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">x = x / 5;</p></td></tr><tr style="height:14pt"><td style="width:73pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">%=</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 21pt;padding-right: 23pt;text-indent: 0pt;text-align: center;">x %= 5;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 1pt;padding-left: 24pt;text-indent: 0pt;line-height: 11pt;text-align: left;">x <span class="s48">= x % 5;</span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a46">Using Increment and Decrement </a><h1 href="#bookmark3">Operators</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I use the <span class="s11">increment operator </span>(<span class="s40">þþ</span>) which increases the value of a variable by one. I use the operator to increase the value of <span class="s35">lives </span>twice. First I use it in the following line:</p><p class="s40" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">þþ<span class="s35">lives;</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I use it again in the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">lives<span class="s40">þþ</span>;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Each line has the same net effect; it increments <span class="s35">lives </span>from <span class="s35">3 </span>to <span class="s35">4</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As you can see, you can place the operator before or after the variable you<span class="s12">’</span>re incrementing. When you place the operator before the variable, the operator is called the <span class="s11">prefix increment operator</span>; when you place it after the variable, it<span class="s12">’</span>s called the <span class="s11">postfix increment operator</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point, you might be thinking that there<span class="s12">’</span>s no difference between the postfix and prefix versions, but you<span class="s12">’</span>d be wrong. In a situation where you only increment a single variable (as you just saw), both operators produce the same final result. But in a more complex expression, the results can be different.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To demonstrate this important difference, I perform a calculation that would be appropriate for the end of a game level. I calculate a bonus based on the number</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark149">28 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">of lives a player has, and I also increment the number of lives. However, I perform this calculation in two different ways. The first time, I use the prefix increment operator.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">int bonus = <span class="s40">þþ</span>lives * 10;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark61">The prefix increment operator increments a variable </a><span class="s11">before </span>the evaluation of a larger  expression involving the variable. <span class="s40">þþ</span><span class="s35">lives * 10 </span>is evaluated  by first incrementing <span class="s35">lives</span>, and then multiplying that result by <span class="s35">10</span>. Therefore, the code is equivalent to <span class="s35">4* 10</span>, which is <span class="s35">40</span>, of course. This means that now <span class="s35">lives </span>is <span class="s35">4 </span>and <span class="s35">bonus </span>is <span class="s35">40</span>.<a name="bookmark150">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After setting <span class="s35">lives </span>back to <span class="s35">3</span>, I calculate <span class="s35">bonus </span>again, this time using the postfix increment operator.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">bonus = lives<span class="s40">þþ </span>* 10;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The postfix increment operator increments a variable <span class="s11">after </span>the evaluation of a larger expression involving the variable. <span class="s35">lives</span><span class="s40">þþ </span><span class="s35">* 10 </span>is evaluated by multi- plying the current value of <span class="s35">lives </span>by <span class="s35">10</span>. Therefore, the code is equivalent to <span class="s35">3 * 10</span>, which is <span class="s35">30</span>, of course. Then, after this calculation, <span class="s35">lives </span>is incremented. After the line is executed, <span class="s35">lives </span>is <span class="s35">4 </span>and <span class="s35">bonus </span>is <span class="s35">30</span>.</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C<span class="s14">þþ </span>also defines the <span class="s11">decrement operator</span>, <span class="s12">–</span>. It works just like the increment operator, except it decrements a variable. It comes in the two flavors (prefix and postfix) as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a47">Dealing with Integer Wrap </a><h1 href="#bookmark3">Around</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What happens when you increase an integer variable beyond its maximum value? It turns out you don<span class="s12">’</span>t generate an error. Instead, the value <span class="s12">“</span>wraps around<span class="s12">” </span>to the type<span class="s12">’</span>s minimum value. Next up, I demonstrate this phenomenon. First I assign <span class="s35">score </span>the largest value it can hold.</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">score = 4294967295;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I increment the variable.</p><p class="s40" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">þþ<span class="s35">score;</span></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As a result, <span class="s35">score </span>becomes <span class="s35">0 </span>because the value wrapped around, much like a car odometer does when it goes beyond its maximum value (see Figure 1.7).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Decrementing an integer variable beyond its minimum value <span class="s12">“</span>wraps it around<span class="s12">” </span>to its maximum.</p><p class="s19" style="padding-top: 2pt;padding-left: 318pt;text-indent: 0pt;text-align: left;"><a name="bookmark62">Working with Constants 29</a><a name="bookmark151">&zwnj;</a><a name="bookmark152">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="264" height="38" alt="image" src="Image_061.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 1.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A way to visualize an <span class="s35">unsigned int </span>variable “wrapping around” from its maximum value to its minimum.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_062.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Make sure to pick an integer type that has a large enough range for its intended use.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_063.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="bookmark63">Working with Constants</a><a name="bookmark153">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">constant </span>is an unchangeable value that you name. Constants are useful if you have an unchanging value that comes up frequently in your program. For example, if you were writing a space shooter in which each alien blasted out of the sky is worth 150 points, you could define a constant named <span class="s35">ALIEN_POINTS </span>that is equal to <span class="s35">150</span>. Then, any time you need the value of an alien, you could use <span class="s35">ALIEN_POINTS </span>instead of the literal <span class="s35">150</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Constants provide two important benefits. First, they make programs clearer. As soon as you see <span class="s35">ALIEN_POINTS</span>, you know what it means. If you were to look at some code and see <span class="s35">150</span>, you might not know what the value represents. Second, constants make changes easy. For example, suppose you do some playtesting with your game and you decide that each alien should really be worth 250 points. With constants, all you<span class="s12">’</span>d have to do is change the initialization of <span class="s35">ALIEN_POINTS </span>in your program. Without constants, you<span class="s12">’</span>d have to hunt down every occurrence of <span class="s35">150 </span>and change it to <span class="s35">250</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a48">Introducing the Game Stats 3.0 </a><h1 href="#bookmark3">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Game Stats 3.0 program uses constants to represent values. First the program calculates a player<span class="s12">’</span>s score, and then it calculates the upgrade cost of a unit in a strategy game. Figure 1.8 shows the results.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">game_stats3.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark154">30 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_064.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 1.8</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each calculation involves a constant, making the code behind the scenes clearer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Game Stats 3.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates constants</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">const int ALIEN_POINTS = 150; int aliensKilled = 10;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">int score = aliensKilled * ALIEN_POINTS; cout &lt;&lt; &quot;score: &quot; &lt;&lt; score &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">enum difficulty {NOVICE, EASY, NORMAL, HARD, UNBEATABLE};</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">difficulty myDifficulty = EASY;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">enum shipCost {FIGHTER_COST = 25, BOMBER_COST, CRUISER_COST = 50};</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">shipCost myShipCost = BOMBER_COST;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nTo upgrade my ship to a Cruiser will cost &quot;</p><p class="s35" style="padding-top: 2pt;padding-left: 48pt;text-indent: 0pt;text-align: center;">&lt;&lt; (CRUISER_COST - myShipCost) &lt;&lt; &quot; Resource Points.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 318pt;text-indent: 0pt;text-align: left;"><a name="bookmark64">Working with Constants 31</a><a name="bookmark155">&zwnj;</a><a name="bookmark156">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a49"><h1 href="#bookmark3">Using Constants</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I define a constant, <span class="s35">ALIEN_POINTS</span>, to represent the point value of an alien.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">const int ALIEN_POINTS = 150;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I simply use the keyword <span class="s35">const </span>to modify the definition. Now I can use <span class="s35">ALIEN_POINTS </span>just like any integer literal. Also, notice that the name I chose for the constant is in all capital letters. This is just a convention, but it<span class="s12">’</span>s a common one. An identifier in all caps tells a programmer that it represents a constant value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark65">Next I put the constant to use in the following line:</a><a name="bookmark157">&zwnj;</a></p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">int score = aliensKilled * ALIEN_POINTS;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I calculate a player<span class="s12">’</span>s score by multiplying the number of aliens killed by the point value of an alien. Using a constant here makes the line of code quite clear.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_065.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can’t assign a new value to a constant. If you try, you’ll generate a compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_066.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a50"><h1 href="#bookmark3">Using Enumerations</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">An <span class="s11">enumeration </span>is a set of <span class="s35">unsigned int </span>constants, called <span class="s11">enumerators</span>. Usually the enumerators are related and have a particular order. Here<span class="s12">’</span>s an example of an enumeration:</p><p class="s35" style="padding-top: 5pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">enum difficulty {NOVICE, EASY, NORMAL, HARD, UNBEATABLE};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This defines an enumeration named <span class="s35">difficulty</span>. By default, the value of enumerators begins at zero and increases by one. So <span class="s35">NOVICE </span>is <span class="s35">0</span>, <span class="s35">EASY </span>is <span class="s35">1</span>, <span class="s35">NORMAL </span>is <span class="s35">2</span>, <span class="s35">HARD </span>is <span class="s35">3</span>, and <span class="s35">UNBEATABLE </span>is <span class="s35">4</span>. To define an enumeration of your own,  use  the keyword <span class="s35">enum </span>followed by an  identifier, followed  by a  list  of enumerators between curly braces.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I create a variable of this new enumeration type.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">difficulty myDifficulty = EASY;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The variable <span class="s35">myDifficulty </span>is set to <span class="s35">EASY </span>(which is equal to <span class="s35">1</span>). <span class="s35">myDifficulty </span>is of type <span class="s35">difficulty</span>, so it can only hold one of the values defined in the enumeration. That means <span class="s35">myDifficulty </span>can only be assigned <span class="s35">NOVICE</span>, <span class="s35">EASY</span>, <span class="s35">NORMAL</span>, <span class="s35">HARD</span>, <span class="s35">UNBEATABLE</span>, <span class="s35">0</span>, <span class="s35">1</span>, <span class="s35">2</span>, <span class="s35">3</span>, or <span class="s35">4</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark158">32 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I define another enumeration.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">enum shipCost {FIGHTER_COST = 25, BOMBER_COST, CRUISER_COST = 50};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark66">This line of code defines the enumeration </a><span class="s35">shipCost</span>, which represents the cost in Resource Points for three kinds of ships in a strategy game. In it, I assign specific integer values to some of the enumerators. The numbers represent the Resource Point value of each ship. You can assign values to the enumerators if you want. Any enumerators that are not assigned values get the value of the previous enumerator plus one. Because I didn<span class="s12">’</span>t assign a value to <span class="s35">BOMBER_COST</span>, it<span class="s12">’</span>s initialized to <span class="s35">26</span>.<a name="bookmark67">&zwnj;</a><a name="bookmark159">&zwnj;</a><a name="bookmark160">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I define a variable of this new enumeration type.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">shipCost myShipCost = BOMBER_COST;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Then I demonstrate how you can use enumerators in arithmetic calculations.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">(CRUISER_COST - myShipCost)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This piece of code calculates the cost of upgrading a Bomber to a Cruiser. The calculation is the same as <span class="s35">50 - 26</span>, which evaluates to <span class="s35">24</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="a51">Introducing Lost Fortune</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The final project for this chapter, Lost Fortune, is a personalized adventure game in which the player enters a few pieces of information, which the computer uses to enhance a basic adventure story. Figure 1.9 shows a sample run.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Instead of presenting all the code at once, I<span class="s12">’</span><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">ll go through it one section at a time. You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 1 folder; the filename is <span class="s35">lost_fortune.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a52"><h1 href="#bookmark3">Setting Up the Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">First I create some initial comments, include two necessary files, and write a few</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using <span class="p">directives.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Lost Fortune</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// A personalized adventure</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 315pt;text-indent: 0pt;text-align: left;"><a name="bookmark161">Introducing Lost Fortune 33</a></p><p class="s35" style="padding-top: 22pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">using std::cout; using std::cin; using std::endl; using std::string;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_067.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark68">Figure 1.9</a><a name="bookmark162">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The story incorporates details provided by the player.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I include the file <span class="s35">string</span>, part of the standard library, so I can use a <span class="s35">string </span>object to access a string through a variable. There<span class="s12">’</span>s a lot more to <span class="s35">string </span>objects, but I<span class="s12">’</span>m going to keep you in suspense. You<span class="s12">’</span>ll learn more about them in Chapter 3, <span class="s12">“</span>For Loops, Strings, and Arrays: Word Jumble.<span class="s12">”</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Also, I employ <span class="s35">using </span>directives to spell out the objects in the <span class="s35">std </span>namespace that I plan to access. As a result, you can clearly see that <span class="s35">string </span>is in namespace <span class="s35">std</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="h1" name="a53">Getting Information from the </a><h1 href="#bookmark3">Player</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I get some information from the player.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">const int GOLD_PIECES = 900;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">int adventurers, killed, survivors; string leader;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark163">34 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">//get the information</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Welcome to Lost Fortune\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Please enter the following for your personalized adventure\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Enter a number: &quot;; cin &gt;&gt; adventurers;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Enter a number, smaller than the first: &quot;; cin &gt;&gt; killed;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;"><a name="bookmark69">survivors = adventurers - killed;</a><a name="bookmark164">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Enter your last name: &quot;; cin &gt;&gt; leader;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">GOLD_PIECES </span>is a constant that stores the number of gold pieces in the fortune the adventurers seek. <span class="s35">adventurers </span>stores the number of adventurers on the quest. <span class="s35">killed </span>stores the number that are killed on the journey. I calculate <span class="s35">survivors </span>for the number of adventurers that remain. Finally, I get the player<span class="s12">’</span>s last name, which I<span class="s12">’</span>ll be able to access through <span class="s35">leader</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_068.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">This simple use of <span class="s35">cin </span>to get a string from the user only works with strings that have no whitespace in them (such as tabs or spaces). There are ways to compensate for this, but that really requires a discussion of something called <i>streams</i>, which is beyond the scope of this chapter. So, use <span class="s35">cin </span>in this way, but be aware of its limitations.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_069.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a54"><h1 href="#bookmark3">Telling the Story</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I use the variables to tell the story.</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">//tell the story</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nA brave group of &quot; &lt;&lt; adventurers &lt;&lt; &quot; set out on a quest &quot;; cout &lt;&lt; &quot;-– in search of the lost treasure of the Ancient Dwarves. &quot;; cout &lt;&lt; &quot;The group was led by that legendary rogue, &quot; &lt;&lt; leader &lt;&lt; &quot;.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nAlong the way, a band of marauding ogres ambushed the party. &quot;; cout &lt;&lt; &quot;All fought bravely under the command of &quot; &lt;&lt; leader;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;, and the ogres were defeated, but at a cost. &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Of the adventurers, &quot; &lt;&lt; killed &lt;&lt; &quot; were vanquished, &quot;; cout &lt;&lt; &quot;leaving just &quot; &lt;&lt; survivors &lt;&lt; &quot; in the group.\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 389pt;text-indent: 0pt;text-align: left;"><a name="bookmark165">Summary 35</a><a name="bookmark166">&zwnj;</a></p><p class="s35" style="padding-top: 24pt;padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThe party was about to give up all hope. &quot;; cout &lt;&lt; &quot;But while laying the deceased to rest, &quot;; cout &lt;&lt; &quot;they stumbled upon the buried fortune. &quot;;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;So the adventurers split &quot; &lt;&lt; GOLD_PIECES &lt;&lt; &quot; gold pieces.&quot;; cout &lt;&lt; leader &lt;&lt; &quot; held on to the extra &quot; &lt;&lt; (GOLD_PIECES % survivors); cout &lt;&lt; &quot; pieces to keep things fair of course.\n&quot;;</p><p class="s35" style="padding-top: 12pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark70">The code and thrilling narrative are pretty clear. I will point out one thing, though. To calculate the number of gold pieces that the leader keeps, I use the modulus operator in the expression </a><span class="s35">GOLD_PIECES % survivors</span>. The expression evaluates to the remainder of <span class="s35">GOLD_PIECES / survivors</span>, which is the number of gold pieces that would be left after evenly dividing the stash among all of the surviving adventurers.<a name="bookmark167">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="a55">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter, you should have learned the following concepts:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>C<span class="s14">þþ </span>is the primary language used in AAA game programming.</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A program is a series of C<span class="s14">þþ </span>statements.</p><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The basic lifecycle of a C<span class="s14">þþ </span>program is idea, plan, source code, object file, executable.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span>Programming errors tend to fall into three categories<span class="s12">—</span>compile errors, link errors, and run-time errors.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A function is a group of programming statements that can do some work and return a value.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Every program must contain a <span class="s35">main() </span>function, which is the starting point of the program.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">#include </span>directive tells the preprocessor to include another file in the current one.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">The standard library is a set of files that you can include in your program files to handle basic functions like input and output.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark168">36 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark169">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="s35">iostream</span><span class="p">, which is part of the standard library, is a file that contains code to help with standard input and output.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">std </span>namespace includes elements from the standard library. To access an element from the namespace, you need to prefix the element with <span class="s35">std:: </span>or employ <span class="s35">using</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><span class="s35">cout </span>is an object, defined in the file <span class="s35">iostream</span>, that<span class="s12">’</span>s used to send data to the standard output stream (generally the computer screen).</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark71"><span class="s29">n </span></a><span class="s35">cin </span>is an object, defined in the file <span class="s35">iostream</span>, that<span class="s12">’</span>s used to get data from the standard input stream (generally the keyboard).<a name="bookmark170">&zwnj;</a></p><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>C<span class="s14">þþ </span>has built-in arithmetic operators, such as the familiar addition, subtraction, multiplication, and division<span class="s12">—</span>and even the unfamiliar modulus.</p><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>C<span class="s14">þþ </span>defines fundamental types for Boolean, single-character, integer, and floating point values.</p><p style="padding-top: 4pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>The C<span class="s14">þþ </span>standard library provides a type of object (<span class="s35">string</span>) for strings.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>You can use <span class="s35">typedef </span>to create a new name for an existing type.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A constant is a name for an unchangeable value.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>An enumeration is a sequence of <span class="s35">unsigned int </span>constants.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="s30" name="a56">Questions and Answers</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why do game companies use C<span class="s14">þþ</span>?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;text-align: justify;">A: C<span class="s14">þþ </span>combines speed, low-level hardware access, and high-level constructs better than just about any other language. In addition, most game companies have a lot invested in C<span class="s14">þþ </span>resources (both in reusable code and programmer experience).</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How is C<span class="s14">þþ </span>different than C?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;text-align: justify;">A: C<span class="s14">þþ </span>is the next iteration of the C programming language. To gain accept- ance, C<span class="s14">þþ </span>essentially retained all of C. However, C<span class="s14">þþ </span>defines new ways to do things that can replace some of the traditional C mechanisms. In addition, C<span class="s14">þþ </span>adds the ability to write object-oriented programs.</p><p class="s19" style="padding-top: 2pt;padding-left: 322pt;text-indent: 0pt;text-align: left;"><a name="bookmark171">Questions and Answers 37</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How should I use comments?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: To explain code that is unusual or unclear. You should not comment the obvious.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a programming block?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">A: One or more statements surrounded by curly braces that form a single unit.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a compiler warning?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: A message from your compiler stating a potential problem. A warning will not stop the compilation process.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can I ignore compiler warnings?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: You can, but you shouldn<span class="s12">’</span>t. You should address the warning and fix the offending code.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What is whitespace?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">A: A set of non-printing characters that create space in your source files, including tabs, spaces, and newlines.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What are literals?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: Elements that represent explicit values. <span class="s35">&quot;Game Over!&quot; </span>is a string literal, while</p><p class="s35" style="padding-left: 56pt;text-indent: 0pt;text-align: left;">32 <span class="p">and </span>98.6 <span class="p">are numeric literals.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why should I always try to initialize a new variable with a value?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Because the contents of an uninitialized variable could be any value<span class="s12">—</span>even one that doesn<span class="s12">’</span>t make sense for your program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why do programmers sometimes use variable names such as <span class="s35">myInt </span>or</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">myFloat<span class="p">?</span></p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: To clearly spell out a variable<span class="s12">’</span>s type. This convention is used frequently in programming instruction.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What are variables of type <span class="s35">bool  </span>for?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: left;">A: They can represent a condition that is true or false, such as whether a chest is locked or a playing card is face up.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark72">38 Chapter 1 </a><span class="s32">n </span>Types, Variables, and Standard I/O: Lost Fortune<a name="bookmark172">&zwnj;</a><a name="bookmark173">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How did the <span class="s35">bool  </span>type get its name?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: The type is named in honor of the English mathematician George Boole. Q: Must the names of constants be in uppercase letters?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: No. Using uppercase is just an accepted practice<span class="s12">—</span>but one you should use because it<span class="s12">’</span>s what other programmers expect.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">Q: How can I store more than one character with a single variable? A: With a <span class="s35">string </span>object.</p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="bookmark73">Discussion Questions</a><a name="bookmark174">&zwnj;</a></p><ol id="l3"><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">How does having a widely adopted C<span class="s14">þþ </span>standard help game programmers?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages and disadvantages of employing the <span class="s35">using</span></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">directive?</p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Why might you define a new name for an existing type?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Why are there two versions of the increment operator? What<span class="s12">’</span>s the difference between them?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How can you use constants to improve your code?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s30" name="a57">Exercises</a></p><ol id="l4"><li><p style="padding-top: 1pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Create a list of six legal variable names<span class="s12">—</span>three good and three bad choices. Explain why each name falls into the good or bad category.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What<span class="s12">’</span>s displayed by each line in the following code snippet? Explain each result.</p><p class="s35" style="padding-top: 8pt;padding-left: 67pt;text-indent: 0pt;line-height: 121%;text-align: left;">cout &lt;&lt; &quot;Seven divided by three is &quot; &lt;&lt; 7 / 3 &lt;&lt; endl; cout &lt;&lt; &quot;Seven divided by three is &quot; &lt;&lt; 7.0 / 3 &lt;&lt; endl; cout &lt;&lt; &quot;Seven divided by three is &quot; &lt;&lt; 7.0 / 3.0 &lt;&lt; endl;</p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Write a program that gets three game scores from the user and displays the average.</p></li></ol><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s27" name="bookmark175">chapter 2</a><a name="bookmark225">&zwnj;</a><a name="bookmark226">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_070.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark3" class="s28" name="bookmark176">Truth, Branching, and the Game Loop: Guess My Number</a><a name="bookmark227">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far, the programs you<span class="s12">’</span>ve seen have been linear<span class="s12">—</span>each statement executes, in order, from top to bottom. However, to create interesting games, you need to write programs that execute (or skip) sections of code based on some condition. That<span class="s12">’</span>s the main topic of this chapter. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Understand truth (as C++ defines it)</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">if </span>statements to branch to sections of code</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">switch </span>statements to select a section of code to execute</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">while </span>and <span class="s35">do </span>loops to repeat sections of code</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Generate random numbers</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark3" class="s30" name="a58">Understanding Truth</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Truth is black and white, at least as far as C++ is concerned. You can represent true and false with their corresponding keywords, <span class="s35">true </span>and <span class="s35">false</span>. You can store such  a  Boolean  value  with  a  <span class="s35">bool  </span>variable,  as  you  saw  in  Chapter  1.  Here<span class="s12">’</span>s  a quick refresher:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">bool fact = true, fiction = false;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This code creates two <span class="s35">bool </span>variables, <span class="s35">fact </span>and <span class="s35">fiction</span>. <span class="s35">fact </span>is <span class="s35">true </span>and <span class="s35">fiction</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">is <span class="s35">false</span>. Although the keywords <span class="s35">true </span>and <span class="s35">false </span>are handy, any expression or</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">39</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark228">40 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark229">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">value can be interpreted as <span class="s35">true </span>or <span class="s35">false</span>, too. Any non-zero value can be interpreted as <span class="s35">true</span>, while 0 can be interpreted as <span class="s35">false</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A common kind of expression interpreted as <span class="s35">true </span>or <span class="s35">false </span>involves comparing things. Comparisons are often made by using built-in relational operators. Table 2.1 lists the operators and a few sample expressions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:40.516pt" cellspacing="0"><tr style="height:28pt"><td style="width:331pt" colspan="4" bgcolor="#E5E5E5"><p class="s45" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 2.1 <span class="s46">Relational Operators</span></p></td></tr><tr style="height:19pt"><td style="width:56pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Operator</p></td><td style="width:103pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Meaning</p></td><td style="width:102pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">Sample Expression</p></td><td style="width:70pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Evaluates To</p></td></tr><tr style="height:19pt"><td style="width:56pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;"><a name="bookmark177">==</a><a name="bookmark230">&zwnj;</a></p></td><td style="width:103pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">equal to</p></td><td style="width:102pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">5 == 5</p></td><td style="width:70pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 == 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">!=</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">not equal to</p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 != 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 != 5</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">&gt;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">greater than</p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">8 &gt; 5</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 &gt; 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">&lt;</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">less than</p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 &lt; 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">8 &lt; 5</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">&gt;=</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">greater than or equal to</p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">8 &gt;= 5</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 &gt;= 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr><tr style="height:13pt"><td style="width:56pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">&lt;=</p></td><td style="width:103pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">less than or equal to</p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">5 &lt;= 8</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">true</p></td></tr><tr style="height:30pt"><td style="width:56pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:103pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">8 &lt;= 5</p></td><td style="width:70pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">false</p></td></tr></table><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="s30" name="a59">Using the if Statement</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, it<span class="s12">’</span>s time to put the concepts of true and false to work. You can use an <span class="s35">if </span>statement to test an expression for truth and execute some code based on it. Here<span class="s12">’</span>s a simple form of the <span class="s35">if </span>statement:</p><p class="s35" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">if (<i>expression</i>)</p><p class="s50" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">statement<span class="s35">;</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If <span class="s38">expression </span>is <span class="s35">true</span>, then <span class="s38">statement </span>is executed. Otherwise, <span class="s38">statement </span>is skipped and the program branches to the statement after the <span class="s35">if </span>suite.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_071.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Whenever you see a generic <i>statement </i>like in the preceding code example, you can replace it with a single statement or a block of statements because a block is treated as a single unit.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_072.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 325pt;text-indent: 0pt;text-align: left;"><a name="bookmark178">Using the if Statement 41</a><a name="bookmark231">&zwnj;</a><a name="bookmark232">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a60">Introducing the Score Rater </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Score Rater program comments on a player<span class="s12">’</span>s score using an <span class="s35">if </span>statement. Figure 2.1 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_073.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 2.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Messages are displayed (or not displayed) based on different <span class="s35">if </span>statements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">score_rater.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Score Rater</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates the if statement</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (true)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is always displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark233">42 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (false)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is never displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int score = 1000;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;At least you didn’t score zero.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark179">}</a><a name="bookmark234">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 250)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 250 or more. Decent.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 500)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 500 or more. Nice.\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 1000 or more. Impressive!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a61"><h1 href="#bookmark4">Testing true and false</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the first <span class="s35">if </span>statement I test <span class="s35">true</span>. Because <span class="s35">true </span>is, well, true, the program displays the message, <span class="s12">“</span>This is always displayed.<span class="s12">”</span></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (true)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is always displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the next <span class="s35">if </span>statement I test <span class="s35">false</span>. Because <span class="s35">false </span>isn<span class="s12">’</span>t true, the program doesn<span class="s12">’</span>t display the message, <span class="s12">“</span>This is never displayed.<span class="s12">”</span></p><p class="s19" style="padding-top: 2pt;padding-left: 325pt;text-indent: 0pt;text-align: left;"><a name="bookmark235">Using the if Statement 43</a></p><p class="s35" style="padding-top: 24pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (false)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is never displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_074.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Notice that you don’t use a semicolon after the closing parenthesis of the expression you test in an <span class="s35">if </span>statement. If you were to do this, you’d create an empty statement that would be paired with the <span class="s35">if </span>statement, essentially rendering the <span class="s35">if </span>statement useless. Here’s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">if (false);</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;"><a name="bookmark180">{</a><a name="bookmark236">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 81pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is never displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">By adding the semicolon after <span class="s35">(false)</span>, I create an empty statement that’s associated with the</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">if <span class="s19">statement. The preceding code is equivalent to:</span></p><p class="s35" style="padding-top: 6pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">if (false)</p><p class="s35" style="padding-top: 2pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">; // an empty statement, which does nothing</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 81pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;This is never displayed.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">All I’ve done is play with the whitespace, which doesn’t change the meaning of the code. Now the problem should be clear. The <span class="s35">if </span>statement sees the <span class="s35">false </span>value and skips the next statement (the empty statement). Then the program goes on its merry way to the statement after the <span class="s35">if </span>statement, which displays the message, “This is never displayed.”</p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Be on guard for this error. It’s an easy one to make and because it’s not illegal, it won’t produce a compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_075.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a62"><h1 href="#bookmark4">Interpreting a Value as true or false</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can interpret any value as <span class="s35">true </span>or <span class="s35">false</span>. Any non-zero value can be interpreted as <span class="s35">true</span>, while <span class="s35">0 </span>can be interpreted as <span class="s35">false</span>. I put this to the test in the next <span class="s35">if </span>statement:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;At least you didn’t score zero.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s35">score </span>is 1000, so it<span class="s12">’</span>s non-zero and interpreted as <span class="s35">true</span>. As a result, the message,</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">“<span class="p">Okay, at least you didn</span>’<span class="p">t score zero,</span>” <span class="p">is displayed.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark181">44 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark237">&zwnj;</a><a name="bookmark238">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a63"><h1 href="#bookmark4">Using Relational Operators</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Probably the most common expression you<span class="s12">’</span>ll use with <span class="s35">if </span>statements involves comparing values using the relational operators. That<span class="s12">’</span>s just what I<span class="s12">’</span>ll demon- strate next. I test to see whether the score is greater than or equal to 250.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 250)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 250 or more. Decent.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark182">Because </a><span class="s35">score </span>is 1000, the block is executed, displaying the message that the player earned a decent score. If <span class="s35">score </span>had been less than 1000, the block would have been skipped and the program would have continued with the statement following the block.<a name="bookmark239">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_076.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The equal to relational operator is == (two equal signs in a row). Don’t confuse it with = (one equal sign), which is the assignment operator.</p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">While it’s not illegal to use the assignment operator instead of the equal to relational operator, the results might not be what you expect. Take a look at this code:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int score = 500; if (score = 1000)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; You scored 1000 or more. Impressive!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">As a result of this code, <span class="s35">score </span>is set to 1000 and the message, “You scored 1000 or more. Impressive!” is displayed. Here’s what happens: Although <span class="s35">score </span>is 500 before the <span class="s35">if </span>statement, that changes. When the expression of the <span class="s35">if </span>statement, <span class="s35">(score = 1000)</span>, is evaluated, <span class="s35">score </span>is assigned 1000. The assignment statement evaluates to 1000, and because that’s a non-zero value, the expression is interpreted as <span class="s35">true</span>. As a result, the string is displayed.</p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Be on guard for this type of mistake. It’s easy to make and in some cases (like this one), it won’t cause a compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_077.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a64"><h1 href="#bookmark4">Nesting if Statements</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">An <span class="s35">if </span>statement can cause a program to execute a statement or block of statements, including other <span class="s35">if </span>statements. When you write one <span class="s35">if </span>statement</p><p class="s19" style="padding-top: 2pt;padding-left: 332pt;text-indent: 0pt;text-align: left;"><a name="bookmark240">Using the else Clause 45</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">inside another, it<span class="s12">’</span>s called <span class="s11">nesting</span>. In the following code, the <span class="s35">if </span>statement that begins <span class="s35">if (score &gt;= 1000) </span>is nested inside the <span class="s35">if </span>statement that begins <span class="s35">if (score &gt; 500)</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 500)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 500 or more. Nice.\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;"><a name="bookmark183">cout &lt;&lt; &quot;You scored 1000 or more. Impressive!\n&quot;;</a><a name="bookmark241">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">score </span>is greater than 500, the program enters the statement block and displays the message, <span class="s12">“</span>You scored 500 or more. Nice.<span class="s12">” </span>Then, in the inner <span class="s35">if </span>statement, the program compares <span class="s35">score </span>to 1000. Because <span class="s35">score </span>is greater than or equal to 1000, the program displays the message, <span class="s12">“</span>You scored 1000 or more. Impressive!<span class="s12">”</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_078.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can nest as many levels as you want. However, if you nest code too deeply, it gets hard to read. In general, you should try to limit your nesting to a few levels at most.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_079.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a65">Using the else Clause</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can add an <span class="s35">else </span>clause to an <span class="s35">if </span>statement to provide code that will only be executed if the tested expression is <span class="s35">false</span>. Here<span class="s12">’</span>s the form of an <span class="s35">if </span>statement that includes an <span class="s35">else </span>clause:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">if (<i>expression</i>)</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 20pt;line-height: 119%;text-align: left;">statement1<span class="s35">; else</span></p><p class="s50" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">statement2<span class="s35">;</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If   <span class="s38">expression   </span>is   <span class="s35">true</span>,   <span class="s38">statement1   </span>is   executed.   Then   the   program   skips <span class="s38">statement2  </span>and executes the statement following the <span class="s35">if  </span>suite. If <span class="s38">expression  </span>is <span class="s35">false</span>,  <span class="s38">statement1  </span>is  skipped  and  <span class="s38">statement2  </span>is  executed.  After  <span class="s38">statement2 </span>completes, the program executes the statement following the <span class="s35">if  </span>suite.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark184">46 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark242">&zwnj;</a><a name="bookmark243">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a66">Introducing the Score Rater 2.0 </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Score Rater 2.0 program also rates a score, which the user enters. But this time, the program uses an <span class="s35">if </span>statement with an <span class="s35">else </span>clause. Figures 2.2 and 2.3 show the two different messages that the program can display based on the score the user enters.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_080.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 2.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">If the user enters a score that’s 1000 or more, he is congratulated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">score_rater2.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Score Rater 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates an else clause</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int score;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Enter your score: &quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 332pt;text-indent: 0pt;text-align: left;"><a name="bookmark244">Using the else Clause 47</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cin &gt;&gt; score;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 1000 or more. Impressive!\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored less than 1000.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark185">return 0;</a><a name="bookmark245">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_081.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">If the user enters a score that’s less than 1000, there’s no celebration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a67">Creating Two Ways to </a><h1 href="#bookmark4">Branch</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen the first part of the <span class="s35">if </span>statement already, and it works just as it did before. If <span class="s35">score </span>is greater than 1000, the message, <span class="s12">“</span>You scored 1000 or more. Impressive!<span class="s12">” </span>is displayed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark186">48 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark246">&zwnj;</a><a name="bookmark247">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 1000 or more. Impressive!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Here<span class="s12">’</span>s the twist. The <span class="s35">else </span>clause provides a statement for the program to branch to if the expression is <span class="s35">false</span>. So if <span class="s35">(score &gt;= 1000) </span>is <span class="s35">false</span>, then the program skips the first message and instead displays the message, <span class="s12">“</span>You scored less than 1000.<span class="s12">”</span></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored less than 1000.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 12pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a68">Using a Sequence of if Statements with else Clauses</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can chain <span class="s35">if </span>statements with <span class="s35">else </span>clauses together to create a sequence of expressions that get tested in order. The statement associated with the first expression to test true is executed; otherwise, the statement associated with the final (and optional) <span class="s35">else </span>clause is run. Here<span class="s12">’</span>s the form such a series would take:</p><p class="s35" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">if (<i>expression1</i>)</p><p class="s50" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">statement1<span class="s35">;</span></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">else if (expression2)</p><p class="s50" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">statement2<span class="s35">;</span></p><p class="s51" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">.. .</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">else if (<i>expressionN</i>)</p><p class="s50" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">statementN<span class="s35">;</span></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">statementN+1;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If <span class="s38">expression1 </span>is <span class="s35">true</span>, <span class="s38">statement1 </span>is executed and the rest of the code in the sequence is skipped. Otherwise, <span class="s38">expression2 </span>is tested and if <span class="s35">true</span>, <span class="s38">statement2 </span>is executed and the rest of the code in the sequence is skipped. The computer continues to check each expression in order (through <span class="s38">expressionN</span>) and will execute the statement associated with the first expression that is true. If no expression is true, then the statement associated with the final <span class="s35">else </span>clause, <span class="s38">statementN+1</span>, is executed.</p><p class="s19" style="padding-top: 2pt;padding-left: 185pt;text-indent: 0pt;text-align: left;"><a name="bookmark187">Using a Sequence of if Statements with else Clauses 49</a><a name="bookmark248">&zwnj;</a><a name="bookmark249">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a69">Introducing the Score Rater 3.0 </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Score Rater 3.0 program also rates a score, which the user enters. But this time, the program uses a sequence of <span class="s35">if </span>statements with <span class="s35">else </span>clauses. Figure 2.4 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_082.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 2.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The user can get one of multiple messages, depending on his score.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">score_rater3.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Score Rater 3.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates if else-if else suite</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int score;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Enter your score: &quot;; cin &gt;&gt; score;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark250">50 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 1000 or more. Impressive!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (score &gt;= 500)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 77pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored 500 or more. Nice.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (score &gt;= 250)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 77pt;text-indent: 0pt;text-align: left;"><a name="bookmark188">cout &lt;&lt; &quot;You scored 250 or more. Decent.\n&quot;;</a><a name="bookmark251">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You scored less than 250. Nothing to brag about.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: left;"><span class="s52">Creating a Sequence of if Statements with else Clauses </span>You<span class="s12">’</span>ve seen the first part of this sequence twice already, and it works just the same this time around. If <span class="s35">score </span>is greater than or equal to 1000, the message,</p><p class="s12" style="padding-left: 41pt;text-indent: 0pt;line-height: 13pt;text-align: left;">“<span class="p">You scored 1000 or more. Impressive!</span>” <span class="p">is displayed and the computer branches</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">to the <span class="s35">return </span>statement.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (score &gt;= 1000)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">However, if the expression is <span class="s35">false</span>, then we know that <span class="s35">score </span>is less than 1000 and the computer evaluates the next expression in the sequence:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (score &gt;= 500)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If <span class="s35">score </span>is greater than or equal to 500, the message, <span class="s12">“</span>You scored 500 or more. Nice.<span class="s12">” </span>is displayed and the computer branches to the <span class="s35">return </span>statement. However, if that expression is <span class="s35">false</span>, then we know that <span class="s35">score </span>is less than 500 and the computer evaluates the next expression in the sequence:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (score &gt;= 250)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If <span class="s35">score </span>is greater than or equal to 250, the message, <span class="s12">“</span>You scored 250 or more. Decent.<span class="s12">” </span>is displayed and the computer branches to the <span class="s35">return </span>statement.</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark189">Using the switch Statement 51</a><a name="bookmark252">&zwnj;</a><a name="bookmark253">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, if that expression is <span class="s35">false</span>, then we know that <span class="s35">score </span>is less than 250 and the statement associated with the final <span class="s35">else </span>clause is executed and the message, <span class="s12">“</span>You scored less than 250. Nothing to brag about.<span class="s12">” </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_083.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">While the final <span class="s35">else </span>clause in an <span class="s35">if else-if </span>suite isn’t required, you can use it as a way to execute code if none of the expressions in the sequence are true.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_084.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a70">Using the switch Statement</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can use a <span class="s35">switch </span>statement to create multiple branching points in your code. Here<span class="s12">’</span>s a generic form of the <span class="s35">switch </span>statement:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">switch (<i>choice</i>)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">case <i>value1</i>: <i>statement1</i>;</p><p class="s35" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">break;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">case <i>value2</i>: <i>statement2</i>;</p><p class="s35" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">break;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">case <i>value3</i>: <i>statement3</i>;</p><p class="s35" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">break;</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: center;">.</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: center;">.</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: center;">.</p><p class="s35" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: center;">case <i>valueN</i>:      <i>statementN;</i></p><p class="s35" style="padding-top: 2pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">break;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">default:                <i>statementN + 1</i>;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The statement tests <span class="s38">choice </span>against the possible values<span class="s12">—</span><span class="s38">value1</span>, <span class="s38">value2</span>, and <span class="s38">value3</span><span class="s12">—</span>in order. If <span class="s38">choice </span>is equal to a value, then the program executes the corresponding <span class="s38">statement</span>. When the program hits a <span class="s35">break </span>statement, it exits the <span class="s35">switch </span>structure. If <span class="s38">choice </span>doesn<span class="s12">’</span>t match any value, then the statement associated with the optional <span class="s35">default </span>is executed.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The use of <span class="s35">break </span>and <span class="s35">default </span>are optional. If you leave out a <span class="s35">break</span>, however, the program will continue through the remaining statements until it hits a <span class="s35">break </span>or a <span class="s35">default </span>or until the <span class="s35">switch </span>statement ends. Usually you want one <span class="s35">break </span>statement to end each <span class="s35">case</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark190">52 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark254">&zwnj;</a><a name="bookmark255">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_085.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although a <span class="s35">default </span>case isn’t required, it’s usually a good idea to have one as a catchall.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_086.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Here<span class="s12">’</span>s an example to cement the ideas. Suppose <span class="s38">choice </span>is equal to <span class="s38">value2</span>. The program will first test <span class="s38">choice </span>against <span class="s38">value1</span>. Because they<span class="s12">’</span>re not equal, the program will continue. Next, the program will test <span class="s38">choice </span>against <span class="s38">value2</span>. Because they are equal, the program will execute <span class="s38">statement2</span>. Then the program will hit the <span class="s35">break </span>statement and exit the <span class="s35">switch </span>structure.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_087.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can use the <span class="s35">switch </span>statement only to test an <span class="s35">int </span>(or a value that can be treated as an <span class="s35">int</span>, such as a <span class="s35">char </span>or an <span class="s35">enumerator</span>). A <span class="s35">switch </span>statement won’t work with any other type.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_088.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a71">Introducing the Menu Chooser </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Menu Chooser program presents the user with a menu that lists three difficulty levels and asks him to make a choice. If the user enters a number that corresponds to a listed choice, then he is shown a message confirming the choice. If the user makes some other choice, he is told that the choice is invalid. Figure 2.5 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_089.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 2.5</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Looks like I took the easy way out.</p><p class="s19" style="padding-top: 2pt;padding-left: 302pt;text-indent: 0pt;text-align: left;"><a name="bookmark256">Using the switch Statement 53</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">menu_chooser.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Menu Chooser</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates the switch statement #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Difficulty Levels\n\n&quot;; cout &lt;&lt; &quot;1 - Easy\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;2 - Normal\n&quot;; cout &lt;&lt; &quot;3 - Hard\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">int choice;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Choice: &quot;; cin &gt;&gt; choice;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">switch (choice)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">case 1:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">case 2:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">case 3:</p><p class="s35" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;You picked Easy.\n&quot;; break;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 5pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;You picked Normal.\n&quot;; break;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 5pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;You picked Hard.\n&quot;; break;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">default:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You made an illegal choice.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark191">54 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark192">&zwnj;</a><a name="bookmark257">&zwnj;</a><a name="bookmark258">&zwnj;</a><a name="bookmark259">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a72">Creating Multiple Ways to </a><h1 href="#bookmark4">Branch</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">switch </span>statement creates four possible branching points. If the user enters <span class="s35">1</span>, then code associated with <span class="s35">case 1 </span>is executed and <span class="s12">“</span>You picked Easy<span class="s12">” </span>is displayed. If the user enters <span class="s35">2</span>, then code associated with <span class="s35">case 2 </span>is executed and <span class="s12">“</span>You picked Normal<span class="s12">” </span>is displayed. If the user enters <span class="s35">3</span>, then code associated with <span class="s35">case 3 </span>is executed and <span class="s12">“</span>You picked Hard<span class="s12">” </span>is displayed. If the user enters any other value, then <span class="s35">default </span>kicks in and <span class="s12">“</span>You made an illegal choice<span class="s12">” </span>is displayed.</p><p class="s24" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_090.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;"><a name="bookmark193">You’ll almost always want to end each case with a </a><span class="s35">break </span>statement. Don’t forget them; otherwise, your code might do things you never intended.<a name="bookmark260">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_091.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a73">Using while Loops</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">while </span>loops let you repeat sections of code as long as an expression is <span class="s35">true</span>. Here<span class="s12">’</span>s a generic form of the <span class="s35">while </span>loop:</p><p class="s35" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: center;">while (<i>expression</i>)</p><p class="s50" style="padding-top: 2pt;padding-left: 42pt;text-indent: 0pt;text-align: center;">statement<span class="s35">;</span></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If <span class="s38">expression </span>is <span class="s35">false</span>, the program moves on to the statement after the loop. If <span class="s38">expression </span>is <span class="s35">true</span>, the program executes <span class="s38">statement </span>and loops back to test <span class="s38">expression </span>again. This cycle repeats until <span class="s38">expression </span>tests <span class="s35">false</span>, at which point the loop ends.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a74">Introducing the Play Again </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Play Again program simulates the play of an exciting game. (Okay, by <span class="s12">“</span>simulates the play of an exciting game,<span class="s12">” </span>I mean the program displays the message <span class="s12">“</span>**Played an exciting game**<span class="s12">”</span>.) Then the program asks the user if he wants to play again. The user continues to play as long as he enters <span class="s35">y</span>. The program accomplishes this repetition using a <span class="s35">while </span>loop. Figure 2.6 shows the program in action.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">play_again.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 346pt;text-indent: 0pt;text-align: left;"><a name="bookmark261">Using while Loops 55</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_092.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark194">Figure 2.6</a><a name="bookmark262">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The repetition is accomplished using a <span class="s35">while </span>loop.</p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Play Again</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates while loops</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">char again = ’y’; while (again == ’y’)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\n**Played an exciting game**&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nDo you want to play again? (y/n): &quot;; cin &gt;&gt; again;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nOkay, bye.&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a75">Looping with a while </a><h1 href="#bookmark4">Loop</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The first thing the program does in the <span class="s35">main() </span>function is declare the <span class="s35">char</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">variable named <span class="s35">again </span>and initialize it to <span class="s35">’y’</span>. Then the program begins the <span class="s35">while</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark195">56 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark263">&zwnj;</a><a name="bookmark264">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">loop by testing <span class="s35">again </span>to see whether it<span class="s12">’</span>s equal to <span class="s35">’y’</span>. Because it is, the program displays  the  message  <span class="s12">“</span>**Played  an  exciting  game**,<span class="s12">” </span>asks  the  user  whether  he wants to play again, and stores the reply in <span class="s35">again</span>. The loop continues as long as the user enters <span class="s35">y</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You<span class="s12">’</span>ll notice that I had to initialize <span class="s35">again </span>before the loop because the variable is used in the loop expression. Because a <span class="s35">while </span>loop evaluates its expressions before its <span class="s11">loop body </span>(the group of statements that repeat), you have to make sure that any variables in the expression have a value before the loop begins.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="s30" name="bookmark196">Using do Loops</a><a name="bookmark265">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like <span class="s35">while </span>loops, <span class="s35">do </span>loops let you repeat a section of code based on an expression. The difference is that a <span class="s35">do </span>loop tests its expression after each loop iteration. This means that the loop body is always executed at least once. Here<span class="s12">’</span>s a generic form of a <span class="s35">do </span>loop:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">do</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 35pt;line-height: 118%;text-align: left;">statement<span class="s35">; while (</span>expression<span class="s35">);</span></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The program executes <span class="s38">statement </span>and then, as long as <span class="s38">expression </span>tests <span class="s35">true</span>, the loop repeats. Once <span class="s38">expression </span>tests <span class="s35">false</span>, the loop ends.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a76">Introducing the Play Again 2.0 </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Play Again 2.0 program looks exactly the same to the user as the original Play Again program. Play Again 2.0, like its predecessor, simulates the play of an exciting game by displaying the message <span class="s12">“</span>**Played an exciting game**<span class="s12">” </span>and asking the user whether he wants to play again. The user continues to play as long as he enters <span class="s35">y</span>. This time, though, the program accomplishes the repetition using a <span class="s35">do </span>loop. Figure 2.7 shows off the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">play_again2.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">// Play Again 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates do loops #include &lt;iostream&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 360pt;text-indent: 0pt;text-align: left;"><a name="bookmark266">Using do Loops 57</a></p><p class="s35" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">char again; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\n**Played an exciting game**&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nDo you want to play again? (y/n): &quot;; cin &gt;&gt; again;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;"><a name="bookmark197">} while (again == ’y’); cout &lt;&lt; &quot;\nOkay, bye.&quot;;</a><a name="bookmark267">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_093.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each repetition is accomplished using a <span class="s35">do </span>loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a77">Looping with a do </a><h1 href="#bookmark4">Loop</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Before the <span class="s35">do </span>loop begins, I declare the character <span class="s35">again</span>. However, I don<span class="s12">’</span>t need to initialize it because it<span class="s12">’</span>s not tested until after the first iteration of the loop. I get a</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark268">58 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">new value for <span class="s35">again </span>from the user in the loop body. Then I test <span class="s35">again </span>in the loop expression. If <span class="s35">again  </span>is equal to <span class="s35">’y’</span>, the loop repeats; otherwise, the loop ends.</p><p class="s24" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">IR W</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_094.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Even though you can use <span class="s35">while </span>and <span class="s35">do </span>loops pretty interchangeably, most programmers use the <span class="s35">while </span>loop. Although a <span class="s35">do </span>loop might seem more natural in some cases, the advantage of a <span class="s35">while </span>loop is that its expression appears right at the top of the loop; you don’t have to go hunting to the bottom of the loop to find it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_095.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark198">Tra p</a><a name="bookmark269">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_096.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark199">If you’ve ever had a game get stuck in the same endless cycle, you might have experienced an</a><a name="bookmark270">&zwnj;</a></p><p class="s38" style="padding-left: 59pt;text-indent: 0pt;text-align: justify;">infinite loop<span class="s19">—a loop without end. Here’s a simple example of an infinite loop:</span></p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;line-height: 118%;text-align: left;">int test = 10; while (test == 10)</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; test;</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">In this case, the loop is entered because <span class="s35">test </span>is <span class="s35">10</span>. But because <span class="s35">test </span>never changes, the loop will never stop. As a result, the user will have to kill the running program to end it. The moral of this story? Make sure that the expression of a loop can eventually become <span class="s35">false </span>or that there’s another way for the loop to end, such as described in the following section, “Using break and continue Statements.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_097.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="s30" name="a78">Using break and continue Statements</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It<span class="s12">’</span>s possible to alter the behavior you<span class="s12">’</span>ve seen in loops. You can immediately exit a loop with the <span class="s35">break </span>statement, and you can jump directly to the top of a loop with a <span class="s35">continue </span>statement. Although you should use these powers sparingly, they do come in handy sometimes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a79">Introducing the Finicky Counter </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Finicky Counter program counts from 1 to 10 through a <span class="s35">while </span>loop. It<span class="s12">’</span>s finicky because it doesn<span class="s12">’</span>t like the number 5<span class="s12">—</span>it skips it. Figure 2.8 shows a run of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">finicky_counter.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 253pt;text-indent: 0pt;text-align: left;"><a name="bookmark271">Using break and continue Statements 59</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_098.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2.8</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The number 5 is skipped with a <span class="s35">continue </span>statement, and the loop ends with a <span class="s35">break </span>statement.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Finicky Counter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates break and continue statements #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int count = 0; while (true)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">count += 1;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">//end loop if count is greater than 10 if (count &gt; 10)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">break;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark200">60 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark272">&zwnj;</a><a name="bookmark273">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//skip the number 5 if (count == 5)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">continue;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; count &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark201">}</a><a name="bookmark274">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a80">Creating a while (true) </a><h1 href="#bookmark4">Loop</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I set up the loop with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while (true)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Technically, this creates an infinite loop. This might seem odd coming so soon after a warning to avoid infinite loops, but this particular loop isn<span class="s12">’</span>t really infinite because I put an exit condition in the loop body.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_099.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although a <span class="s35">while (true) </span>loop sometimes can be clearer than a traditional loop, you should also try to minimize your use of these loops.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_100.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a81"><h1 href="#bookmark4">Using the break Statement to Exit a Loop</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This is the exit condition I put in the loop:</p><p class="s35" style="padding-top: 6pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">//end loop if count is greater than 10 if (count &gt; 10)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">break;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">count </span>is increased by 1 each time the loop body begins, it will eventually reach 11. When it does, the <span class="s35">break </span>statement (which means <span class="s12">“</span>break out of the loop<span class="s12">”</span>) is executed and the loop ends.</p><p class="s19" style="padding-top: 2pt;padding-left: 319pt;text-indent: 0pt;text-align: left;"><a name="bookmark202">Using Logical Operators 61</a><a name="bookmark203">&zwnj;</a><a name="bookmark275">&zwnj;</a><a name="bookmark276">&zwnj;</a><a name="bookmark277">&zwnj;</a><a name="bookmark278">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a82">Using the continue Statement to Jump Back to the Top of a </a><h1 href="#bookmark4">Loop</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Just before <span class="s35">count </span>is displayed, I included the lines:</p><p class="s35" style="padding-top: 6pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//skip the number 5 if (count == 5)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">continue;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;"><a name="bookmark204">}</a><a name="bookmark279">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark205">The </a><span class="s35">continue </span>statement means <span class="s12">“</span>jump back to the top of the loop.<span class="s12">” </span>At the top of the loop, the <span class="s35">while </span>expression is tested and the loop is entered again if it<span class="s12">’</span>s true. So when <span class="s35">count </span>is equal to <span class="s35">5</span>, the program does not get to the <span class="s35">cout &lt;&lt; count &lt;&lt; endl; </span>statement. Instead, it goes right back to the top of the loop. As a result, 5 is skipped and never displayed.<a name="bookmark280">&zwnj;</a></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a83"><h1 href="#bookmark4">Understanding When to Use break and continue</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can use <span class="s35">break </span>and <span class="s35">continue </span>in any loop you create; they aren<span class="s12">’</span>t just for <span class="s35">while (true) </span>loops. But you should use them sparingly. Both <span class="s35">break </span>and <span class="s35">continue </span>can make it harder for programmers to see the flow of a loop.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a84">Using Logical Operators</a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So far you<span class="s12">’</span>ve seen pretty simple expressions evaluated for their truth or falsity. However, you can combine simpler expressions with <span class="s11">logical operators </span>to create more complex expressions. Table 2.2 lists the logical operators.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.422pt" cellspacing="0"><tr style="height:28pt"><td style="width:62pt" bgcolor="#E5E5E5"><p class="s45" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 2.2</p></td><td style="width:82pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Logical Operators</p></td><td style="width:153pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:62pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Operator</p></td><td style="width:82pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Description</p></td><td style="width:153pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Sample Expression</p></td></tr><tr style="height:18pt"><td style="width:62pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s48" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">!</p></td><td style="width:82pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Logical NOT</p></td><td style="width:153pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s48" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">!<i>expression</i></p></td></tr><tr style="height:13pt"><td style="width:62pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">&amp;&amp;</p></td><td style="width:82pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Logical AND</p></td><td style="width:153pt" bgcolor="#E5E5E5"><p class="s53" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">expression1 <span class="s48">&amp;&amp; </span>expression2</p></td></tr><tr style="height:30pt"><td style="width:62pt" bgcolor="#E5E5E5"><p class="s48" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">||</p></td><td style="width:82pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Logical OR</p></td><td style="width:153pt" bgcolor="#E5E5E5"><p class="s53" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">expression1 <span class="s48">|| </span>expression2</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a85">Introducing the Designers Network </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Designers Network program simulates a computer network in which only a select group of game designers are members. Like real-world computer systems,</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark281">62 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">each member must enter a username and a password to log in. With a successful login, the member is personally greeted. To log in as a guest, all a user needs to do is enter <span class="s35">guest </span>at either the username or password prompt. Figures 2.9 through 2.11 show the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_101.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 2.9</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">If you’re not a member or a guest, you can’t get in.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_102.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 45pt;text-indent: 0pt;text-align: justify;">Figure 2.10</p><p class="s19" style="padding-left: 45pt;text-indent: 0pt;text-align: justify;">You can log in as a guest.</p><p class="s19" style="padding-top: 2pt;padding-left: 319pt;text-indent: 0pt;text-align: left;">Using Logical Operators 63</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_103.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2.11</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Looks like one of the elite logged in today.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">designers_network.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Designers Network</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates logical operators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">string username; string password; bool success;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: justify;">cout &lt;&lt; &quot;\tGame Designer’s Network\n&quot;; do</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">64 Chapter 2 <span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nUsername: &quot;; cin &gt;&gt; username;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Password: &quot;; cin &gt;&gt; password;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">if (username == &quot;S.Meier&quot; &amp;&amp; password == &quot;civilization&quot;)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nHey, Sid.&quot;; success = true;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else if (username == &quot;S.Miyamoto&quot; &amp;&amp; password == &quot;mariobros&quot;)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nWhat’s up, Shigeru?&quot;; success = true;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else if (username == &quot;W.Wright&quot; &amp;&amp; password == &quot;thesims&quot;)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nHow goes it, Will?&quot;; success = true;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else if (username == &quot;guest&quot; || password == &quot;guest&quot;)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nWelcome, guest.&quot;; success = true;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 5pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYour login failed.&quot;; success = false;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (!success);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 319pt;text-indent: 0pt;text-align: left;"><a name="bookmark206">Using Logical Operators 65</a><a name="bookmark282">&zwnj;</a><a name="bookmark283">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a86">Using the Logical AND </a><h1 href="#bookmark4">Operator</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The logical AND operator, <span class="s35">&amp;&amp;</span>, lets you join two expressions to form a larger one, which can be evaluated to <span class="s35">true </span>or <span class="s35">false</span>. The new expression is <span class="s35">true </span>only if the two expressions it joins are <span class="s35">true</span>; otherwise, it is <span class="s35">false</span>. Just as in English, <span class="s12">“</span>and<span class="s12">” </span>means both. Both original expressions must be <span class="s35">true </span>for the new expression to be <span class="s35">true</span>. Here<span class="s12">’</span>s a concrete example from the Designers Network program:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (username == &quot;S.Meier&quot; &amp;&amp; password == &quot;civilization&quot;)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark207">The expression </a><span class="s35">username == &quot;S.Meier&quot; &amp;&amp; password == &quot;civilization&quot; </span>is <span class="s35">true </span>only if both <span class="s35">username == &quot;S.Meier&quot; </span>and <span class="s35">password == &quot;civilization&quot; </span>are <span class="s35">true</span>. This works perfectly because I only want to grant Sid access if he enters both his username and his password. Just one or the other won<span class="s12">’</span>t do.<a name="bookmark284">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="433" height="176" alt="image" src="Image_104.png"/></span></p><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">false</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">false false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">false</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">true false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">true</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">false false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">username == &quot;S.Meier&quot; &amp;&amp;</p><p class="s37" style="text-indent: 0pt;text-align: left;">password == &quot;civilization&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">password ==</p><p class="s37" style="text-indent: 0pt;text-align: left;">&quot;civilization&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">username ==</p><p class="s37" style="text-indent: 0pt;text-align: left;">&quot;S.Meier&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 2.3 <span class="s44">Possible Login Combinations Using the AND Operator</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another way to understand how <span class="s35">&amp;&amp; </span>works is to look at all of the possible combinations of truth and falsity (see Table 2.3).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Of course, the Designers Network program works for other users besides Sid Meier. Through a series of <span class="s35">if </span>statements with <span class="s35">else </span>clauses using the <span class="s35">&amp;&amp; </span>operator, the program checks three different <span class="s35">username </span>and <span class="s35">password </span>pairs. If a user enters a recognized pair, he is personally greeted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a87">Using the Logical OR </a><h1 href="#bookmark4">Operator</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The logical OR operator, <span class="s35">||</span>, lets you join two expressions to form a larger one, which can be evaluated to <span class="s35">true </span>or <span class="s35">false</span>. The new expression is <span class="s35">true </span>if the first</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark285">66 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">expression <span class="s11">or </span>the second expression is <span class="s35">true</span>; otherwise, it is <span class="s35">false</span>. Just as in English, <span class="s12">“</span>or<span class="s12">” </span>means either. If either the first or second expression is <span class="s35">true</span>, then the new expression is <span class="s35">true</span>. (If both are <span class="s35">true</span>, then the larger expression is still <span class="s35">true</span>.) Here<span class="s12">’</span>s a concrete example from the Designers Network program:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (username == &quot;guest&quot; || password == &quot;guest&quot;)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark208">The expression </a><span class="s35">username == &quot;guest&quot; || password == &quot;guest&quot; </span>is <span class="s35">true </span>if <span class="s35">username == &quot;guest&quot; </span>is <span class="s35">true </span>or if <span class="s35">password == &quot;guest&quot; </span>is <span class="s35">true</span>. This works perfectly because I want to grant a user access as a guest as long as he enters <span class="s35">guest </span>for the username or password. If the user enters <span class="s35">guest </span>for both, that<span class="s12">’</span>s fine too.<a name="bookmark286">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another way to understand how <span class="s35">|| </span>works is to look at all of the possible combinations of truth and falsity (see Table 2.4).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="410" height="176" alt="image" src="Image_105.png"/></span></p><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">true</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">true false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">false</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">true false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">true</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">false false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">username == &quot;guest&quot; ||</p><p class="s37" style="text-indent: 0pt;text-align: left;">password == &quot;guest&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">password ==</p><p class="s37" style="text-indent: 0pt;text-align: left;">&quot;guest&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">username ==</p><p class="s37" style="text-indent: 0pt;text-align: left;">&quot;guest&quot;</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 2.4 <span class="s44">Possible Login Combinations Using the OR Operator</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a88">Using the Logical NOT </a><h1 href="#bookmark4">Operator</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The logical NOT operator, <span class="s35">!</span>, lets you switch the truth or falsity of an expression. The new expression is <span class="s35">true </span>if the original is <span class="s35">false</span>; the new expression is <span class="s35">false </span>if the  original  is  <span class="s35">true</span>.  Just  as  in  English,  <span class="s12">“</span>not<span class="s12">”  </span>means  the  opposite.  The  new expression has the opposite value of the original.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I use the NOT operator in the Boolean expression of the <span class="s35">do </span>loop:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (!success);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The expression <span class="s35">!success </span>is <span class="s35">true </span>when <span class="s35">success </span>is <span class="s35">false</span>. That works perfectly because <span class="s35">success </span>is <span class="s35">false </span>only when there has been a failed login. In that case,</p><p class="s19" style="padding-top: 2pt;padding-left: 319pt;text-indent: 0pt;text-align: left;"><a name="bookmark287">Using Logical Operators 67</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the block associated with the <span class="s35">do </span>loop executes again and the user is asked for his username and password once more.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The expression <span class="s35">!success </span>is <span class="s35">false </span>when <span class="s35">success </span>is <span class="s35">true</span>. That works perfectly because when <span class="s35">success </span>is <span class="s35">true</span>, the user has successfully logged in and the loop ends.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="298" height="144" alt="image" src="Image_106.png"/></span></p><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">false</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">true</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">true</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">false</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">!security</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">security</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 2.5 <span class="s44">Possible Login Combinations Using</span></p><p class="s44" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">the NOT Operator</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another way to understand how <span class="s35">! </span>works is to look at all of the possible combinations of truth and falsity (see Table 2.5).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark209"><h1 href="#bookmark4">Understanding Order of Operations</h1></a><a name="bookmark288">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just like arithmetic operators, logical operators have precedence levels that affect the  order  in  which  an  expression  is  evaluated.  Logical  NOT,  <span class="s35">!</span>,  has  a  higher level of precedence than logical AND, <span class="s35">&amp;&amp;</span>, which has a higher precedence than logical OR, <span class="s35">||</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as with arithmetic operators, if you want an operation with lower precedence to be evaluated first, you can use parentheses. You can create complex expressions that involve arithmetic operators, relational operators, and logical operators. Operator precedence will define the exact order in which elements of the expression are evaluated. However, it<span class="s12">’</span>s best to try to create expressions that are clear and simple, not ones that require a mastery of the operator precedence list to decipher.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">For a list of C++ operators and their precedence levels, see Appendix B.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark210">68 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark289">&zwnj;</a><a name="bookmark290">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_107.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can use parentheses in a larger expression to change the way in which it’s evaluated, you can also use <i>redundant parentheses</i>—parentheses that don’t change the value of the expressions—to make the expression clearer. Let me give you a simple example. Check out the following expression from the Designers Network program:</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">(username == &quot;S.Meier&quot; &amp;&amp; password == &quot;civilization&quot;)</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Now, here’s the expression with some redundant parentheses:</p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">( (username == &quot;S.Meier&quot;) &amp;&amp; (password == &quot;civilization&quot;) )</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark211">While the extra parentheses don’t change the meaning of the expression, they really help the two smaller expressions, joined by the </a><span class="s35">&amp;&amp; </span>operator, stand out.<a name="bookmark291">&zwnj;</a></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Using redundant parentheses is a bit of an art form. Are they helpful or just plain redundant? That’s a call you as the programmer have to make.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_108.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="s30" name="a89">Generating Random Numbers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A sense of unpredictability can add excitement to a game. Whether it<span class="s12">’</span>s the sudden change in a computer opponent<span class="s12">’</span>s strategy in an RTS or an alien creature bursting from an arbitrary door in an FPS, players thrive on a certain level of surprise. Generating random numbers is one way to achieve this kind of surprise.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark4" class="h1" name="a90">Introducing the Die Roller </a><h1 href="#bookmark4">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Die Roller program simulates the roll of a six-sided die. The computer calculates the roll by generating a random number. Figure 2.12 shows the results of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">die_roller.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Die Roller</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates generating random numbers</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;cstdlib&gt; #include &lt;ctime&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 291pt;text-indent: 0pt;text-align: left;"><a name="bookmark292">Generating Random Numbers 69</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_109.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark212">Figure 2.12</a><a name="bookmark293">&zwnj;</a></p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The die roll is based on a random number generated by the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0)));    //seed random number generator int randomNumber = rand();    //generate random number</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int die = (randomNumber % 6) + 1;    // get a number between 1 and 6 cout &lt;&lt; &quot;You rolled a &quot; &lt;&lt; die &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a91"><h1 href="#bookmark4">Calling the rand() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">One of the first things I do in the program is include a new file:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">#include &lt;cstdlib&gt;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The file <span class="s35">cstdlib </span>contains (among other things) functions that deal with generating random numbers. Because I<span class="s12">’</span>ve included the file, I<span class="s12">’</span>m free to call</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark294">70 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the functions it contains, including the function <span class="s35">rand()</span>, which is exactly what I do in <span class="s35">main()</span>:</p><p class="s35" style="padding-top: 10pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int randomNumber = rand(); //generate random number</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you learned in Chapter 1, functions are pieces of code that can do some work and return a value. You call or invoke a function by using its name followed by a pair of parentheses. If a function returns a value, you can assign that value to a variable. That<span class="s12">’</span>s what I do here with my use of the assignment statement. I assign the value returned by <span class="s35">rand() </span>(a random number) to <span class="s35">randomNumber</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark213">Hi n t</a><a name="bookmark295">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_110.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">rand() </span>function generates a random number between 0 and at least 32767. The exact upper limit depends on your implementation of C++. The upper limit is stored in the constant <span class="s35">RAND_MAX</span>, which is defined in <span class="s35">cstdlib</span>. So if you want to know the maximum random number <span class="s35">rand() </span>can generate, just send <span class="s35">RAND_MAX </span>to <span class="s35">cout</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_111.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Functions can also take values to use in their work. You provide these values by placing them between the parentheses after the function name, separated by commas. These values are called <span class="s11">arguments</span>, and when you provide them, you <span class="s11">pass </span>them to the function. I didn<span class="s12">’</span>t pass any values to <span class="s35">rand() </span>because the function doesn<span class="s12">’</span>t take any arguments.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a92">Seeding the Random Number </a><h1 href="#bookmark4">Generator</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Computers generate <span class="s11">pseudorandom </span>numbers<span class="s12">—</span>not truly random numbers<span class="s12">— </span>based on a formula. One way to think about this is to imagine that the computer reads from a huge book of predetermined numbers. By reading from this book, the computer can appear to produce a sequence of random numbers.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">But there<span class="s12">’</span>s a problem: The computer always starts reading the book from the beginning. Because of this, the computer will always produce the same series of <span class="s12">“</span>random<span class="s12">” </span>numbers in a program. In games, this isn<span class="s12">’</span>t something we<span class="s12">’</span>d want. We wouldn<span class="s12">’</span>t, for example, want the same series of dice rolls in a game of craps every time we played.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A solution to this problem is to tell the computer to start reading from some arbitrary place in the book when a game program begins. This process is called</p><p class="s19" style="padding-top: 2pt;padding-left: 291pt;text-indent: 0pt;text-align: left;"><a name="bookmark296">Generating Random Numbers 71</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">seeding <span class="p">the random number generator. Game programmers give the random number generator a number, called a </span>seed<span class="p">, to determine the starting place in this sequence of pseudorandom numbers.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The following code seeds the random number generator:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0)));    //seed random number generator</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark214">Wow, that</a><span class="s12">’</span>s a pretty cryptic looking line, but what it does is simple. It seeds the random number generator based on the current date and time, which is perfect since the current date and time will be different for each run of the program.<a name="bookmark297">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In terms of the actual code, the <span class="s35">srand() </span>function seeds the random number generator<span class="s12">—</span>you just have to pass it an <span class="s35">unsigned int </span>as a seed. What gets passed to the function here is the return value of <span class="s35">time(0)</span><span class="s12">—</span>a number based on the current system date and time. The code <span class="s35">static_cast&lt;unsigned int&gt; </span>just converts (or <span class="s11">casts</span>) this value to an <span class="s35">unsigned int</span>. Now, you don<span class="s12">’</span>t have to understand all the nuances of this line; the least you need to know is that if you want a program to generate a series of random numbers that are different each time the program is run, your program should execute this line once before calls to <span class="s35">rand()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_112.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A comprehensive explanation of the various forms of casting a value from one type to another is beyond the scope of this book.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_113.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark4" class="h1" name="a93">Calculating a Number within a </a><h1 href="#bookmark4">Range</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">After generating a random number, <span class="s35">randomNumber </span>holds a value between 0 and 32767 (based on my implementation of C++). But I need a number between 1 and 6, so next I use the modulus operator to produce a number in that range.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int die = (randomNumber % 6) + 1;    // get a number between 1 and 6</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Any positive number divided by 6 will give a remainder between 0 and 5. In the preceding code, I take this remainder and add 1, giving me the possible range of 1 through 6<span class="s12">—</span>exactly what I wanted. You can use this technique to convert a random number to a number within a range you<span class="s12">’</span>re looking for.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark215">72 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark298">&zwnj;</a><a name="bookmark299">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_114.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Using the modulus operator to create a number within a range from a random number might not always produce uniform results. Some numbers in the range might be more likely to appear than others. However, this isn’t a problem for simple games.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_115.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a94">Understanding the Game Loop</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s11">game loop </span>is a generalized representation of the flow of events in a game. The core of the events repeats, which is why it<span class="s12">’</span>s called a loop. Although the implementation might be quite different from game to game, the fundamental structure is the same for almost all games across genres. Whether you<span class="s12">’</span>re talking about a simple space shooter or a complex role-playing game (RPG), you can usually break the game down into the same repeating components of the game loop. Figure 2.13 provides a visual representation of the game loop.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Here<span class="s12">’</span>s an explanation of the parts of the game loop:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="h2">Setup. </span><span class="p">This often involves accepting initial settings or loading game assets, such as sound, music, and graphics. The player might also be pre- sented with the game backstory and his objectives.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="h2">Getting player input. </span><span class="p">Whether it comes from the keyboard, mouse, joy- stick, trackball, or some other device, input from the player is captured.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Updating game internals. </span><span class="p">The game logic and rules are applied to the game world, taking into account player input. This might take the shape of a physics system determining the interaction of objects or it might involve calculations of enemy AI, for example.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Updating the display. </span><span class="p">In the majority of games, this process is the most taxing on the computer hardware because it often involves drawing graphics. However, this process can be as simple as displaying a line of text.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span><b>Checking whether the game is over. </b>If the game isn<span class="s12">’</span>t over (if the play- er<span class="s12">’</span>s character is still alive and the player hasn<span class="s12">’</span>t quit, for example), con- trol branches back to the getting player input stage. If the game is over, control falls through to the shutting down stage.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="h2">Shutting down. </span><span class="p">At this point, the game is over. The player is often given some final information, such as his score. The program frees any resources, if necessary, and exits.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 288pt;text-indent: 0pt;text-align: left;"><a name="bookmark300">Introducing Guess My Number 73</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="123" height="442" alt="image" src="Image_116.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark216">Figure 2.13</a><a name="bookmark301">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The game loop describes a basic flow of events that fits just about any game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a95">Introducing Guess My Number</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">The final project for this chapter, Guess My Number, is the classic number- guessing game. For those who missed out on this game in their childhood, it goes like this: The computer chooses a random number between 1 and 100, and the player tries to guess the number in as few attempts as possible. Each time the player enters a guess, the computer tells him whether the guess is too high, too low, or right on the money. Once the player guesses the number, the game is over. Figure 2.14 shows Guess My Number in action. You can download the code for this program from the Course Technology website (www.courseptr. </a>com/downloads). The program is in the Chapter 2 folder; the filename is <span class="s35">guess_my_number.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark217">74 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark302">&zwnj;</a><a name="bookmark303">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_117.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark218">Figure 2.14</a><a name="bookmark304">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">I guessed the computer’s number in just three tries.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a96"><h1 href="#bookmark5">Applying the Game Loop</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It<span class="s12">’</span>s possible to examine even this simple game through the construct of the game loop. Figure 2.15 shows how nicely the game loop paradigm fits the flow of the game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a97"><h1 href="#bookmark5">Setting Up the Game</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">As always, I start off with some comments and include the necessary files.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Guess My Number</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// The classic number guessing game</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;cstdlib&gt; #include &lt;ctime&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I include <span class="s35">cstdlib </span>because I plan to generate a random number. I include <span class="s35">ctime</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">because I want to seed the random number generator with the current time.</p><p class="s19" style="padding-top: 2pt;padding-left: 288pt;text-indent: 0pt;text-align: left;"><a name="bookmark305">Introducing Guess My Number 75</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="155" height="472" alt="image" src="Image_118.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 2.15</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The game loop applied to Guess My Number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Next, I start the <span class="s35">main() </span>function by picking a random number, setting the number of tries to 0, and establishing a variable for the player<span class="s12">’</span>s guess:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0)));    //seed random number generator</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int secretNumber = rand() % 100 + 1;    // random number between 1 and 100 int tries = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int guess;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\tWelcome to Guess My Number\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark219">76 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark306">&zwnj;</a><a name="bookmark307">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a98"><h1 href="#bookmark5">Creating the Game Loop</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, I write the game loop.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">do</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Enter a guess: &quot;; cin &gt;&gt; guess;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">++tries;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;"><a name="bookmark220">if (guess &gt; secretNumber)</a><a name="bookmark308">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;"><a name="bookmark221">{</a><a name="bookmark309">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Too high!\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else if (guess &lt; secretNumber)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Too low!\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nThat’s it! You got it in &quot; &lt;&lt; tries &lt;&lt; &quot; guesses!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (guess != secretNumber);</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I get the player<span class="s12">’</span>s guess, increment the number of tries, and then tell the player if his guess is too high, too low, or right on the money. If the player<span class="s12">’</span>s guess is correct, the loop ends. Notice that the <span class="s35">if </span>statements are nested inside the <span class="s35">while </span>loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a99"><h1 href="#bookmark5">Wrapping Up the Game</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Once the player has guessed the secret number, the loop and game are over. All that<span class="s12">’</span>s left to do is end the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a100">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can use the truth or falsity of an expression to branch to (or skip) sections of code.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 389pt;text-indent: 0pt;text-align: left;"><a name="bookmark310">Summary 77</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>You can represent truth or falsity with the keywords, <span class="s35">true </span>and <span class="s35">false</span>.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can evaluate any value or expression for truth or falsity.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span>Any non-zero value can be interpreted as <span class="s35">true</span>, while 0 can be inter- preted as false.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A common way to create an expression to be evaluated as <span class="s35">true </span>or <span class="s35">false</span></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">is to compare values with the relational operators.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">if </span>statement tests an expression and executes a section of code only if the expression is <span class="s35">true</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">else </span>clause of an <span class="s35">if </span>statement specifies code that should be executed only if the expression tested in the <span class="s35">if </span>statement is <span class="s35">false</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">switch </span>statement tests a value that can be treated as an <span class="s35">int </span>and exe- cutes a section of code labeled with the corresponding value.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">default </span>keyword, when used in a <span class="s35">switch </span>statement, specifies code to be executed if the value tested in the <span class="s35">switch </span>statement matches no listed values.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">while </span>loop executes a section of code if an expression is <span class="s35">true </span>and repeats the code as long as the expression is <span class="s35">true</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A <span class="s35">do </span>loop executes a section of code and then repeats the code as long as the expression is <span class="s35">true</span>.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Used in a loop, the <span class="s35">break </span>statement immediately ends the loop.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Used in a loop, the <span class="s35">continue </span>statement immediately causes the control of the program to branch to the top of the loop.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">&amp;&amp; </span>(AND) operator combines two simpler expressions to create a new expression that is <span class="s35">true </span>only if both simpler expressions are <span class="s35">true</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">|| </span>(OR) operator combines two simpler expressions to create a new expression that is <span class="s35">true </span>if either simpler expression is <span class="s35">true</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">! </span>(NOT) operator creates a new expression that is the opposite truth value of the original.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">The game loop is a generalized representation of the flow of events in a game, the core of which repeats.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark222">78 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark311">&zwnj;</a><a name="bookmark312">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The file <span class="s35">cstdlib </span>contains functions that deal with generating random numbers.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The function <span class="s35">srand()</span>, defined in <span class="s35">cstdlib</span>, seeds the random number generator.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>The function <span class="s35">rand()</span>, defined in <span class="s35">cstdlib</span>, returns a random number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a101">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Do you have to use the keywords <span class="s35">true </span>and <span class="s35">false</span>?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No, but it<span class="s12">’</span>s a good idea. Before the advent of the keywords <span class="s35">true </span>and <span class="s35">false</span>, programmers often used 1 to represent true and 0 to represent false. However, now that <span class="s35">true </span>and <span class="s35">false </span>are available, it<span class="s12">’</span>s best to use them instead of the old-fashioned 1 and 0.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can you assign a <span class="s35">bool  </span>variable something other than <span class="s35">true  </span>or <span class="s35">false</span>?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A:  Yes.  You  can  assign  an  expression  to  a  <span class="s35">bool  </span>variable,  which  will  store  the truth or falsity of the expression.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can you use a <span class="s35">switch </span>statement to test some non-integer value?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: No. <span class="s35">switch </span>statements only work with values that can be interpreted as integers (including <span class="s35">char </span>values).</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: How can you test a single non-integer value against multiple values if you can<span class="s12">’</span>t use a <span class="s35">switch </span>statement?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: You can use a series of <span class="s35">if </span>statements. Q: What<span class="s12">’</span>s an infinite loop?</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A loop that will never end, regardless of user input. Q: Why are infinite loops considered bad?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because a program stuck in an infinite loop will never end on its own. It has to be shut down by the operating system. In the worst case, a user will have to shut his computer off to end a program stuck in an infinite loop.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Won<span class="s12">’</span>t a compiler catch an infinite loop and flag it as an error?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: No. An infinite loop is a logical error<span class="s12">—</span>the kind of error a programmer must track down.</p><p class="s19" style="padding-top: 2pt;padding-left: 322pt;text-indent: 0pt;text-align: left;"><a name="bookmark313">Questions and Answers 79</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">Q: If infinite loops are a bad thing, then isn<span class="s12">’</span>t a <span class="s35">while (true) </span>loop a bad thing?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: No. When a programmer creates a <span class="s35">while (true) </span>loop, he should provide a way for the loop to end (usually through a <span class="s35">break </span>statement).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why would a programmer create a <span class="s35">while (true) </span>loop?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: <span class="s35">while (true) </span>loops are often used for the main loop of a program, like the game loop.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">Q: Why do some people feel that using a <span class="s35">break </span>statement to exit a loop is poor programming?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Because indiscriminate use of <span class="s35">break </span>statements can make it hard to under- stand the conditions under which a loop ends. However, sometimes the use of a <span class="s35">while (true) </span>loop along with a <span class="s35">break </span>statement can be clearer than creating the same loop in a more traditional way.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s a pseudorandom number?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: A random number that<span class="s12">’</span>s usually generated by a formula. As a result, a series of pseudorandom numbers is not truly random, but good enough for most purposes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s seeding a random number generator?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: It<span class="s12">’</span>s giving the random number generator a seed, such as an integer, which affects the way the generator produces random numbers. If you don<span class="s12">’</span>t seed a random number generator, it will produce the same series of numbers each time its run from the beginning of a program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Don<span class="s12">’</span>t you always want to seed the random number generator before using it?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Not necessarily. You might want a program to produce the exact same sequence of <span class="s12">“</span>random<span class="s12">” </span>numbers each time it runs for testing purposes, for example.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How can I generate more truly random numbers?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: There are third-party libraries that produce better pseudorandom numbers than the ones that typically come with C++ compilers.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark223">80 Chapter 2 </a><span class="s32">n </span>Truth, Branching, and the Game Loop: Guess My Number<a name="bookmark314">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Do all games use the game loop?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: The game loop is just a way of looking at a typical game<span class="s12">’</span>s flow of events. And just because this paradigm fits a particular game, that doesn<span class="s12">’</span>t necessarily mean that the game is implemented with a loop around the bulk of its code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a102">Discussion Questions</a></p><ol id="l5"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What kinds of things would be difficult to program without loops?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark224">What are the advantages and disadvantages of the </a><span class="s35">switch </span>statement ver- sus a series of <span class="s35">if </span>statements?<a name="bookmark315">&zwnj;</a></p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">When might you omit a <span class="s35">break </span>statement from the end of a <span class="s35">case </span>in a</p><p class="s35" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">switch <span class="p">statement?</span></p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">When should you use a <span class="s35">while </span>loop over a <span class="s35">do </span>loop?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Describe your favorite game in terms of the game loop. Is the game loop a good fit?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a103">Exercises</a></p><ol id="l6"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Rewrite the Menu Chooser program from this chapter using an enumera- tion to represent difficulty levels. The variable <span class="s35">choice </span>will still be of type <span class="s35">int</span>.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following loop?</p><p class="s35" style="padding-top: 8pt;padding-left: 66pt;text-indent: -1pt;line-height: 91%;text-align: left;">int x = 0; while (x)</p><p class="s35" style="padding-top: 1pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-left: 86pt;text-indent: 0pt;line-height: 9pt;text-align: left;">++x;</p><p class="s35" style="padding-left: 86pt;text-indent: 0pt;line-height: 10pt;text-align: left;">cout &lt;&lt; x &lt;&lt; endl;</p><p class="s35" style="padding-left: 66pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Write a new version of the Guess My Number program in which the player and the computer switch roles. That is, the player picks a number and the computer must guess what it is.</p></li></ol><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s27" name="bookmark316">chapter 3</a><a name="bookmark355">&zwnj;</a><a name="bookmark356">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_119.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s28" name="bookmark317">For Loops, Strings, and Arrays: Word Jumble</a><a name="bookmark357">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen how to work with single values, but in this chapter you<span class="s12">’</span>ll learn how to work with sequences of data. You<span class="s12">’</span>ll learn more about strings<span class="s12">—</span>objects for sequences of characters. You<span class="s12">’</span>ll also see how to work with sequences of any type. And you<span class="s12">’</span>ll discover a new type of loop that<span class="s12">’</span>s perfect for use with these sequences. Specifically, you<span class="s12">’</span>ll learn to:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">for </span>loops to iterate over sequences</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use objects, which combine data and functions</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Use <span class="s35">string </span>objects and their member functions to work with sequences of characters</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use arrays to store, access, and manipulate sequences of any type</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Use multidimensional arrays to better represent certain collections of data</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a104">Using for Loops</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You met one type of loop in Chapter 2<span class="s12">—</span>the <span class="s35">while </span>loop. Well, it<span class="s12">’</span>s time to meet another<span class="s12">—</span>the <span class="s35">for </span>loop. Like its cousin the <span class="s35">while </span>loop, the <span class="s35">for </span>loop lets you repeat a section of code, but <span class="s35">for </span>loops are particularly suited for counting and moving through a sequence of things (like the items in an RPG character<span class="s12">’</span>s inventory).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">81</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark318">82 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark358">&zwnj;</a><a name="bookmark359">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Here<span class="s12">’</span>s the generic form of <span class="s35">for </span>loop:</p><p class="s35" style="padding-top: 6pt;padding-left: 67pt;text-indent: -26pt;line-height: 119%;text-align: left;">for (<i>initialization</i>; <i>test</i>; <i>action</i>) <i>statement</i>;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s38">initialization </span>is a statement that sets up some initial condition for the loop. (For example, it might set a counter variable to 0.) The expression <span class="s38">test </span>is tested each time before the loop body executes, just as in a <span class="s35">while </span>loop. If <span class="s38">test </span>is <span class="s35">false</span>, the program moves on to the statement after the loop. If <span class="s38">test </span>is true, the program executes <span class="s38">statement</span>. Next, <span class="s38">action </span>is executed (which often involves incrementing a counter variable). The cycle repeats until <span class="s38">test </span>is <span class="s35">false</span>, at which point the loop ends.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a105"><h1 href="#bookmark5">Introducing the Counter Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Counter program counts forward, backward, and by fives. It even counts out a grid with rows and columns. It accomplishes all of this through the use of <span class="s35">for </span>loops. Figure 3.1 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_120.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 3.1</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">for <span class="s19">loops do all of the counting, while a pair of nested </span>for <span class="s19">loops displays the grid.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 3 folder; the filename is <span class="s35">counter.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 358pt;text-indent: 0pt;text-align: left;">Using for Loops 83</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Counter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates for loops #include &lt;iostream&gt; using namespace std;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Counting forward:\n&quot;; for (int i = 0; i &lt; 10; ++i)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i &lt;&lt; &quot; &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n\nCounting backward:\n&quot;; for (int i = 9; i &gt;= 0; --i)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i &lt;&lt; &quot; &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n\nCounting by fives:\n&quot;; for (int i = 0; i &lt;= 50; i += 5)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i &lt;&lt; &quot; &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\nCounting with null statements:\n&quot;; int count = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for ( ; count &lt; 10; )</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; count &lt;&lt; &quot; &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">++count;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n\nCounting with nested for loops:\n&quot;; const int ROWS = 5;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const int COLUMNS = 3;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; ROWS; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark360">84 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int j = 0; j &lt; COLUMNS; ++j)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i &lt;&lt; &quot;,&quot; &lt;&lt; j &lt;&lt; &quot; &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark319">Tra p</a><a name="bookmark361">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_121.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">If you’re using an older compiler that doesn’t fully implement the current C++ standard, when you try to compile this program, you might get an error that says something like: <span class="s35">error: ’i’ : redefinition; multiple initialization</span>.</p><p style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a href="http://www.microsoft.com/express/" class="s54" target="_blank">The best solution is to use a modern, compliant compiler. Luckily, you can download the popular (and free) Microsoft Visual C++ Express Edition IDE, which includes a modern compiler, from http://www.microsoft.com/express/.</a></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">If you must use your old compiler, you should declare any <span class="s35">for </span>loop counter variables just once for all <span class="s35">for </span>loops in a scope. I cover the topic of scopes in Chapter 5, “Functions: Mad Lib.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_122.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a106"><h1 href="#bookmark5">Counting with for Loops</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first <span class="s35">for </span>loop counts from 0 to 9. The loop begins:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">for (int i = 0; i &lt; 10; ++i)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The  initialization  statement,  <span class="s35">int  i  =  0</span>,  declares  <span class="s35">i  </span>and  initializes  it  to  0.  The expression <span class="s35">i &lt; 10  </span>says  that  the loop will continue  as  long as  <span class="s35">i  </span>is less  than 10. Lastly, the action statement, <span class="s35">++i</span>, says <span class="s35">i </span>is to be incremented each time the loop body finishes. As a result, the loop <span class="s11">iterates </span>10 times<span class="s12">—</span>once for each of the values 0 through 9. And during each iteration, the loop body displays the value of <span class="s35">i</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next <span class="s35">for </span>loop counts from 9 down to 0. The loop begins:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">for (int i = 9; i &gt;= 0; --i)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Here, <span class="s35">i </span>is initialized to 9, and the loop continues as long as <span class="s35">i </span>is greater than or equal to 0. Each time the loop body finishes, <span class="s35">i </span>is decremented. As a result, the loop displays the values 9 through 0.</p><p class="s19" style="padding-top: 2pt;padding-left: 358pt;text-indent: 0pt;text-align: left;"><a name="bookmark362">Using for Loops 85</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next loop counts from 0 to 50, by fives. The loop begins:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt;= 50; i += 5)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Here, <span class="s35">i </span>is initialized to 0, and the loop continues as long as <span class="s35">i </span>is less than or equal to 50. But notice the action statement, <span class="s35">i += 5</span>. This statement increases <span class="s35">i </span>by five each time the loop body finishes. As a result, the loop displays the values 0, 5, 10, 15, and so on. The expression <span class="s35">i &lt;= 50 </span>says to execute the loop body as long as <span class="s35">i </span>is less than or equal to 50.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark320">You can initialize a counter variable, create a test condition, and update the counter variable with any values you want. However, the most common thing to do is to start the counter at 0 and increment it by 1 after each loop iteration.</a><a name="bookmark363">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Finally, the caveats regarding infinite loops that you learned about while studying <span class="s35">while </span>loops apply equally well to <span class="s35">for </span>loops. Make sure you create loops that can end; otherwise, you<span class="s12">’</span>ll have a very unhappy gamer on your hands.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="h1" name="a107">Using Empty Statements in for </a><h1 href="#bookmark5">Loops</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can use empty statements in creating your <span class="s35">for </span>loop, as I did in the following loop:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for ( ; count &lt; 10; )</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I used an empty statement for the initialization and action statements. That<span class="s12">’</span>s fine because I declared and initialized <span class="s35">count </span>before the loop and incremented it inside the loop body. This loop displays the same sequence of integers as the very first loop in the program. Although the loop might look odd, it<span class="s12">’</span>s perfectly legal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_123.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Different game programmers have different traditions. In the last chapter, you saw that you can create a loop that continues until it reaches an exit statement—such as a <span class="s35">break</span>—using <span class="s35">while (true)</span>. Well, some programmers prefer to create these kinds of loops using a <span class="s35">for </span>statement that begins <span class="s35">for (;;)</span>. Because the test expression in this loop is the empty statement, the loop will continue until it encounters some exit statement.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_124.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark321">86 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark364">&zwnj;</a><a name="bookmark365">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a108"><h1 href="#bookmark5">Nesting for Loops</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can nest <span class="s35">for </span>loops by putting one inside the other. That<span class="s12">’</span>s what I did in the following section of code, which counts out the elements of a grid. The outer loop, which begins:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">for (int i = 0; i &lt; ROWS; ++i)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">simply executes its loop body <span class="s35">ROWS </span>(five) times. But it just so happens that there<span class="s12">’</span>s another <span class="s35">for </span>loop inside this loop, which begins:</p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int j = 0; j &lt; COLUMNS; ++j)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As a result, the inner loop executes in full for each iteration of the outer loop. In this case, that means the inner loop executes <span class="s35">COLUMNS </span>(three) times, for the <span class="s35">ROWS </span>(five) times the outer loop iterates, for a total of 15 times. Specifically, here<span class="s12">’</span>s what happens:</p><ol id="l7"><li><p style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">The outer <span class="s35">for </span>loop declares <span class="s35">i </span>and initializes it to 0. Since <span class="s35">i </span>is less than</p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;"><span class="s35">ROWS </span>(5), the program enters the outer loop<span class="s12">’</span>s body.</p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">The inner loop declares <span class="s35">j </span>and initializes it to 0. Since <span class="s35">j </span>is less than <span class="s35">COLUMNS </span>(3), the program enters its loop body, sending the values of <span class="s35">i </span>and <span class="s35">j </span>to <span class="s35">cout</span>, which displays 0, 0.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">The program reaches the end of the body of the inner loop and increments <span class="s35">j </span>to 1. Since <span class="s35">j </span>is still less than <span class="s35">COLUMNS </span>(3), the program executes the inner loop<span class="s12">’</span>s body again, displaying 0, 1.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">The program reaches the end of the inner loop<span class="s12">’</span>s body and increments <span class="s35">j </span>to 2. Since <span class="s35">j </span>is still less than <span class="s35">COLUMNS </span>(3), the program executes the inner loop<span class="s12">’</span>s body again, displaying 0, 2.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">The program reaches the end of the inner loop<span class="s12">’</span>s body and increments <span class="s35">j </span>to 3. This time, however, <span class="s35">j </span>is not less than <span class="s35">COLUMNS </span>(3) and the inner loop ends.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">The program finishes the first iteration of the outer loop by sending <span class="s35">endl</span></p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">to <span class="s35">cout</span>, ending the first row.</p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">The program reaches the end of the outer loop<span class="s12">’</span>s body and increments <span class="s35">i </span>to 1. Since <span class="s35">i </span>is less than <span class="s35">ROWS </span>(5), the program enters the outer loop<span class="s12">’</span>s body again.</p><p class="s19" style="padding-top: 2pt;padding-left: 325pt;text-indent: 0pt;text-align: left;"><a name="bookmark322">Understanding Objects 87</a><a name="bookmark366">&zwnj;</a><a name="bookmark367">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">The program reaches the inner loop, which starts from the beginning once again, by declaring and initializing <span class="s35">j </span>to 0. The program goes through the process I described in Steps 2 through 7, displaying the sec- ond row of the grid. This process continues until all five rows have been displayed.</p></li></ol><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Again, the important thing to remember is that the inner loop is executed in full for each iteration of the outer loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a109">Understanding Objects</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far you<span class="s12">’</span>ve seen how to store individual pieces of information in variables and how to manipulate those variables using operators and functions. But most of the things you want to represent in games<span class="s12">—</span>such as, say, an alien spacecraft<span class="s12">— </span>are objects. They<span class="s12">’</span>re encapsulated, cohesive things that combine qualities (such as an energy level) and abilities (for example, firing weapons). Often it makes no sense to talk about the individual qualities and abilities in isolation from each other.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Fortunately, most modern programming languages let you work with software objects  (often  just  called  <span class="s11">objects</span>)  that  combine  data  and  functions.  A  data element of an  object is called a <span class="s11">data member</span>, while a function of an  object is called  a  <span class="s11">member  function</span>.  As  a  concrete  example,  think  about  that  alien spacecraft. An alien spacecraft object might be of a new type called <span class="s35">Spacecraft</span>, defined by a game programmer, and might have a data member for its energy level and a member function to fire its weapons. In practice, an object<span class="s12">’</span>s energy level might be stored in its data member <span class="s35">energy </span>as an <span class="s35">int</span>, and its ability to fire</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">its weapons might be defined in a member function called <span class="s35">fireWeapons()</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every object of the same type has the same basic structure, so each object will have the same set of data members and member functions. However, as an individual, each object will have its own values for its data members. If you had a squadron of five alien spacecrafts, each would have its own energy level. One might have an energy level of 75, while another might have a level of only 10, and so on. Even if two crafts have the same energy level, each would belong to a unique spacecraft. Each craft could also fire its own weapons with a call to its member function, <span class="s35">fireWeapons()</span>. Figure 3.2 illustrates the concept of an alien spacecraft.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark368">88 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="169" height="305" alt="image" src="Image_125.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 3.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">This representation of the definition of an alien spacecraft says that each object will have a data member called <span class="s35">energy </span>and a member function called <span class="s35">fireWeapons()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The cool thing about objects is that you don<span class="s12">’</span>t need to know the implementation details to use them<span class="s12">—</span>just as you don<span class="s12">’</span>t need to know how to build a car in order to drive one. You only have to know the object<span class="s12">’</span>s data members and member functions<span class="s12">—</span>just as you only need to know where a car<span class="s12">’</span>s steering wheel, gas pedal, and brake pedal are located.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can store objects in variables, just like with built-in types. Therefore, you could store an alien spacecraft object in a variable of the <span class="s35">Spacecraft  </span>type. You can  access  data  members  and  member  functions  using  the  member  selection operator (<span class="s35">.</span>), by placing the operator after the variable name of the object. So if you want your alien spacecraft, <span class="s35">ship</span>, to fire its weapons only if its energy level is greater than <span class="s35">10</span>, you could write:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">// ship is an object of Spacecraft type if (ship.energy &gt; 10)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">ship.fireWeapons()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 337pt;text-indent: 0pt;text-align: left;"><a name="bookmark323">Using String Objects 89</a><a name="bookmark369">&zwnj;</a><a name="bookmark370">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s35">ship.energy </span>accesses the object<span class="s12">’</span>s <span class="s35">energy </span>data member, while <span class="s35">ship.fireWeapons()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">calls the object<span class="s12">’</span>s <span class="s35">fireWeapons() </span>member function.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Although you can<span class="s12">’</span>t make your own new types (like for an alien spacecraft) just yet, you can work with previously defined object types. And that<span class="s12">’</span>s next on the agenda.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="s30" name="a110">Using String Objects</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark324"><span class="s35">string </span></a>objects, which you met briefly in Chapter 1, are the perfect way to work with sequences of characters, whether you<span class="s12">’</span>re writing a complete word puzzle game or simply storing a player<span class="s12">’</span>s name. A <span class="s35">string </span>is actually an object, and it provides its own set of member functions that allow you to do a range of things with the <span class="s35">string </span>object<span class="s12">—</span>everything from simply getting its length to performing complex character substitutions. In addition, strings are defined so that they work intuitively with a few of the operators you already know.<a name="bookmark371">&zwnj;</a></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="h1" name="a111">Introducing the String Tester </a><h1 href="#bookmark5">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The String Tester program uses the <span class="s35">string </span>object equal to <span class="s35">&quot;Game Over!!!&quot; </span>and tells you its length, the index (position number) of each character, and whether or not certain substrings can be found in it. In addition, the program erases parts of the <span class="s35">string </span>object. Figure 3.3 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="275" alt="image" src="Image_126.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 3.3</p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">String <span class="s19">objects are combined, changed, and erased through familiar operators and </span>string <span class="s19">member functions.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">90 Chapter 3 <span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 3 folder; the filename is <span class="s35">string_tester.cpp</span>.</p><p class="s35" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// String Tester</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates string objects</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">string word1 = &quot;Game&quot;; string word2(&quot;Over&quot;); string word3(3, ’!’);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 8pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">string phrase = word1 + &quot; &quot; + word2 + word3; cout &lt;&lt; &quot;The phrase is: &quot; &lt;&lt; phrase &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 8pt;padding-left: 62pt;text-indent: 0pt;line-height: 298%;text-align: left;">cout &lt;&lt; &quot;The phrase has &quot; &lt;&lt; phrase.size() &lt;&lt; &quot; characters in it.\n\n&quot;; cout &lt;&lt; &quot;The character at position 0 is: &quot; &lt;&lt; phrase[0] &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Changing the character at position 0.\n&quot;; phrase[0] = ’L’;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;The phrase is now: &quot; &lt;&lt; phrase &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (unsigned int i = 0; i &lt; phrase.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Character at position &quot; &lt;&lt; i &lt;&lt; &quot; is: &quot; &lt;&lt; phrase[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe sequence ’Over’ begins at location &quot;; cout &lt;&lt; phrase.find(&quot;Over&quot;) &lt;&lt; endl;</p><p class="s19" style="padding-top: 2pt;padding-left: 337pt;text-indent: 0pt;text-align: left;"><a name="bookmark372">Using String Objects 91</a></p><p class="s35" style="padding-top: 24pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (phrase.find(&quot;eggplant&quot;) == string::npos)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;’eggplant’ is not in the phrase.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">phrase.erase(4, 5);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The phrase is now: &quot; &lt;&lt; phrase &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">phrase.erase(4);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The phrase is now: &quot; &lt;&lt; phrase &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark325">phrase.erase();</a><a name="bookmark373">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The phrase is now: &quot; &lt;&lt; phrase &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (phrase.empty())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nThe phrase is no more.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a112"><h1 href="#bookmark5">Creating string Objects</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first thing I do in <span class="s35">main() </span>is create three strings in three different ways:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">string word1 = &quot;Game&quot;; string word2(&quot;Over&quot;); string word3(3, ’!’);</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the first line of this group, I simply create the <span class="s35">string </span>object <span class="s35">word1 </span>using the assignment operator, the same way you<span class="s12">’</span>ve seen for other variables. As a result, <span class="s35">word1 </span>is <span class="s35">&quot;Game&quot;</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next, I create <span class="s35">word2 </span>by placing the <span class="s35">string </span>object to which I want the variable set between a pair of parentheses. As a result, <span class="s35">word2 </span>is <span class="s35">&quot;Over&quot;</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Finally,  I  create  <span class="s35">word3  </span>by  supplying  between  a  pair  of  parentheses  a  number followed  by  a  single  character.  This  produces  a  <span class="s35">string  </span>object  made  up  of  the provided character, which has a length equal to the number. As a result, <span class="s35">word3 </span>is <span class="s35">&quot;!!!&quot;</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark326">92 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark374">&zwnj;</a><a name="bookmark375">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a113"><h1 href="#bookmark5">Concatenating string Objects</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I create a new <span class="s35">string </span>object, <span class="s35">phrase</span>, by concatenating the first three</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">string <span class="p">objects:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">string phrase = word1 + &quot; &quot; + word2 + word3;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">As a result, <span class="s35">phrase </span>is <span class="s35">&quot;Game Over!!!&quot;</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark327">Notice that the </a><span class="s35">+ </span>operator, which you<span class="s12">’</span>ve seen work only with numbers, also concatenates <span class="s35">string </span>objects. That<span class="s12">’</span>s because the <span class="s35">+ </span>operator has been overloaded. Now, when you first hear the term <span class="s11">overloaded</span>, you might think it<span class="s12">’</span>s a bad thing<span class="s12">—</span>the operator is about to blow! But it<span class="s12">’</span>s a good thing. Operator over- loading redefines a familiar operator so it works differently when used in a new, previously undefined context. In this case, I use the <span class="s35">+ </span>operator not to add numbers, but to join <span class="s35">string </span>objects. I<span class="s12">’</span>m able to do this only because the <span class="s35">string </span>type specifically overloads the <span class="s35">+ </span>operator and defines it so the operator means <span class="s35">string </span>object concatenation when used with strings.<a name="bookmark376">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="h1" name="a114">Using the size() Member </a><h1 href="#bookmark5">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Okay, it<span class="s12">’</span>s time to take a look at a <span class="s35">string </span>member function. Next, I use the member function <span class="s35">size()</span>:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The phrase has &quot; &lt;&lt; phrase.size() &lt;&lt; &quot; characters in it.\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">phrase.size() </span>calls the member function <span class="s35">size() </span>of the <span class="s35">string </span>object <span class="s35">phrase </span>through the member selection operator <span class="s35">. </span>(the dot). The <span class="s35">size() </span>member function simply returns an unsigned integer value of the size of the <span class="s35">string </span>object<span class="s12">—</span>its number of characters. Because the <span class="s35">string </span>object is <span class="s35">&quot;Lame Over!!!&quot;</span>, the member function returns 12. (Every character counts, including spaces.) Of course, calling <span class="s35">size() </span>for another <span class="s35">string </span>object might return a different result based on the number of characters in the <span class="s35">string </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_127.png"/></span></p><p class="s35" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">string <span class="s19">objects also have a member function </span>length()<span class="s19">, which, just like </span>size()<span class="s19">, returns the number of characters in the </span>string <span class="s19">object.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_128.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 337pt;text-indent: 0pt;text-align: left;"><a name="bookmark328">Using String Objects 93</a><a name="bookmark377">&zwnj;</a><a name="bookmark378">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a115"><h1 href="#bookmark5">Indexing a string Object</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A <span class="s35">string </span>object stores a sequence of <span class="s35">char </span>values. You can access any individual <span class="s35">char  </span>value by providing an index number with the subscripting operator (<span class="s35">[]</span>). That<span class="s12">’</span>s what I do next:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The character at position 0 is: &quot; &lt;&lt; phrase[0] &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first element in a sequence is at position 0. In the previous statement, <span class="s35">phrase</span></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark329">[0] </a><span class="p">is the character G. And because counting begins at 0, the last character in the </span>string <span class="p">object is </span>phrase[11]<span class="p">, even though the </span>string <span class="p">object has 12 characters in it.</span><a name="bookmark379">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_129.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">It’s a common mistake to forget that indexing begins at position 0. Remember, a <span class="s35">string </span>object with <i>n </i>characters in it can be indexed from position 0 to position n 1.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_130.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Not only can you access characters in a <span class="s35">string </span>object with the subscripting operator, but you can also reassign them. That<span class="s12">’</span>s what I do next:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">phrase[0] = ’L’;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I change the first character of <span class="s35">phrase </span>to the character L, which means <span class="s35">phrase</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">becomes <span class="s35">&quot;Lame Over!!!&quot;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_131.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">C<span class="s36">þþ </span>compilers do not perform bounds checking when working with <span class="s35">string </span>objects and the subscripting operator. This means that the compiler doesn’t check to see whether you’re attempting to access an element that doesn’t exist. Accessing an invalid sequence element can lead to disastrous results because it’s possible to write over critical data in your computer’s memory. By doing this, you can crash your program, so take care when using the subscripting operator.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_132.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a116"><h1 href="#bookmark5">Iterating through string Objects</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Given your new knowledge of <span class="s35">for </span>loops and <span class="s35">string </span>objects, it<span class="s12">’</span>s a snap to iterate through the individual characters of a <span class="s35">string </span>object. That<span class="s12">’</span>s what I do next:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (unsigned int i = 0; i &lt; phrase.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Character at position &quot; &lt;&lt; i &lt;&lt; &quot; is: &quot; &lt;&lt; phrase[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark330">94 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark380">&zwnj;</a><a name="bookmark381">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The loop iterates through all of the valid positions of <span class="s35">phrase</span>. It starts with 0 and goes  through  11.  During  each  iteration,  a  character  of  the  <span class="s35">string  </span>object  is displayed with <span class="s35">phrase[i]</span>. Note that I made the loop variable, <span class="s35">i</span>, an <span class="s35">unsigned int </span>because the value returned by <span class="s35">size()  </span>is an unsigned integral type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_133.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Iterating through a sequence is a powerful and often-used technique in games. You might, for example, iterate through hundreds of individual units in a strategy game, updating their status and order. Or you might iterate through the list of vertices of a 3D model to apply some geometric transformation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_134.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="h1" name="a117">Using the find() Member </a><h1 href="#bookmark5">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I use the member function <span class="s35">find() </span>to check whether either of two string literals are contained in <span class="s35">phrase</span>. First, I check for the string literal <span class="s35">&quot;Over&quot;</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThe sequence ’Over’ begins at location &quot;; cout &lt;&lt; phrase.find(&quot;Over&quot;) &lt;&lt; endl;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">find() </span>member function searches the calling <span class="s35">string </span>object for the string supplied as an argument. The member function returns the position number of the first occurrence where the <span class="s35">string </span>object for which you are searching begins in the calling <span class="s35">string </span>object. This means that <span class="s35">phrase.find(&quot;Over&quot;) </span>returns the position number where the first occurrence of <span class="s35">&quot;Over&quot; </span>begins in <span class="s35">phrase</span>. Since <span class="s35">phrase </span>is <span class="s35">&quot;Lame Over!!!&quot;</span>, <span class="s35">find() </span>returns 5. (Remember, position numbers begin at 0, so 5 means the sixth character.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">But what if the string for which you are searching doesn<span class="s12">’</span>t exist in the calling string? I tackle that situation next:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (phrase.find(&quot;eggplant&quot;) == string::npos)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;’eggplant’ is not in the phrase.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">&quot;eggplant&quot;  </span>does not exist in <span class="s35">phrase</span>, <span class="s35">find()  </span>returns a special constant defined  in  the  file  <span class="s35">string</span>,  which  I  access  with  <span class="s35">string::npos</span>.  As  a  result,  the screen displays the message, <span class="s12">“</span><span class="s35">’eggplant’ is not in the phrase.</span><span class="s12">”</span></p><p class="s19" style="padding-top: 2pt;padding-left: 337pt;text-indent: 0pt;text-align: left;"><a name="bookmark331">Using String Objects 95</a><a name="bookmark382">&zwnj;</a><a name="bookmark383">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The constant I access through <span class="s35">string::npos </span>represents the largest possible size of a <span class="s35">string </span>object, so it is greater than any possible valid position number in a <span class="s35">string </span>object. Informally, it means <span class="s12">“</span>a position number that can<span class="s12">’</span>t exist.<span class="s12">” </span>It<span class="s12">’</span>s the perfect return value to indicate that one string couldn<span class="s12">’</span>t be found in another.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_135.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When using <span class="s35">find()</span>, you can supply an optional argument that specifies a character number for the program to start looking for the substring. The following line will start looking for the string literal <span class="s35">&quot;eggplant&quot; </span>beginning at position 5 in the <span class="s35">string </span>object <span class="s35">phrase</span>.</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">location = phrase.find(&quot;eggplant&quot;, 5);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_136.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="h1" name="a118">Using the erase() Member </a><h1 href="#bookmark5">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">erase() </span>member function removes a specified substring from a <span class="s35">string </span>object. One way to call the member function is to specify the beginning position and the length of the substring, as I did in this code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: justify;">phrase.erase(4, 5);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The previous line removes the five-character substring starting at position 4. Because <span class="s35">phrase </span>is <span class="s35">&quot;Lame Over!!!&quot;</span>, the member function removes the substring <span class="s35">Over </span>and, as a result, <span class="s35">phrase </span>becomes <span class="s35">&quot;Lame!!!&quot;</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another way to call <span class="s35">erase() </span>is to supply just the beginning position of the substring. This removes all of the characters starting at that position number to the end of the <span class="s35">string </span>object. That<span class="s12">’</span>s what I do next:</p><p class="s35" style="padding-top: 13pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">phrase.erase(4);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This line removes all of the characters of the <span class="s35">string </span>object starting at position 4. Since <span class="s35">phrase </span>is <span class="s35">&quot;Lame!!!&quot;</span>, the member function removes the substring <span class="s35">!!! </span>and, as a result, <span class="s35">phrase </span>becomes <span class="s35">&quot;Lame&quot;</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Yet another way to call <span class="s35">erase() </span>is to supply no arguments, as I did in this code:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">phrase.erase();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark332">96 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark333">&zwnj;</a><a name="bookmark384">&zwnj;</a><a name="bookmark385">&zwnj;</a><a name="bookmark386">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The previous line erases every character in <span class="s35">phrase</span>. As a result, <span class="s35">phrase </span>becomes the empty string, which is equal to <span class="s35">&quot;&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="h1" name="a119">Using the empty() Member </a><h1 href="#bookmark5">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The <span class="s35">empty() </span>member function returns a <span class="s35">bool </span>value<span class="s12">—</span><span class="s35">true </span>if the <span class="s35">string </span>object is empty and <span class="s35">false  </span>otherwise. I use <span class="s35">empty()  </span>in the following code:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (phrase.empty())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;"><a name="bookmark334">cout &lt;&lt; &quot;\nThe phrase is no more.\n&quot;;</a><a name="bookmark387">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">phrase </span>is equal to the empty string, <span class="s35">phrase().empty </span>returns <span class="s35">true</span>, and the screen displays the message, <span class="s12">“</span>The phrase is no more.<span class="s12">”</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a120">Using Arrays</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">While <span class="s35">string </span>objects provide a great way to work with a sequence of characters, arrays provide a way to work with elements of any type. That means you can use an array to store a sequence of integers for, say, a high-score list. But it also means that you can use arrays to store elements of programmer-defined types, such as a sequence of items that an RPG character might carry.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="h1" name="a121">Introducing the Hero’s Inventory </a><h1 href="#bookmark5">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Hero<span class="s12">’</span>s Inventory program maintains the inventory of a hero from a typical RPG. Like in most RPGs, the hero is from a small, insignificant village, and his father was killed by an evil warlord. (What<span class="s12">’</span>s a quest without a dead father?) Now that the hero has come of age, it<span class="s12">’</span>s time for him to seek his revenge.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In this program, the hero<span class="s12">’</span>s inventory is represented by an array. The array is a sequence of <span class="s35">string </span>objects<span class="s12">—</span>one for each item in the hero<span class="s12">’</span>s possession. The hero trades and even finds new items. Figure 3.4 shows the program in action.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 3 folder; the filename is <span class="s35">heros_inventory.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 373pt;text-indent: 0pt;text-align: left;"><a name="bookmark388">Using Arrays 97</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_137.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 3.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The hero’s inventory is a sequence of <span class="s35">string </span>objects stored in an array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Hero’s Inventory</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates arrays</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">const int MAX_ITEMS = 10; string inventory[MAX_ITEMS];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int numItems = 0; inventory[numItems++] = &quot;sword&quot;; inventory[numItems++] = &quot;armor&quot;; inventory[numItems++] = &quot;shield&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; numItems; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark389">98 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYou trade your sword for a battle axe.&quot;; inventory[0] = &quot;battle axe&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; numItems; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; inventory[0] &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; inventory[0].size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark335">cout &lt;&lt; &quot;\nYou find a healing potion.&quot;; if (numItems &lt; MAX_ITEMS)</a><a name="bookmark390">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">inventory[numItems++] = &quot;healing potion&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You have too many items and can’t carry another.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; numItems; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a122"><h1 href="#bookmark5">Creating Arrays</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It<span class="s12">’</span>s often a good idea to define a constant for the number of elements in an array. That<span class="s12">’</span>s what I did with <span class="s35">MAX_ITEMS</span>, which represents the maximum number of items the hero can carry:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">const int MAX_ITEMS = 10;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You declare an array much the same way you would declare any variable you<span class="s12">’</span>ve seen so far: You provide a type followed by a name. In addition, your compiler must know the size of the array so it can reserve the necessary memory space. You can provide that information following the array name, surrounded by square brackets. Here<span class="s12">’</span>s how I declare the array for the hero<span class="s12">’</span>s inventory:</p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">string inventory[MAX_ITEMS];</p><p class="s19" style="padding-top: 2pt;padding-left: 373pt;text-indent: 0pt;text-align: left;"><a name="bookmark391">Using Arrays 99</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code declares an array <span class="s35">inventory </span>of <span class="s35">MAX_ITEMS string </span>objects. (Because <span class="s35">MAX_ITEMS </span>is 10, that means 10 <span class="s35">string </span>objects.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_138.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can initialize an array with values when you declare it by providing an <i>initializer list</i>—a sequence of elements separated by commas and surrounded by curly braces. Here’s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: 0pt;text-align: justify;">string inventory[MAX_ITEMS] = {&quot;sword&quot;, &quot;armor&quot;, &quot;shield&quot;};</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark336">The preceding code declares an array of </a><span class="s35">string </span>objects, <span class="s35">inventory</span>, that has a size of <span class="s35">MAX_ITEMS</span>. The first three elements of the array are initialized to <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>.<a name="bookmark392">&zwnj;</a></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">If you omit the number of elements when using an initializer list, the array will be created with a size equal to the number of elements in the list. Here’s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: 0pt;text-align: justify;">string inventory[] = {&quot;sword&quot;, &quot;armor&quot;, &quot;shield&quot;};</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Because there are three elements in the initializer list, the preceding line creates an array, <span class="s35">inventory</span>, that is three elements in size. Its elements are <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_139.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a123"><h1 href="#bookmark5">Indexing Arrays</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You  index  arrays  much  like  you  index  <span class="s35">string  </span>objects.  You  can  access  any individual element by providing an index number with the subscripting operator (<span class="s35">[]</span>).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, I add three items to the hero<span class="s12">’</span>s inventory using the subscripting operator:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int numItems = 0; inventory[numItems++] = &quot;sword&quot;; inventory[numItems++] = &quot;armor&quot;; inventory[numItems++] = &quot;shield&quot;;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I start by defining <span class="s35">numItems </span>for the number of items the hero is carrying at the moment. Next I assign <span class="s35">&quot;sword&quot; </span>to position 0 of the array. Because I use the postfix increment operator, <span class="s35">numItems </span>is incremented after the assignment to the array. The next two lines add <span class="s35">&quot;armor&quot; </span>and <span class="s35">&quot;shield&quot; </span>to the array, leaving <span class="s35">numItems </span>at the correct value of 3 when the code finishes.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Now that the hero is stocked with some items, I display his inventory:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; numItems; ++i)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark393">100 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This should remind you of string indexing. The code loops through the first three elements of <span class="s35">inventory</span>, displaying each <span class="s35">string </span>object in order.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark337">Next, the hero trades his sword for a battle axe. I accomplish this through the following line:</a><a name="bookmark394">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">inventory[0] = &quot;battle axe&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark338">The previous code reassigns the element at position 0 in </a><span class="s35">inventory </span>with the <span class="s35">string </span>object <span class="s35">&quot;battle axe&quot;</span>. Now the first three elements of <span class="s35">inventory </span>are <span class="s35">&quot;battle axe&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>.<a name="bookmark395">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_140.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Array indexing begins at 0, just as you saw with <span class="s35">string </span>objects. This means that the following code defines a five-element array:</p><p class="s35" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: left;">int highScores[5];</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Valid position numbers are 0 through 4, inclusive. There is no element <span class="s35">highScores[5]</span>! An attempt to access <span class="s35">highScores[5] </span>could lead to disastrous results, including a program crash.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_141.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a124"><h1 href="#bookmark5">Accessing Member Functions of an Array Element</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can access the member functions of an array element by writing the array element, followed by the member selection operator, followed by the member function name. This sounds a bit complicated, but it<span class="s12">’</span>s not. Here<span class="s12">’</span>s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[0].size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">inventory[0].size() </span>means the program should call the <span class="s35">size() </span>member function of the element <span class="s35">inventory[0]</span>. In this case, because <span class="s35">inventory[0] </span>is <span class="s35">&quot;battle axe&quot;</span>, the call returns 10, the number of characters in the <span class="s35">string </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark5" class="h1" name="a125">Being Aware of Array </a><h1 href="#bookmark5">Bounds</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you learned, you have to be careful when you index an array. Because an array has a fixed size, you can create an integer constant to store the size of an array. Again, that<span class="s12">’</span>s just what I did in the beginning of the program:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">const int MAX_ITEMS = 10;</p><p class="s19" style="padding-top: 2pt;padding-left: 292pt;text-indent: 0pt;text-align: left;"><a name="bookmark396">Understanding C-Style Strings 101</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the following lines, I use <span class="s35">MAX_ITEMS </span>to protect myself before adding another item to the hero<span class="s12">’</span>s inventory:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (numItems &lt; MAX_ITEMS)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">inventory[numItems++] = &quot;healing potion&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You have too many items and can’t carry another.&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark339">In the preceding code, I first checked to see whether </a><span class="s35">numItems </span>is less than <span class="s35">MAX_ITEMS</span>. If it is, then I can safely use <span class="s35">numItems </span>as an index and assign a new <span class="s35">string </span>object to the array. In this case <span class="s35">numItems </span>is 3, so I assign the string <span class="s35">&quot;healing potion&quot; </span>to array position 3. If this hadn<span class="s12">’</span>t been the case, then I would have displayed the message, <span class="s12">“</span>You have too many items and can<span class="s12">’</span>t carry another.<span class="s12">”</span><a name="bookmark397">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So what happens if you do attempt to access an array element outside the bounds of the array? It depends, because you<span class="s12">’</span>d be accessing some unknown part of the computer<span class="s12">’</span>s memory. At worst, if you attempt to assign some value to an element outside the bounds of an array you could cause your program to do unpredictable things and it might even crash.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Testing to make sure that an index number is a valid array position before using it is called <span class="s11">bounds checking</span>. It<span class="s12">’</span>s critical for you to perform bounds checking when there<span class="s12">’</span>s a chance that an index you want to use might not be valid.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a126">Understanding C-Style Strings</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Before <span class="s35">string </span>objects came along, C++ programmers represented strings with arrays of characters terminated by a null character. These arrays of characters are now called <span class="s11">C-style strings </span>because the practice began in C programs. You can declare and initialize a C-style string like you would any other array:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">char phrase[] = &quot;Game Over!!!&quot;;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C-style  strings  terminate  with  a  character  called  the  <span class="s11">null  character  </span>to  signify their end. You can write the null character as <span class="s35">’\0’</span>. I didn<span class="s12">’</span>t need to use the null character in the previous code because it is stored at the end of the string for me. So  technically,  <span class="s35">phrase  </span>has  13  elements.  (However,  functions  that  work  with</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark398">102 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings will say that <span class="s35">phrase </span>has a length of <span class="s35">12</span>, which makes sense and is in line with how <span class="s35">string </span>objects work.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As with any other type of array, you can specify the array size when you define it. So another way to declare and initialize a C-style string is</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char phrase[81] = &quot;Game Over!!!&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The previous code creates a C-style string that can hold 80 printable characters (plus its terminating null character).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings don<span class="s12">’</span>t have member functions. But the <span class="s35">cstring </span>file, which is part of the standard library, contains a variety of functions for working with C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A nice thing about <span class="s35">string </span>objects is that they<span class="s12">’</span>re designed to work seamlessly with C-style strings. For example, all of the following are completely valid uses of C-style strings with <span class="s35">string </span>objects:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">string word1 = &quot;Game&quot;; char word2[] = &quot; Over&quot;;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">string phrase = word1 + word2; if (word1 != word2)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;word1 and word2 are not equal.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">if (phrase.find(word2) != string::npos)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;word2 is contained in phrase.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can concatenate <span class="s35">string </span>objects and C-style strings, but the result is always a <span class="s35">string </span>object (so the code <span class="s35">char phrase2[] = word1 + word2; </span>would produce an error). You can compare <span class="s35">string </span>objects and C-style strings using the relational operators. And you can even use C-style strings as arguments in <span class="s35">string </span>object member functions.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C-style strings have the same shortcomings as arrays. One of the biggest is that their lengths are fixed. So the moral is: Use <span class="s35">string </span>objects whenever possible, but be prepared to work with C-style strings if necessary.</p><p class="s19" style="padding-top: 2pt;padding-left: 287pt;text-indent: 0pt;text-align: left;"><a name="bookmark340">Using Multidimensional Arrays 103</a><a name="bookmark341">&zwnj;</a><a name="bookmark399">&zwnj;</a><a name="bookmark400">&zwnj;</a><a name="bookmark401">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="s30" name="a127">Using Multidimensional Arrays</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you<span class="s12">’</span>ve seen, sequences are great for games. You can use them in the form of a string to store a player<span class="s12">’</span>s name, or you can use them in the form of an array to store a list of items in an RPG. But sometimes part of a game cries out for more than a linear list of things. Sometimes part of a game literally requires more dimension. For example, while you could represent a chessboard with a 64-element array, it really is much more intuitive to work with it as a two- dimensional entity of 8 8 elements. Fortunately, you can create an array of two or three (or even more) dimensions to best fit your game<span class="s12">’</span>s needs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark5" class="h1" name="a128">Introducing the Tic-Tac-Toe Board </a><h1 href="#bookmark5">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Tic-Tac-Toe Board program displays a tic-tac-toe board. The program displays the board and declares X the winner. Although the program could have been written using a one-dimensional array, it uses a two-dimensional array to represent the board. Figure 3.5 illustrates the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 3 folder; the filename is <span class="s35">tic-tac-toe_board.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_142.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 3.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The tic-tac-toe board is represented by a two-dimensional array.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">104 Chapter 3 <span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Tic-Tac-Toe Board</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates multidimensional arrays #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">const int ROWS = 3; const int COLUMNS = 3;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">char board[ROWS][COLUMNS] = { {’O’, ’X’, ’O’},</p><p class="s35" style="padding-top: 2pt;padding-left: 218pt;text-indent: 0pt;text-align: left;">{’ ’, ’X’, ’X’},</p><p class="s35" style="padding-top: 2pt;padding-left: 218pt;text-indent: 0pt;text-align: left;">{’X’, ’O’, ’O’} };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Here’s the tic-tac-toe board:\n&quot;; for (int i = 0; i &lt; ROWS; ++i)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int j = 0; j &lt; COLUMNS; ++j)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; board[i][j];</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n’X’ moves to the empty location.\n\n&quot;; board[1][0] = ’X’;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Now the tic-tac-toe board is:\n&quot;; for (int i = 0; i &lt; ROWS; ++i)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int j = 0; j &lt; COLUMNS; ++j)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; board[i][j];</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 287pt;text-indent: 0pt;text-align: left;"><a name="bookmark342">Using Multidimensional Arrays 105</a><a name="bookmark402">&zwnj;</a><a name="bookmark403">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\n’X’ wins!&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a129"><h1 href="#bookmark5">Creating Multidimensional Arrays</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One of the first things I do in the program is declare and initialize an array for the tic-tac-toe board.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">char board[ROWS][COLUMNS] = { {’O’, ’X’, ’O’},</p><p class="s35" style="padding-top: 2pt;padding-left: 210pt;text-indent: 0pt;text-align: left;"><a name="bookmark343">{’ ’, ’X’, ’X’},</a><a name="bookmark404">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 210pt;text-indent: 0pt;text-align: left;">{’X’, ’O’, ’O’} };</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code declares a 3 3 (since <span class="s35">ROWS </span>and <span class="s35">COLUMNS </span>are both 3) two- dimensional character array. It also initializes all of the elements.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_143.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">It’s possible to simply declare a multidimensional array without initializing it. Here’s an example:</p><p class="s35" style="padding-top: 6pt;padding-left: 61pt;text-indent: 0pt;text-align: justify;">char chessBoard[8][8];</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The preceding code declares an 8 8, two-dimensional character array, <span class="s35">chessBoard</span>. By the way, multidimensional arrays aren’t required to have the same size for each dimension. The following is a perfectly valid declaration for a game map represented by individual characters:</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: justify;">char map[12][20];</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_144.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a130"><h1 href="#bookmark5">Indexing Multidimensional Arrays</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The next thing I do in the program is display the tic-tac-toe board. But before I get into the details of that, I want to explain how to index an individual array element. You index an individual element of a multidimensional array by supplying a value for each dimension of the array. That<span class="s12">’</span>s what I do to place an X in the array where a space was:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">board[1][0] = ’X’;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The previous code assigns the character to the element at <span class="s35">board[1][0]  </span>(which was  <span class="s35">’  ’</span>).  Then  I  display  the  tic-tac-toe  board  after  the  move  the  same  way  I displayed it before the move.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; ROWS; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark344">106 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark405">&zwnj;</a><a name="bookmark406">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int j = 0; j &lt; COLUMNS; ++j)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; board[i][j];</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By using a pair of nested <span class="s35">for </span>loops, I move through the two-dimensional array and display the character elements as I go, forming a tic-tac-toe board.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="s30" name="a131">Introducing Word Jumble</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Word Jumble is a puzzle game in which the computer creates a version of a word where the letters are in random order. The player has to guess the word to win the game. If the player is stuck, he or she can ask for a hint. Figure 3.6 shows the game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_145.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 3.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hmm<span class="s55">.. .</span>the word looks “jumbled.”</p><p class="s19" style="padding-top: 2pt;padding-left: 311pt;text-indent: 0pt;text-align: left;"><a name="bookmark345">Introducing Word Jumble 107</a><a name="bookmark407">&zwnj;</a><a name="bookmark408">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_146.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Even though puzzle games don’t usually break into the top-ten list of games, major companies still publish them year after year. Why? For one simple reason: They’re profitable. Puzzle games, while not usually blockbusters, can still sell well. There are many gamers out there (casual and hardcore) who are drawn to the Zen of a well-designed puzzle game. And puzzle games cost much less to produce than the high-profile games that require large production teams and years of development time.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_147.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a132"><h1 href="#bookmark6">Setting Up the Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank" name="bookmark346">As usual, I start with some comments and include the files I need. You can download the code for this program from the Course Technology website (www. </a>courseptr.com/downloads). The program is in the Chapter 3 folder; the filename is <span class="s35">word_jumble.cpp</span>.<a name="bookmark409">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Word Jumble</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// The classic word jumble game where the player can ask for a hint</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;cstdlib&gt; #include &lt;ctime&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="h1" name="a133">Picking a Word to </a><h1 href="#bookmark6">Jumble</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">My next task is to pick a word to jumble<span class="s12">—</span>the word the player will try to guess. First, I create a list of words and hints:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">enum fields {WORD, HINT, NUM_FIELDS}; const int NUM_WORDS = 5;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const string WORDS[NUM_WORDS][NUM_FIELDS] =</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{&quot;wall&quot;, &quot;Do you feel you’re banging your head against something?&quot;},</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{&quot;glasses&quot;, &quot;These might help you see the answer.&quot;},</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{&quot;labored&quot;, &quot;Going slowly, is it?&quot;},</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{&quot;persistent&quot;, &quot;Keep at it.&quot;},</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{&quot;jumble&quot;, &quot;It’s what the game is all about.&quot;}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">};</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark410">108 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I declare and initialize a two-dimensional array with words and corresponding hints.   The   enumeration   defines   enumerators   for   accessing   the   array.   For example,  <span class="s35">WORDS[x][WORD]  </span>is  always  a  <span class="s35">string  </span>object  that  is  one  of  the  words, while <span class="s35">WORDS[x][HINT]  </span>is the corresponding hint.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_148.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can list a final enumerator in an enumeration as a convenient way to store the number of elements. Here’s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">enum difficulty {EASY, MEDIUM, HARD, NUM_DIFF_LEVELS};</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;"><a name="bookmark347">cout &lt;&lt; &quot;There are &quot; &lt;&lt; NUM_DIFF_LEVELS &lt;&lt; &quot; difficulty levels.&quot;;</a><a name="bookmark411">&zwnj;</a></p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">In the previous code, <span class="s35">NUM_DIFF_LEVELS </span>is 3, the exact number of difficulty levels in the enumeration. As a result, the second line of code displays the message, &quot;There are 3 difficulty levels.&quot;</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_149.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I pick a random word from my choices.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0))); int choice = (rand() % NUM_WORDS);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">string theWord = WORDS[choice][WORD];    // word to guess string theHint = WORDS[choice][HINT];    // hint for word</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I generate a random index based on the number of words in the array. Then I assign both the random word at that index and it<span class="s12">’</span>s corresponding hint to the variables <span class="s35">theWord </span>and <span class="s35">theHint</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a134"><h1 href="#bookmark6">Jumbling the Word</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Now that I have the word for the player to guess, I need to create a jumbled version of it.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">string jumble = theWord;    // jumbled version of word int length = jumble.size();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; length; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">int index1 = (rand() % length); int index2 = (rand() % length); char temp = jumble[index1]; jumble[index1] = jumble[index2]; jumble[index2] = temp;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 311pt;text-indent: 0pt;text-align: left;"><a name="bookmark348">Introducing Word Jumble 109</a><a name="bookmark412">&zwnj;</a><a name="bookmark413">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the preceding code, I created a copy of the word <span class="s35">jumble </span>to<span class="s51">.. .</span>well, jumble. I generated two random positions in the <span class="s35">string </span>object and swapped the characters at those positions. I did this a number of times equal to the length of the word.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a135"><h1 href="#bookmark6">Welcoming the Player</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Now it<span class="s12">’</span>s time to welcome the player, which is what I do next.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\t\t\tWelcome to Word Jumble!\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark349">cout &lt;&lt; &quot;Unscramble the letters to make a word.\n&quot;; cout &lt;&lt; &quot;Enter ’hint’ for a hint.\n&quot;;</a><a name="bookmark414">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Enter ’quit’ to quit the game.\n\n&quot;; cout &lt;&lt; &quot;The jumble is: &quot; &lt;&lt; jumble;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">string guess;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n\nYour guess: &quot;; cin &gt;&gt; guess;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I gave the player instructions on how to play, including how to quit and how to ask for a hint.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_150.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">As enthralling as you think your game is, you should always provide a way for the player to exit it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_151.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a136"><h1 href="#bookmark6">Entering the Game Loop</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I enter the game loop.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while ((guess != theWord) &amp;&amp; (guess != &quot;quit&quot;))</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (guess == &quot;hint&quot;)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; theHint;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Sorry, that’s not it.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt;&quot;\n\nYour guess: &quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark350">110 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark415">&zwnj;</a><a name="bookmark416">&zwnj;</a><a name="bookmark417">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cin &gt;&gt; guess;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The loop continues to ask the player for a guess until the player either guesses the word or asks to quit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a137"><h1 href="#bookmark6">Saying Goodbye</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">When the loop ends, the player has either won or quit, so it<span class="s12">’</span>s time to say goodbye.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark351">if (guess == theWord)</a><a name="bookmark418">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nThat’s it! You guessed it!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nThanks for playing.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">If the player has guessed the word, I congratulate him or her. Finally, I thank the player for playing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s30" name="a138">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you learned the following concepts:</p><p style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span>The <span class="s35">for </span>loop lets you repeat a section of code. In a <span class="s35">for </span>loop, you can provide an initialization statement, an expression to test, and an action to take after each loop iteration.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">for </span><span class="p">loops are often used for counting or looping through a sequence.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 91%;text-align: left;"><span class="s29">n </span>Objects are encapsulated, cohesive entities that combine data (called <span class="s11">data members</span>) and functions (called <span class="s11">member functions</span>).</p><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span><span class="s35">string </span>objects (often just called <span class="s11">strings</span>) are defined in the file <span class="s35">string</span>, which is part of the standard library. <span class="s35">string </span>objects allow you to store a sequence of characters and also have member functions.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n   <span class="s35">string </span><span class="p">objects are defined so that they work intuitively with familiar operators, such as the concatenation operator and the relational operators.</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark419">Questions and Answers 111</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>All <span class="s35">string </span>objects have member functions, including those for determining a <span class="s35">string </span>object<span class="s12">’</span>s length, determining whether or not a <span class="s35">string </span>object is empty, finding substrings, and removing substrings.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Arrays provide a way to store and access sequences of any type.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A limitation of arrays is that they have a fixed length.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><span class="s29">n </span>You can access individual elements of <span class="s35">string </span>objects and arrays through the subscripting operator.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;"><a name="bookmark352"><span class="s29">n </span></a>Bounds checking is not enforced when attempts are made to access individual elements of <span class="s35">string </span>objects or arrays. Therefore, bounds checking is up to the programmer.<a name="bookmark420">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><span class="s29">n </span>C-style strings are character arrays terminated with the null character. They are the standard way to represent strings in the C language. And even though C-style strings are perfectly legal in C<span class="s14">þþ</span>, <span class="s35">string </span>objects are the preferred way to work with sequences of characters.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Multidimensional arrays allow for access to array elements using multiple subscripts. For example, a chessboard can be represented as a two-dimensional array, 8 8 elements.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s30" name="a139">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Which is better, a <span class="s35">while </span>loop or a <span class="s35">for </span>loop?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Neither is inherently better than the other. Use the loop that best fits your needs.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When might it be better to use a <span class="s35">for </span>loop than a <span class="s35">while </span>loop?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: You can create a <span class="s35">while </span>loop to do the job of any <span class="s35">for </span>loop; however, there are some cases that cry out for a <span class="s35">for </span>loop. Those include counting and iterating through a sequence.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can I use <span class="s35">break </span>and <span class="s35">continue </span>statements with <span class="s35">for </span>loops?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Sure. And they behave just like they do in <span class="s35">while </span>loops: <span class="s35">break </span>ends the loop and <span class="s35">continue </span>jumps control back to the top of the loop.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q:  Why  do  programmers  tend  to  use  variable  names  such  as  <span class="s35">i</span>,  <span class="s35">j</span>,  and  <span class="s35">k  </span>as counters in <span class="s35">for  </span>loops?</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark421">112 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Believe it or not, programmers use <span class="s35">i</span>, <span class="s35">j</span>, and <span class="s35">k  </span>mainly out of tradition. The practice started in early versions of the FORTRAN language, in which integer variables had to start with certain letters, including <span class="s35">i</span>, <span class="s35">j</span>, and <span class="s35">k</span>.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: I don<span class="s12">’</span>t have to include a file to use <span class="s35">int </span>or <span class="s35">char </span>types, so why do I have to include the <span class="s35">string </span>file to use strings?</p><p style="padding-top: 5pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: <span class="s35">int </span>and <span class="s35">char </span>are built-in types. They<span class="s12">’</span>re always accessible in any C<span class="s14">þþ </span>program. The <span class="s35">string </span>type, on the other hand, is not a built-in type. It<span class="s12">’</span>s defined as part of the standard library in the file <span class="s35">string</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How did C-style strings get their name?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;text-align: justify;">A: In the C programming language, programmers represent strings with arrays of characters terminated by a null character. This practice carried over to C<span class="s14">þþ</span>. After the new <span class="s35">string </span>type was introduced in C<span class="s14">þþ</span>, programmers needed a way to differentiate between the two. Therefore, the old method was dubbed C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I use <span class="s35">string </span>objects instead of C-style strings?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: <span class="s35">string </span>objects have advantages over C-style strings. The most obvious is that they are dynamically sizeable. You don<span class="s12">’</span>t have to specify a length limit when you create one.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Should I ever use C-style strings?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: You should opt for <span class="s35">string </span>objects whenever possible. If you<span class="s12">’</span>re working on an existing project that uses C-style strings, then you might have to work with C-style strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is operator overloading?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 107%;text-align: justify;">A: It<span class="s12">’</span>s a process that allows you to define the use of familiar operators in different contexts with different but predictable results. For example, the <span class="s35">+ </span>operator that is used to add numbers is overloaded by the <span class="s35">string </span>type to join strings.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can<span class="s12">’</span>t operator overloading be confusing?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: It<span class="s12">’</span>s true that by overloading an operator you give it another meaning. But the new meaning applies only in a specific new context. For example, it<span class="s12">’</span>s clear in</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark422">Discussion Questions 113</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">the expression <span class="s35">4+ 6 </span>that the <span class="s35">+ </span>operator adds numbers, while in the expression</p><p class="s35" style="padding-left: 41pt;text-indent: 14pt;line-height: 152%;text-align: left;">myString1 + myString2<span class="p">, the </span>+ <span class="p">operator joins strings. Q: Can I use the </span>+= <span class="p">operator to concatenate strings?</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A: Yes, the <span class="s35">+= </span>operator is overloaded so it works with strings.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: To get the number of characters in a <span class="s35">string </span>object, should I use the <span class="s35">length()</span></p><p style="padding-left: 55pt;text-indent: 0pt;text-align: left;">member function or the <span class="s35">size() </span>member function?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark353">A: Both </a><span class="s35">length() </span>and <span class="s35">size() </span>return the same value, so you can use either. Q: What<span class="s12">’</span>s a predicate function?<a name="bookmark423">&zwnj;</a></p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: A function that returns either <span class="s35">true </span>or <span class="s35">false</span>. The <span class="s35">string </span>object member function <span class="s35">empty() </span>is an example of a predicate function.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: What happens if I try to assign a value to an element beyond the bounds of an array?</p><p style="padding-top: 5pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: C<span class="s14">þþ </span>will allow you to make the assignment. However, the results are unpredictable and might cause your program to crash. That<span class="s12">’</span>s because you<span class="s12">’</span>re altering some unknown part of your computer<span class="s12">’</span>s memory.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I use multidimensional arrays?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: To make working with a group of elements more intuitive. For example, you could represent a chessboard with a one-dimensional array, as in <span class="s35">chessBoard[64]</span>, or you could represent it with a more intuitive, two- dimensional array, as in <span class="s35">chessBoard[8][8]</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="s30" name="a140">Discussion Questions</a></p><ol id="l8"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What are some of the things from your favorite game that you could represent as objects? What might their data members and member functions be?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What are the advantages of using an array over a group of individual variables?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are some limitations imposed by a fixed array size?</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark354">114 Chapter 3 </a><span class="s32">n </span>For Loops, Strings, and Arrays: Word Jumble<a name="bookmark424">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages and disadvantages of operator overloading?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What kinds of games could you create using string objects, arrays, and</p></li></ol><p class="s35" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">for <span class="p">loops as your main tools?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s30" name="a141">Exercises</a></p><ol id="l9"><li><p style="padding-top: 1pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Improve the Word Jumble game by adding a scoring system. Make the point value for a word based on its length. Deduct points if the player asks for a hint.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following code?</p><p class="s35" style="padding-top: 8pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt;= phrase.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 85pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Character at position &quot; &lt;&lt; i &lt;&lt; &quot; is: &quot; &lt;&lt; phrase[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following code?</p></li></ol><p class="s35" style="padding-top: 8pt;padding-left: 65pt;text-indent: 0pt;line-height: 123%;text-align: left;">const int ROWS = 2; const int COLUMNS = 3;</p><p class="s35" style="padding-left: 65pt;text-indent: 0pt;line-height: 10pt;text-align: left;">char board[COLUMNS][ROWS] = { {’O’, ’X’, ’O’},</p><p class="s35" style="padding-top: 2pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">{’ ’, ’X’, ’X’} };</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s27" name="bookmark425">chapter 4</a><a name="bookmark470">&zwnj;</a><a name="bookmark471">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_152.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s28" name="bookmark426">The Standard Template Library: Hangman</a><a name="bookmark472">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far you<span class="s12">’</span>ve seen how to work with sequences of values using arrays. But there are more sophisticated ways to work with collections of values. In fact, working with collections is so common that part of standard C++ is dedicated to doing just that. In this chapter, you<span class="s12">’</span>ll get an introduction to this important library. Specifically, you<span class="s12">’</span>ll learn to:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">vector </span>objects to work with sequences of values</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Use <span class="s35">vector </span>member functions to manipulate sequence elements</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use iterators to move through sequences</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use library algorithms to work with groups of elements</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Plan your programs with pseudocode</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 113%;text-align: left;"><span class="s23">Introducing the Standard Template Library </span>Good game programmers are lazy. It<span class="s12">’</span>s not that they don<span class="s12">’</span>t want to work; it<span class="s12">’</span>s just that they don<span class="s12">’</span>t want to redo work that<span class="s12">’</span>s already been done<span class="s12">—</span>especially if it has</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 14pt;text-align: left;">been done well. The STL (<span class="s11">Standard Template Library</span>) represents a powerful</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">collection of programming work that<span class="s12">’</span>s been done well. It provides a group of containers, algorithms, and iterators, among other things.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">So what<span class="s12">’</span>s a container and how can it help you write games? Well, containers let you store and access collections of values of the same type. Yes, arrays let you do</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 8pt;text-indent: 0pt;text-align: right;">115</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark427">116 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark473">&zwnj;</a><a name="bookmark474">&zwnj;</a><a name="bookmark475">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">the same thing, but the STL containers offer more flexibility and power than a simple but trusty array. The STL defines a variety of container types; each works in a different way to meet different needs.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The algorithms defined in the STL work with its containers. The <span class="s11">algorithms </span>are common functions that game programmers find themselves repeatedly applying to groups of values. They include algorithms for sorting, searching, copying, merging, inserting, and removing container elements. The cool thing is that the same algorithm can work its magic on many different container types.</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s11">Iterators </span>are objects that identify elements in containers and can be manipulated to move among elements. They<span class="s12">’</span>re great for, well, iterating through containers. In addition, iterators are required by the STL algorithms.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All of this makes a lot more sense when you see an actual implementation of one of the container types, so that<span class="s12">’</span>s up next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="s30" name="a142">Using Vectors</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">vector </span>class defines one kind of container provided by the STL. It meets the general description of a <span class="s11">dynamic array</span><span class="s12">—</span>an array that can grow and shrink in size as needed. In addition, <span class="s35">vector </span>defines member functions to manipulate vector elements. This means that the vector has all of the functionality of the array plus more.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">At this point, you may be thinking to yourself: Why learn to use these fancy new vectors when I can already use arrays? Well, vectors have certain advantages over arrays, including:</p><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Vectors can grow as needed while arrays cannot. This means that if you use a vector to store objects for enemies in a game, the vector will grow to accommodate the number of enemies that get created. If you use an array, you have to create one that can store some maximum number of enemies. And if, during play, you need more room in the array than you thought, you<span class="s12">’</span>re out of luck.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Vectors can be used with the STL algorithms while arrays cannot. This means that by using vectors you get complex functionality like searching and sorting, built-in. If you use arrays, you have to write your own code to achieve this same functionality.</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark428">Using Vectors 117</a><a name="bookmark476">&zwnj;</a><a name="bookmark477">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">There are a few disadvantages to vectors when compared to arrays, including:</p><p class="s29" style="padding-top: 10pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Vectors require a bit of extra memory as overhead.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">There can be a performance cost when a vector grows in size.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Vectors may not be available on some game console systems.</span></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Overall, vectors (and the STL) can be a welcome tool in most any project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="h1" name="a143">Introducing the Hero’s Inventory 2.0 </a><h1 href="#bookmark6">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">From the user<span class="s12">’</span>s point of view, the Hero<span class="s12">’</span>s Inventory 2.0 program is similar to its predecessor, the Hero<span class="s12">’</span>s Inventory program from Chapter 3. The new version stores and works with a collection of <span class="s35">string </span>objects that represent a hero<span class="s12">’</span>s inventory. However, from the programmer<span class="s12">’</span>s perspective the program is quite different. That<span class="s12">’</span>s because the new program uses a vector instead of an array to represent the inventory. Figure 4.1 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_153.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 4.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">This time the hero’s inventory is represented by a vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 4 folder; the filename is <span class="s35">heros_inventory2.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">118 Chapter 4 <span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Hero’s Inventory 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates vectors</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt; inventory; inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 26pt;text-align: left;">cout &lt;&lt; &quot;You have &quot; &lt;&lt; inventory.size() &lt;&lt; &quot; items.\n&quot;; cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 10pt;text-align: left;">for (unsigned int i = 0; i &lt; inventory.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYou trade your sword for a battle axe.&quot;; inventory[0] = &quot;battle axe&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (unsigned int i = 0; i &lt; inventory.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; inventory[0] &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; inventory[0].size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nYour shield is destroyed in a fierce battle.&quot;; inventory.pop_back();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (unsigned int i = 0; i &lt; inventory.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark429">Using Vectors 119</a><a name="bookmark478">&zwnj;</a><a name="bookmark479">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nYou were robbed of all of your possessions by a thief.&quot;; inventory.clear();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (inventory.empty())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark430">{</a><a name="bookmark480">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou have nothing.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou have at least one item.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a144"><h1 href="#bookmark6">Preparing to Use Vectors</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Before I can declare a vector, I have to include the file that contains its definition:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">#include &lt;vector&gt;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All STL components live in the <span class="s35">std </span>namespace, so by using the following code (as I typically do) I can refer to a <span class="s35">vector </span>without having to precede it with <span class="s35">std::</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a145"><h1 href="#bookmark6">Declaring a Vector</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Okay, the first thing I do in <span class="s35">main() </span>is declare a new vector.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt; inventory;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding line declared an empty vector named <span class="s35">inventory</span>, which can contain <span class="s35">string </span>object elements. Declaring an empty vector is fine because it grows in size when you add new elements.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To declare a vector of your own, write <span class="s35">vector </span>followed by the type of objects you want to use with the vector (surrounded by the <span class="s35">&lt; </span>and <span class="s35">&gt; </span>symbols), followed by the vector name.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark431">120 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark481">&zwnj;</a><a name="bookmark482">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_154.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">There are additional ways to declare a vector. You can declare one with a starting size by specifying a number in parentheses after the vector name.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">vector&lt;string&gt; inventory(10);</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The preceding code declared a vector to hold <span class="s35">string </span>object elements with a starting size of 10. You can also initialize all of a vector’s elements to the same value when you declare it. You simply supply the number of elements followed by the starting value, as in:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt; inventory(10, &quot;nothing&quot;);</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The preceding code declared a vector with a size of 10 and initialized all 10 elements to</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;"><a name="bookmark432">&quot;nothing&quot;</a><span class="s19">. Finally, you can declare a vector and initialize it with the contents of another vector.</span><a name="bookmark483">&zwnj;</a></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt; inventory(myStuff);</p><p class="s19" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">The preceding code created a new vector with the same contents as the vector <span class="s35">myStuff</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_155.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a146">Using the push_back() Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I give the hero the same three starting items as in the previous version of the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">push_back() </span>member function adds a new element to the end of a vector. In the preceding lines I added <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot; </span>to <span class="s35">inventory</span>. As a result, <span class="s35">inventory[0] </span>is equal to <span class="s35">&quot;sword&quot;</span>, <span class="s35">inventory[1] </span>is equal to <span class="s35">&quot;armor&quot;</span>, and <span class="s35">inventory[2] </span>is equal to <span class="s35">&quot;shield&quot;</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="h1" name="a147">Using the size() Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I display the number of items the hero has in his possession.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You have &quot; &lt;&lt; inventory.size() &lt;&lt; &quot; items.\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I get the size of <span class="s35">inventory </span>by calling the <span class="s35">size() </span>member function with <span class="s35">inventory.size()</span>. The <span class="s35">size() </span>member function simply returns the size of a vector. In this case, it returns 3.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark433">Using Vectors 121</a><a name="bookmark484">&zwnj;</a><a name="bookmark485">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a148"><h1 href="#bookmark6">Indexing Vectors</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I display all of the hero<span class="s12">’</span>s items.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (unsigned int i = 0; i &lt; inventory.size(); ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark434">Just as with arrays, you can index vectors by using the subscripting operator. In fact, the preceding code is nearly identical to the same section of code from the original Hero</a><span class="s12">’</span>s Inventory program. The only difference is that I used <span class="s35">inventory. size() </span>to specify when the loop should end. Note that I made the loop variable <span class="s35">i </span>an <span class="s35">unsigned int </span>because the value returned by <span class="s35">size() </span>is an unsigned integral type.<a name="bookmark486">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I replace the hero<span class="s12">’</span>s first item.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">inventory[0] = &quot;battle axe&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Again, just as with arrays, I use the subscripting operator to assign a new value to an existing element position.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_156.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although vectors are dynamic, you can’t increase a vector’s size by applying the subscripting operator. For example, the following highly dangerous code snippet does not increase the size of the vector <span class="s35">inventory</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: justify;">vector&lt;string&gt; inventory; //creating an empty vector inventory[0] = &quot;sword&quot;;    //may cause your program to crash!</p><p class="s19" style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Just as with arrays, you can attempt to access a nonexistent element position—but with potentially disastrous results. The preceding code changed some unknown section of your computer’s memory and could cause your program to crash. To add a new element at the end of a vector, use the <span class="s35">push_back() </span>member function.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_157.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a149">Calling Member Functions of an </a><h1 href="#bookmark6">Element</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I show the number of letters in the name of the first item in the hero<span class="s12">’</span>s inventory.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">cout &lt;&lt; inventory[0].size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark435">122 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark436">&zwnj;</a><a name="bookmark487">&zwnj;</a><a name="bookmark488">&zwnj;</a><a name="bookmark489">&zwnj;</a><a name="bookmark490">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just as with arrays, you can access the member functions of a vector element by writing the element, followed by the member selection operator, followed by the member function name. Because <span class="s35">inventory[0] </span>is equal to <span class="s35">&quot;battle axe&quot;</span>, <span class="s35">inventory[0].size() </span>returns 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a150">Using the pop_back() Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I remove the hero<span class="s12">’</span>s shield using</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">inventory.pop_back();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark437">The </a><span class="s35">pop_back() </span>member function removes the last element of a vector and reduces the vector size by one. In this case, <span class="s35">inventory.pop_back() </span>removes <span class="s35">&quot;shield&quot; </span>from <span class="s35">inventory </span>because that was the last element in the vector. Also, the size of <span class="s35">inventory </span>is reduced from 3 to 2.<a name="bookmark491">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a151">Using the clear() Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I simulate the act of a thief robbing the hero of all of his items.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">inventory.clear();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">clear() </span>member function removes all of the items of a vector and sets its size to <span class="s35">0</span>. After the previous line of code executes, <span class="s35">inventory </span>is an empty vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a152">Using the empty() Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I check to see whether the hero has any items in his inventory.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (inventory.empty())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou have nothing.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou have at least one item.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">vector </span>member function <span class="s35">empty() </span>works just like the <span class="s35">string </span>member function <span class="s35">empty()</span>. It returns <span class="s35">true </span>if the <span class="s35">vector </span>object is empty; otherwise, it returns <span class="s35">false</span>. Because <span class="s35">inventory </span>is empty in this case, the program displays the message, <span class="s12">“</span>You have nothing.<span class="s12">”</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark438">Using Iterators 123</a><a name="bookmark439">&zwnj;</a><a name="bookmark492">&zwnj;</a><a name="bookmark493">&zwnj;</a><a name="bookmark494">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="s30" name="a153">Using Iterators</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Iterators are the key to using containers to their fullest potential. With iterators you can, well, iterate through a sequence container. In addition, important parts of the STL require iterators. Many container member functions and STL algorithms take iterators as arguments. So if you want to reap the benefits of these member functions and algorithms, you<span class="s12">’</span>ve got to use iterators.</p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="h1" name="a154">Introducing the Hero’s Inventory 3.0 </a><h1 href="#bookmark6">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Hero<span class="s12">’</span>s Inventory 3.0 program acts like its two predecessors, at least at the start. The program shows off a list of items, replaces the first item, and displays the number of letters in the name of an item. But then the program does something new: It inserts an item at the beginning of the group, and then it removes an item from the middle of the group. The program accomplishes all of this by working with iterators. Figure 4.2 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="469" height="279" alt="image" src="Image_158.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 4.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The program performs a few vector manipulations that you can accomplish only with iterators.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 4 folder; the filename is <span class="s35">heros_inventory3.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">124 Chapter 4 <span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Hero’s Inventory 3.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates iterators</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt; inventory; inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt;::iterator myIterator; vector&lt;string&gt;::const_iterator iter;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nYou trade your sword for a battle axe.&quot;; myIterator = inventory.begin();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">*myIterator = &quot;battle axe&quot;; cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; (*myIterator).size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; myIterator-&gt;size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark495">Using Iterators 125</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYou recover a crossbow from a slain enemy.&quot;; inventory.insert(inventory.begin(), &quot;crossbow&quot;); cout &lt;&lt; &quot;\nYour items:\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nYour armor is destroyed in a fierce battle.&quot;; inventory.erase((inventory.begin() + 2));</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark440">cout &lt;&lt; &quot;\nYour items:\n&quot;;</a><a name="bookmark496">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a155"><h1 href="#bookmark6">Declaring Iterators</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">After I declare a vector for the hero<span class="s12">’</span>s inventory and add the same three <span class="s35">string</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">objects from the previous incarnations of the program, I declare an iterator.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt;::iterator myIterator;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding line declares an iterator named <span class="s35">myIterator </span>for a vector that contains <span class="s35">string </span>objects. To declare an iterator of you own, follow the same pattern. Write the  container  type,  followed  by  the  type  of  objects  the  container  will  hold (surrounded by the <span class="s35">&lt; </span>and <span class="s35">&gt; </span>symbols), followed by the scope resolution operator (the <span class="s35">:: </span>symbol), followed by <span class="s35">iterator</span>, followed by a name for your new iterator.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So what are iterators? <span class="s11">Iterators </span>are values that identify a particular element in a container. Given an iterator, you can access the value of the element. Given the right kind of iterator, you can change the value. Iterators can also move among elements via familiar arithmetic operators.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A way to think about iterators is to imagine them as Post-it notes that you can stick on a specific element in a container. An iterator is not one of the elements, but a way to refer to one. Specifically, I can use <span class="s35">myIterator </span>to refer to a particular element of the vector <span class="s35">inventory</span>. That is, I can stick the <span class="s35">myIterator</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark497">126 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Post-it note on a specific element in <span class="s35">inventory</span>. Once I<span class="s12">’</span>ve done that, I can access the element or even change it through the iterator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I declare another iterator.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;string&gt;::const_iterator iter;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark441">The preceding line of code creates a constant iterator named </a><span class="s35">iter </span>for a vector that contains <span class="s35">string </span>objects. A <span class="s11">constant iterator </span>is just like a regular iterator except that you can<span class="s12">’</span>t use it to change the element to which it refers; the element must remain constant. You can think of a constant iterator as providing read- only access. However, the iterator itself can change. This means you can move <span class="s35">iter </span>all around the vector <span class="s35">inventory </span>as you see fit. You can<span class="s12">’</span>t, however, change the value of any of the elements through <span class="s35">iter</span>. With a constant iterator the Post- it can change, but the thing it<span class="s12">’</span>s stuck to can<span class="s12">’</span>t.<a name="bookmark498">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Why would you want to use a constant iterator if it<span class="s12">’</span>s a limited version of a regular iterator? First, it makes your intentions clearer. When you use a constant iterator, it<span class="s12">’</span>s clear that you won<span class="s12">’</span>t be changing any element to which it refers. Second, it<span class="s12">’</span>s safer. You can use a constant iterator to avoid accidentally changing a container element. (If you attempt to change an element through a constant iterator, you<span class="s12">’</span>ll generate a compile error.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_159.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Using <span class="s35">push_back() </span>might invalidate all iterators referencing the vector.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_160.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Is all of this iterator talk a little too abstract for you? Are you tired of analogies about Post-it notes? Fear not<span class="s12">—</span>next, I put an actual iterator to work.</p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a156"><h1 href="#bookmark6">Looping through a Vector</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I loop through the contents of the vector and display the hero<span class="s12">’</span>s inventory.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = inventory.begin(); iter != inventory.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">In the preceding code, I use a <span class="s35">for </span>loop to move from the first to the last element of <span class="s35">inventory</span>. At this general level, this is exactly how I looped through the</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark499">Using Iterators 127</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">contents of the vector in Hero<span class="s12">’</span>s Inventory 2.0. But instead of using an integer and the subscripting operator to access each element, I used an iterator. Basically, I moved the Post-it note through the entire sequence of elements and displayed the value of each element to which the note was stuck. There are a lot of new ideas in this little loop, so I<span class="s12">’</span>ll tackle them one at a time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Calling the begin() Vector Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the initialization statement of the loop, I assign the return value of <span class="s35">inventory. begin() </span>to <span class="s35">iter</span>. The <span class="s35">begin() </span>member function returns an iterator that refers to a container<span class="s12">’</span>s first element. So in this case, the statement assigns an iterator that refers to the first element of <span class="s35">inventory </span>(the <span class="s35">string </span>object equal to <span class="s35">&quot;sword&quot;</span>) to <span class="s35">iter</span>. Figure 4.3 shows an abstract view of the iterator returned by a call to <span class="s35">inventory.begin()</span>. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">’</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; it contains <span class="s35">string </span>objects.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="105" alt="image" src="Image_161.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="100" height="13" alt="image" src="Image_162.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A call to <span class="s35">inventory.begin() </span>returns an iterator that refers to the first element in the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Calling the end() Vector Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the test statement of the loop, I test the return value of <span class="s35">inventory.end() </span>against <span class="s35">iter </span>to make sure the two are not equal. The <span class="s35">end() </span>member function returns an iterator one past the last element in a container. This means the loop will continue until <span class="s35">iter </span>has moved through all of the elements in <span class="s35">inventory</span>. Figure 4.4 shows an abstract view of the iterator returned by a call to this member function. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">’</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; it contains string objects.)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark500">128 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="328" height="106" alt="image" src="Image_163.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 221pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="90" height="13" alt="image" src="Image_164.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A call to <span class="s35">inventory.end() </span>returns an iterator one past the last element of the vector.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark442">Tra p</a><a name="bookmark501">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_165.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">end() vector </span>member function returns an iterator that’s one <i>past </i>the last element in the vector—not the last element. Therefore, you can’t get a value from the iterator returned by <span class="s35">end()</span>. This might seem counter-intuitive, but it works well for loops that move through a container.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_166.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Altering an Iterator</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The action statement in the loop, <span class="s35">++iter</span>, increments <span class="s35">iter</span>, which moves it to the next element in the vector. Depending upon the iterator, you can perform other mathematical operations on iterators to move them around a container. Most often, though, you<span class="s12">’</span>ll find that you simply want to increment an iterator.</p><h3 style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Dereferencing an Iterator</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the loop body, I send <span class="s35">*iter </span>to <span class="s35">cout</span>. By placing the dereference operator (<span class="s35">*</span>) in front of <span class="s35">iter</span>, I display the value of the element to which the iterator refers (not the iterator itself). By placing the dereference operator in front of an iterator, you<span class="s12">’</span>re saying, <span class="s12">“</span>Treat this as the thing that the iterator references, not as the iterator itself.<span class="s12">”</span></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a157"><h1 href="#bookmark6">Changing the Value of a Vector Element</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I change the first element in the vector from the <span class="s35">string </span>object equal to <span class="s35">&quot;sword&quot; </span>to the <span class="s35">string </span>object equal to <span class="s35">&quot;battle axe&quot;</span>. First I set <span class="s35">myIterator </span>to reference the first element of <span class="s35">inventory</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">myIterator = inventory.begin();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I change the value of the first element.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark443">Using Iterators 129</a><a name="bookmark502">&zwnj;</a><a name="bookmark503">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">*myIterator = &quot;battle axe&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Remember, by dereferencing <span class="s35">myIterator </span>with <span class="s35">*</span>, the preceding assignment statement says, <span class="s12">“</span>Assign <span class="s35">&quot;battle axe&quot; </span>to the element that <span class="s35">myIterator </span>references.<span class="s12">” </span>It does not change <span class="s35">myIterator</span>. After the assignment statement, <span class="s35">myIterator </span>still refers to the first element in the vector.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Just to prove that the assignment worked, I then display all of the elements in</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">inventory<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a158"><h1 href="#bookmark6">Accessing Member Functions of a Vector Element</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I display the number of characters in the name of the first item in the hero<span class="s12">’</span>s inventory.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; (*myIterator).size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*myIterator).size() </span>says, <span class="s12">“</span>Take the result of dereferencing <span class="s35">myIterator </span>and call that object<span class="s12">’</span>s <span class="s35">size() </span>member function.<span class="s12">” </span>Because <span class="s35">myIterator </span>refers to the <span class="s35">string </span>object equal to <span class="s35">&quot;battle axe&quot;</span>, the code returns 10.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_167.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Whenever you dereference an iterator to access a data member or member function, surround the dereferenced iterator by a pair of parentheses. This ensures that the dot operator will be applied to the object the iterator references.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_168.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*myIterator).size() </span>is not the prettiest, so C++ offers an alternative, more intuitive way to express the same thing, which I demonstrate in the next two lines of the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThe item name ’&quot; &lt;&lt; *myIterator &lt;&lt; &quot;’ has &quot;; cout &lt;&lt; myIterator-&gt;size() &lt;&lt; &quot; letters in it.\n&quot;;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The preceding code does exactly the same thing the first pair of lines I presented in this section do; it displays the number of characters in <span class="s35">&quot;battle axe&quot;</span>. However, notice that I substitute <span class="s35">myIterator-&gt;size() </span>for <span class="s35">(*myIterator).size()</span>. You can see that this version (with the <span class="s35">-&gt; </span>symbol) is more readable. The two pieces of code mean exactly the same thing to the computer, but this new version is easier for humans to use. In general, you can use the <span class="s35">-&gt; </span>operator to access the member functions or data members of an object that an iterator references.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark444">130 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark504">&zwnj;</a><a name="bookmark505">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_169.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><i>Syntactic sugar </i>is a nicer, alternative syntax. It replaces harsh syntax with something that’s a bit easier to swallow. As an example, instead of writing the code <span class="s35">(*myIterator).size()</span>, I can use the syntactic sugar provided by the <span class="s35">-&gt; </span>operator and write <span class="s35">myIterator-&gt;size()</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_170.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a159">Using the insert() Vector Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I add a new item to the hero<span class="s12">’</span>s inventory. This time, though, I don<span class="s12">’</span>t add the item to the end of the sequence; instead, I insert it at the beginning.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;"><a name="bookmark445">inventory.insert(inventory.begin(), &quot;crossbow&quot;);</a><a name="bookmark506">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One form of the <span class="s35">insert() </span>member function inserts a new element into a vector just before the element referred to by a given iterator. You supply two arguments to this version of <span class="s35">insert()</span><span class="s12">—</span>the first is an iterator, and the second is the element to be inserted. In this case, I inserted <span class="s35">&quot;crossbow&quot; </span>into <span class="s35">inventory </span>just before the first element. As a result, all of the other elements will move down by one. This version of  the  <span class="s35">insert()  </span>member  function  returns  an  iterator  that  references  the  newly inserted element. In this case, I don<span class="s12">’</span>t assign the returned iterator to a variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_171.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Calling the <span class="s35">insert() </span>member function on a vector invalidates all of the iterators that reference elements after the insertion point because all of the elements after the insertion point are shifted down by one.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_172.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I show the contents of the vector to prove the insertion worked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark6" class="h1" name="a160">Using the erase() Vector Member </a><h1 href="#bookmark6">Function</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next I remove an item from the hero<span class="s12">’</span>s inventory. However, this time I don<span class="s12">’</span>t remove the item at the end of the sequence; instead, I remove one from the middle.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">inventory.erase((inventory.begin() + 2));</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One form of the <span class="s35">erase() </span>member function removes an element from a vector. You supply one argument to this version of <span class="s35">erase()</span><span class="s12">—</span>the iterator that references the element you want to remove. In this case, I passed <span class="s35">(inventory.begin() + 2)</span>, which is equal to the iterator that references the third element in <span class="s35">inventory</span>. This removes the <span class="s35">string </span>object equal to <span class="s35">&quot;armor&quot;</span>. As a result, all of the following elements will move up by one. This version of the <span class="s35">erase() </span>member function</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark446">Using Algorithms 131</a><a name="bookmark507">&zwnj;</a><a name="bookmark508">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">returns an iterator that references the element after the element that was removed. In this case, I don<span class="s12">’</span>t assign the returned iterator to a variable.</p><p class="s24" style="padding-top: 11pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_173.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Calling the <span class="s35">erase() </span>member function on a vector invalidates all of the iterators that reference elements after the removal point because all of the elements after the removal point are shifted up by one.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_174.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I show the contents of the vector to prove the removal worked.</p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="s30" name="bookmark447">Using Algorithms</a><a name="bookmark509">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The STL defines a group of algorithms that allow you to manipulate elements in containers through iterators. Algorithms exist for common tasks such as searching, randomizing, and sorting. These algorithms are your built-in arsenal of flexible and efficient weapons. By using them, you can leave the mundane task of manipulating container elements in common ways to the STL so you can concentrate on writing your game. The powerful thing about these algorithms is that they are generic<span class="s12">—</span>the same algorithm can work with elements of different container types.</p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark6" class="h1" name="a161">Introducing the High Scores </a><h1 href="#bookmark6">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The High Scores program creates a vector of high scores. It uses STL algorithms to search, shuffle, and sort the scores. Figure 4.5 illustrates the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="447" height="236" alt="image" src="Image_175.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">STL algorithms search, shuffle, and sort elements of a vector of high scores.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">132 Chapter 4 <span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 4 folder; the filename is <span class="s35">high_scores.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// High Scores</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates algorithms</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; #include &lt;ctime&gt; #include &lt;cstdlib&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 30pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;int&gt;::const_iterator iter;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Creating a list of scores.&quot;; vector&lt;int&gt; scores; scores.push_back(1500); scores.push_back(3500); scores.push_back(7500);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nHigh Scores:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = scores.begin(); iter != scores.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nFinding a score.&quot;; int score;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nEnter a score to find: &quot;; cin &gt;&gt; score;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">iter = find(scores.begin(), scores.end(), score); if (iter != scores.end())</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark510">Using Algorithms 133</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Score found.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Score not found.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark448">cout &lt;&lt; &quot;\nRandomizing scores.&quot;; srand(static_cast&lt;unsigned int&gt;(time(0))); random_shuffle(scores.begin(), scores.end()); cout &lt;&lt; &quot;\nHigh Scores:\n&quot;;</a><a name="bookmark511">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = scores.begin(); iter != scores.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nSorting scores.&quot;; sort(scores.begin(), scores.end()); cout &lt;&lt; &quot;\nHigh Scores:\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = scores.begin(); iter != scores.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a162"><h1 href="#bookmark6">Preparing to Use Algorithms</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So that I can use the STL algorithms, I include the file with their definitions.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">#include &lt;algorithm&gt;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you know, all STL components live in the <span class="s35">std </span>namespace. By using the following code (as I typically do), I can refer to algorithms without having to precede them with <span class="s35">std::</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark449">134 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark512">&zwnj;</a><a name="bookmark513">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a163"><h1 href="#bookmark6">Using the find() Algorithm</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After I display the contents of the vector <span class="s35">scores</span>, I get a value from the user to find and store it in the variable <span class="s35">score</span>. Then I use the <span class="s35">find() </span>algorithm to search the vector for the value:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">iter = find(scores.begin(), scores.end(), score);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark450">The </a><span class="s35">find() </span>STL algorithm searches a specified range of a container<span class="s12">’</span>s elements for a value. It returns an iterator that references the first matching element. If no match is found, it returns an iterator to the end of the range. You must pass the starting point as an iterator, the ending point as an iterator, and a value to find. The algorithm searches from the starting iterator up to but not including the ending iterator. In this case, I passed <span class="s35">scores.begin() </span>and <span class="s35">scores.end() </span>as the first and second arguments to search the entire vector. I passed <span class="s35">score </span>as the third argument to search for the value the user entered.<a name="bookmark514">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I check to see if the value <span class="s35">score </span>was found:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (iter != scores.end())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Score found.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Score not found.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Remember, <span class="s35">iter </span>will reference the first occurrence of <span class="s35">score </span>in the vector, if the value was found. So, as long as <span class="s35">iter </span>is not equal to <span class="s35">scores.end()</span>, I know that score was found and I display a message saying so. Otherwise, <span class="s35">iter </span>will be equal to <span class="s35">scores.end() </span>and I know <span class="s35">score </span>was not found.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a164"><h1 href="#bookmark6">Using the random_shuffle() Algorithm</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I prepare to randomize the scores using the <span class="s35">random_shuffle() </span>algorithm. Just as when I generate a single random number, I seed the random number generator before I call <span class="s35">random_shuffle()</span>, so the order of the scores might be different each time I run the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0)));</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I reorder the scores in a random way.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">random_shuffle(scores.begin(), scores.end());</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark451">Using Algorithms 135</a><a name="bookmark515">&zwnj;</a><a name="bookmark516">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">random_shuffle() </span>algorithm randomizes the elements of a sequence. You must supply as iterators the starting and ending points of the sequence to shuffle. In this case, I passed the iterators returned by <span class="s35">scores.begin() </span>and <span class="s35">scores.end()</span>. These two iterators indicate that I want to shuffle all of the elements in <span class="s35">scores</span>. As a result, <span class="s35">scores </span>contains the same scores, but in some random order.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Then I display the scores to prove the randomization worked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_176.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you might not want to randomize a list of high scores, <span class="s35">random_shuffle() </span>is a valuable algorithm for games. You can use it for everything from shuffling a deck of cards to mixing up the order of the enemies a player will encounter in a game level.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_177.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a165"><h1 href="#bookmark6">Using the sort() Algorithm</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I sort the scores.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">sort(scores.begin(), scores.end());</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">sort() </span>algorithm sorts the elements of a sequence in ascending order. You must supply as iterators the starting and ending points of the sequence to sort. In this particular case, I passed the iterators returned by <span class="s35">scores.begin() </span>and <span class="s35">scores.end()</span>. These two iterators indicate that I want to sort all of the elements in <span class="s35">scores</span>. As a result, <span class="s35">scores </span>contains all of the scores in ascending order.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I display the scores to prove the sorting worked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_178.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">A very cool property of STL algorithms is that they can work with containers defined outside of the STL. These containers only have to meet certain requirements. For example, even though <span class="s35">string </span>objects are not part of the STL, you can use appropriate STL algorithms on them. The following code snippet demonstrates this:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">string word = &quot;High Scores&quot;; random_shuffle(word.begin(), word.end());</p><p class="s19" style="padding-top: 2pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The preceding code randomly shuffles the characters in <span class="s35">word</span>. As you can see, <span class="s35">string </span>objects have both <span class="s35">begin() </span>and <span class="s35">end() </span>member functions, which return iterators to the first character and one past the last character, respectively. That’s part of the reason why STL algorithms work with <span class="s35">string</span>s—because they’re designed to.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_179.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark452">136 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark453">&zwnj;</a><a name="bookmark517">&zwnj;</a><a name="bookmark518">&zwnj;</a><a name="bookmark519">&zwnj;</a><a name="bookmark520">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="s30" name="a166">Understanding Vector Performance</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like all STL containers, vectors provide game programmers with sophisticated ways to work with information, but this level of sophistication can come at a performance cost. And if there<span class="s12">’</span>s one thing game programmers obsess about, it<span class="s12">’</span>s performance. But fear not, vectors and other STL containers are incredibly efficient. In fact, they<span class="s12">’</span>ve already been used in published PC and console games. However, these containers have their strengths and weaknesses; a game programmer needs to understand the performance characteristics of the various container types so that he can choose the right one for the job.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a167"><h1 href="#bookmark7">Examining Vector Growth</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Although vectors grow dynamically as needed, every vector has a specific size. When a new element added to a vector pushes the vector beyond its current size, the computer reallocates memory and might even copy all of the vector elements to this newly seized chunk of memory real estate. This can cause a performance hit.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The most important thing to keep in mind about program performance is whether or not you need to care. For example, vector memory reallocation might not occur at a performance-critical part of your program. In that case, you can safely ignore the cost of reallocation. Also, with small vectors, the reallocation cost might be insignificant so, again, you can safely ignore it. However, if you need greater control over when these memory reallocations occur, you have it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Using the capacity() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">capacity() vector </span>member function returns the capacity of a vector<span class="s12">—</span>in other words, the number of elements that a vector can hold before a program must reallocate more memory for it. A vector<span class="s12">’</span>s capacity is not the same thing as its size (the number of elements a vector currently holds). Here<span class="s12">’</span>s a code snippet to help drive this point home:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Creating a 10 element vector to hold scores.\n&quot;; vector&lt;int&gt; scores(10, 0);    //initialize all 10 elements to 0 cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p class="s19" style="padding-top: 2pt;padding-left: 265pt;text-indent: 0pt;text-align: left;"><a name="bookmark521">Understanding Vector Performance 137</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Adding a score.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">scores.push_back(0);    //memory is reallocated to accommodate growth cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Right after I declare and initialize the vector, this code reports that its size and capacity are both 10. However, after an element is added, the code reports that the vector<span class="s12">’</span>s size is 11 while its capacity is 20. That<span class="s12">’</span>s because the capacity of a vector doubles every time a program reallocates additional memory for it. In this case, when a new score was added, memory was reallocated, and the capacity of the vector doubled from 10 to 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Using the reserve() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">reserve() </span>member function increases the capacity of a vector to the number supplied as an argument. Using <span class="s35">reserve() </span>gives you control over when a reallocation of additional memory occurs. Here<span class="s12">’</span>s an example:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Creating a list of scores.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">vector&lt;int&gt; scores(10, 0);    //initialize all 10 elements to 0 cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Reserving more memory.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">scores.reserve(20);    //reserve memory for 10 additional elements cout &lt;&lt; &quot;Vector size is :&quot; &lt;&lt; scores.size() &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Vector capacity is:&quot; &lt;&lt; scores.capacity() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Right after I declare and initialize the vector, this code reports that its size and capacity are both 10. However, after I reserve memory for 10 additional elements, the code reports that the vector<span class="s12">’</span>s size is still 10 while its capacity is 20.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By using <span class="s35">reserve() </span>to keep a vector<span class="s12">’</span>s capacity large enough for your purposes, you can delay memory reallocation to a time of your choosing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_180.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">As a beginning game programmer, it’s good to be aware of how vector memory allocation works; however, don’t obsess over it. The first game programs you’ll write probably won’t benefit from a more manual process of vector memory allocation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_181.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark454">138 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark522">&zwnj;</a><a name="bookmark523">&zwnj;</a><a name="bookmark524">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="h1" name="a168">Examining Element Insertion and </a><h1 href="#bookmark7">Deletion</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Adding or removing an element from the end of a vector using the <span class="s35">push_back() </span>or <span class="s35">pop_back() </span>member functions is extremely efficient. However, adding or removing an element at any other point in a vector (for example, using <span class="s35">insert() </span>or <span class="s35">erase()</span>) can require more work because you might have to move multiple elements to accommodate the insertion or deletion. With small vectors the overhead is usually insignificant, but with larger vectors (with, say, thousands of elements), inserting or erasing elements from the middle of a vector can cause a performance hit.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark455">Fortunately, the STL offers another sequence container type, </a><span class="s35">list</span>, which allows for efficient insertion and deletion regardless of the sequence size. The important thing to remember is that one container type isn<span class="s12">’</span>t the solution for every problem. Although <span class="s35">vector  </span>is versatile and perhaps the most popular STL container type, there are times when another container type might make more sense.<a name="bookmark525">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_182.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Just because you want to insert or delete elements from the middle of a sequence, that doesn’t mean you should abandon the vector. It might still be a good choice for your game program. It really depends on how you use the sequence. If your sequence is small or there are only a few insertion and deletions, then a vector might still be your best bet.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_183.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a169">Examining Other STL Containers</a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The STL defines a variety of container types that fall into two basic categories<span class="s12">— </span>sequential and associative. With a <span class="s11">sequential container</span>, you can retrieve values in sequence, while an <span class="s11">associative container </span>lets you retrieve values based on keys. <span class="s35">vector </span>is an example of a sequential container.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">How might you use these different container types? Consider an online, turned- based strategy game. You could use a sequential container to store a group of players that you want to cycle through in, well, sequence. On the other hand, you could use an associative container to retrieve player information in a random- access fashion by looking up a unique identifier, such as a player<span class="s12">’</span>s IP address.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, the STL defines container adaptors that adapt one of the sequence containers. <span class="s11">Container adaptors </span>represent standard computer science data</p><p class="s19" style="padding-top: 2pt;padding-left: 317pt;text-indent: 0pt;text-align: left;"><a name="bookmark526">Planning Your Programs 139</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="293" alt="image" src="Image_184.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Double-ended queue</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Linear list</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Collection of key/value pairs in which each key is associated with exactly one value</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Collection of key/value pairs in which each key may be associated with more than one value</p><p class="s41" style="padding-top: 1pt;text-indent: 0pt;line-height: 125%;text-align: left;">Collection in which each element is not necessarily unique Priority queue</p><p class="s41" style="text-indent: 0pt;text-align: left;">Queue</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 125%;text-align: left;">Collection in which each element is unique Stack</p><p class="s41" style="text-indent: 0pt;text-align: left;">Dynamic array</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">multiset <span class="s41">Associative</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">priority_queue <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">queue <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">set <span class="s41">Associative</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">stack <span class="s41">Adaptor</span></p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">vector <span class="s41">Sequential</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Associative</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">multimap</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Sequential</p><p class="s41" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Sequential Associative</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">deque</p><p class="s35" style="text-indent: 0pt;line-height: 13pt;text-align: left;">list map</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 4.1 <span class="s44">STL Containers</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Container Type</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">structures. Although they are not official containers, they look and feel just like them. Table 4.1 lists the container types offered by the STL.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="s30" name="bookmark456">Planning Your Programs</a><a name="bookmark457">&zwnj;</a><a name="bookmark527">&zwnj;</a><a name="bookmark528">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far, all the programs you<span class="s12">’</span>ve seen have been pretty simple. The idea of formally planning any of them on paper probably seems like overkill. It<span class="s12">’</span>s not<span class="s12">— </span>planning your programs (even the small ones) will almost always result in time (and frustration) saved.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Programming is a lot like construction. Imagine a contractor building a house for you without a blueprint. Yikes! You might end up with a house that has 12 bathrooms, no windows, and a front door on the second floor. Plus, it probably would cost you 10 times the estimated price. Programming is the same way. Without a plan, you<span class="s12">’</span>ll likely struggle through the process and waste time. You might even end up with a program that doesn<span class="s12">’</span>t quite work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a170"><h1 href="#bookmark7">Using Pseudocode</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Many programmers sketch out their programs using <span class="s11">pseudocode</span><span class="s12">—</span>a language that falls somewhere between English and a formal programming language. Anyone who understands English should be able to follow pseudocode. Here<span class="s12">’</span>s</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark529">140 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark530">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">an example: Suppose I want to make a million dollars. A worthy goal, but what do I do to achieve it? I need a plan. So I come up with one and put it in pseudocode.</p><p class="s50" style="padding-top: 5pt;padding-left: 61pt;text-indent: -20pt;line-height: 118%;text-align: left;">If you can think of a new and useful product Then that’s your product</p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Otherwise</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 20pt;line-height: 118%;text-align: left;">Repackage an existing product as your product Make an infomercial about your product</p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Show the infomercial on TV</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark458">Charge $100 per unit of your product Sell 10,000 units of your product</a><a name="bookmark531">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Even though anyone, even a non-programmer, can understand my plan, my pseudocode feels vaguely like a program. The first four lines resemble an <span class="s35">if </span>statement with an <span class="s35">else </span>clause, and that<span class="s12">’</span>s intentional. When you write your plan, you should try to incorporate the feel of the code that you<span class="s12">’</span>re representing with pseudocode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a171"><h1 href="#bookmark7">Using Stepwise Refinement</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Your programming plan might not be finished after only one draft. Often, pseudocode needs multiple passes before it can be implemented in programming code. <span class="s11">Stepwise refinement </span>is one process used to rewrite pseudocode to make it ready for implementation. Stepwise refinement is pretty simple. Basically, it means, <span class="s12">“</span>Make it more detailed.<span class="s12">” </span>By taking each step described in pseudocode and breaking it down into a series of simpler steps, the plan becomes closer to programming code. Using stepwise refinement, you keep breaking down each step until you feel the entire plan could be fairly easily translated into a program. As an example, take a step from my master plan to make a million dollars:</p><p class="s50" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Create an infomercial about your product</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This might seem like too vague of a task. How do you create an infomercial? Using stepwise refinement, you can break down the single step into several others. So it becomes</p><p class="s50" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">Write a script for an infomercial about your product Rent a TV studio for a day</p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hire a production crew</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">Hire an enthusiastic audience Film the infomercial</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark459">Introducing Hangman 141</a><a name="bookmark532">&zwnj;</a><a name="bookmark533">&zwnj;</a><a name="bookmark534">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If you feel these five steps are clear and achievable, then that part of the pseudocode has been thoroughly refined. If you<span class="s12">’</span>re still unclear about a step, refine it some more. Continue with this process and you will have a complete plan<span class="s12">—</span>and a million dollars.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="s30" name="a172">Introducing Hangman</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark460">In the Hangman program, the computer picks a secret word and the player tries to guess it one letter at a time. The player is allowed eight incorrect guesses. If he or she fails to guess the word in time, the player is hanged and the game is over. Figure 4.6 shows the game.</a><a name="bookmark535">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="469" height="247" alt="image" src="Image_185.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 4.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The Hangman game in action</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a173"><h1 href="#bookmark7">Planning the Game</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Before I write a single line in C++, I plan the game program using pseudocode.</p><p class="s50" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Create a group of words</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Pick a random word from the group as the secret word</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">While player hasn’t made too many incorrect guesses and hasn’t guessed the secret word</p><p class="s50" style="padding-left: 72pt;text-indent: 0pt;line-height: 118%;text-align: left;">Tell player how many incorrect guesses he or she has left Show player the letters he or she has guessed</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark536">142 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 72pt;text-indent: 0pt;line-height: 119%;text-align: left;">Show player how much of the secret word he or she has guessed Get player’s next guess</p><p class="s50" style="padding-left: 103pt;text-indent: -31pt;line-height: 119%;text-align: left;">While player has entered a letter that he or she has already guessed Get player’s guess</p><p class="s50" style="padding-left: 72pt;text-indent: 0pt;line-height: 119%;text-align: left;">Add the new guess to the group of used letters If the guess is in the secret word</p><p class="s50" style="padding-left: 103pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Tell the player the guess is correct</p><p class="s50" style="padding-top: 1pt;padding-left: 72pt;text-indent: 31pt;line-height: 119%;text-align: left;">Update the word guessed so far with the new letter Otherwise</p><p class="s50" style="padding-left: 103pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Tell the player the guess is incorrect</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 62pt;line-height: 118%;text-align: left;"><a name="bookmark461">Increment the number of incorrect guesses the player has made If the player has made too many incorrect guesses</a><a name="bookmark537">&zwnj;</a></p><p class="s50" style="padding-left: 41pt;text-indent: 31pt;line-height: 118%;text-align: left;">Tell the player that he or she has been hanged Otherwise</p><p class="s50" style="padding-left: 72pt;text-indent: 0pt;text-align: left;">Congratulate the player on guessing the secret word</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although the pseudocode doesn<span class="s12">’</span>t account for every line of C++ I<span class="s12">’</span>ll write, I think it does a good job describing what I need to do. Then I begin writing the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a174"><h1 href="#bookmark7">Setting Up the Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As usual, I start with some comments and include the files I need.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Hangman</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// The classic game of hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; #include &lt;ctime&gt; #include &lt;cctype&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice that I include a new file<span class="s12">—</span><span class="s35">cctype</span>. It<span class="s12">’</span>s part of the standard library and it includes functions for converting characters to uppercase, which I use so I can compare apples to apples (uppercase to uppercase) when I compare individual characters.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark462">Introducing Hangman 143</a><a name="bookmark538">&zwnj;</a><a name="bookmark539">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a175"><h1 href="#bookmark7">Initializing Variables and Constants</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Next I start the <span class="s35">main() </span>function and initialize variables and constants for the game.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//setup</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">const int MAX_WRONG = 8;    //maximum number of incorrect guesses allowed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark463">vector&lt;string&gt; words;    //collection of possible words to guess words.push_back(&quot;GUESS&quot;);</a><a name="bookmark540">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">words.push_back(&quot;HANGMAN&quot;); words.push_back(&quot;DIFFICULT&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">srand(static_cast&lt;unsigned int&gt;(time(0))); random_shuffle(words.begin(), words.end());</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const string THE_WORD = words[0];                        //word to guess</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int wrong = 0;                                                             //number of incorrect guesses string soFar(THE_WORD.size(), ’-’);                  //word guessed so far</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">string used = &quot;&quot;; //letters already guessed</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Welcome to Hangman. Good luck!\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">MAX_WRONG </span>is the maximum number of incorrect guesses the player can make. <span class="s35">words </span>is a vector of possible words to guess. I randomize <span class="s35">words </span>using the <span class="s35">random_shuffle() </span>algorithm, and then I assign the first word in the vector to <span class="s35">THE_WORD</span>, which is the secret word the player must guess. <span class="s35">wrong </span>is the number of incorrect guesses the player has made. <span class="s35">soFar </span>is the word guessed so far by the player. <span class="s35">soFar </span>starts out as a series of dashes<span class="s12">—</span>one for each letter in the secret word. When the player guesses a letter that<span class="s12">’</span>s in the secret word, I replace the dash at the corresponding position with the letter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a176"><h1 href="#bookmark7">Entering the Main Loop</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I enter the main loop, which continues until the player has made too many incorrect guesses or has guessed the word.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//main loop</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while ((wrong &lt; MAX_WRONG) &amp;&amp; (soFar != THE_WORD))</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark464">144 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark541">&zwnj;</a><a name="bookmark542">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\nYou have &quot; &lt;&lt; (MAX_WRONG - wrong); cout &lt;&lt; &quot; incorrect guesses left.\n&quot;;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYou’ve used the following letters:\n&quot; &lt;&lt; used &lt;&lt; endl; cout &lt;&lt; &quot;\nSo far, the word is:\n&quot; &lt;&lt; soFar &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a177"><h1 href="#bookmark7">Getting the Player’s Guess</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I get the player<span class="s12">’</span>s guess.</p><p class="s35" style="padding-top: 6pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">char guess;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\nEnter your guess: &quot;; cin &gt;&gt; guess;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">guess = toupper(guess); //make uppercase since secret word in uppercase while (used.find(guess) != string::npos)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nYou’ve already guessed &quot; &lt;&lt; guess &lt;&lt; endl; cout &lt;&lt; &quot;Enter your guess: &quot;;</p><p class="s35" style="padding-left: 103pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cin &gt;&gt; guess;</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">guess = toupper(guess);</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">used += guess;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">if (THE_WORD.find(guess) != string::npos)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;That’s right! &quot; &lt;&lt; guess &lt;&lt; &quot; is in the word.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">//update soFar to include newly guessed letter for (int i = 0; i &lt; THE_WORD.length(); ++i)</p><p class="s35" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">if (THE_WORD[i] == guess)</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">soFar[i] = guess;</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Sorry, &quot; &lt;&lt; guess &lt;&lt; &quot; isn’t in the word.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">++wrong;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark465">Summary 145</a><a name="bookmark543">&zwnj;</a><a name="bookmark544">&zwnj;</a><a name="bookmark545">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I convert the guess to uppercase using the function <span class="s35">uppercase()</span>, which is defined in the file <span class="s35">cctype</span>. I do this so I can compare uppercase letters to uppercase letters when I<span class="s12">’</span>m checking a guess against the letters of the secret word.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If the player guesses a letter that he or she has already guessed, I make the player guess again. If the player guesses a letter correctly, I update the word guessed so far. Otherwise, I tell the player the guess is not in the secret word and I increase the number of incorrect guesses the player has made.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark466"><h1 href="#bookmark7">Ending the Game</h1></a><a name="bookmark546">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point, the player has guessed the word or has made one too many incorrect guesses. Either way, the game is over.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//shut down</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (wrong == MAX_WRONG)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou’ve been hanged!&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nYou guessed it!&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nThe word was &quot; &lt;&lt; THE_WORD &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">I congratulate the player or break the bad news that he or she has been hanged. Then I reveal the secret word.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a178">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you learned the following concepts:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">The Standard Template Library (STL) is a powerful collection of programming code that provides containers, algorithms, and iterators.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Containers are objects that let you store and access collections of values of the same type.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark547">146 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman<a name="bookmark548">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Algorithms defined in the STL can be used with its containers and provide common functions for working with groups of objects.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Iterators are objects that identify elements in containers and can be manipulated to move among elements.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Iterators are the key to using containers to their fullest. Many of the container member functions require iterators, and the STL algorithms require them too.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark467"><span class="s29">n </span></a>To get the value referenced by an iterator, you must dereference the iterator using the dereference operator (<span class="s35">*</span>).<a name="bookmark549">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A vector is one kind of sequential container provided by the STL. It acts like a dynamic array.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>It<span class="s12">’</span>s very efficient to iterate through a vector. It<span class="s12">’</span>s also very efficient to insert or remove an element from the end of a vector.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">It can be inefficient to insert or delete elements from the middle of a vector, especially if the vector is large.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Pseudocode, which falls somewhere between English and a programming language, is used to plan programs.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Stepwise refinement is a process used to rewrite pseudocode to make it ready for implementation.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a179">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why is the STL important?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 107%;text-align: left;">A: Because it saves game programmers time and effort. The STL provides commonly used container types and algorithms.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Is the STL fast?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Definitely. The STL has been honed by hundreds of programmers to eke out as much performance as possible on each supported platform.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When should I use a vector instead of an array?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Almost always. Vectors are efficient and flexible. They do require a little more memory than arrays, but this tradeoff is almost always worth the benefits.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark550">Questions and Answers 147</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Is a vector as fast as an array?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Accessing a vector element can be just as fast as accessing an array element. Also, iterating though a vector can be just as fast as iterating through an array.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: If I can use the subscripting operator with vectors, why would I ever need iterators?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: There are several reasons. First, many of the <span class="s35">vector </span>member functions require iterators. (<span class="s35">insert() </span>and <span class="s35">erase() </span>are two examples.) Second, STL algorithms require iterators. And third, you can<span class="s12">’</span>t use the subscripting operator with most of the STL containers, so you<span class="s12">’</span>re going to have to learn to use iterators sooner or later.</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Which is the best way to access elements of a vector<span class="s12">—</span>through iterators or through the subscripting operator?</p><p style="padding-top: 6pt;padding-left: 59pt;text-indent: -18pt;line-height: 106%;text-align: justify;">A: It depends. If you need random-element access, then the subscripting operator is a natural fit. If you need to use STL algorithms, then you must use iterators.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: What about iterating through the elements of a vector? Should I use the subscripting operator or an iterator?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: You can use either method. However, an advantage of using an iterator is that it gives you the flexibility to substitute a different STL container in place of a vector (such as a list) without much code changing.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why does the STL define more than one sequential container type?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A: Different sequential container types have different performance properties.</p><p style="padding-left: 57pt;text-indent: 0pt;text-align: center;">They<span class="s12">’</span>re like tools in a toolbox; each tool is best suited for a different job.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are container adaptors?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Container adaptors are based on one of the STL sequence containers; they represent standard computer data structures. Although they are not official containers, they look and feel just like them.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s a stack?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A data structure in which elements are removed in the reverse order from how they were added. This means that the last element added is the first one</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark551">148 Chapter 4 </a><span class="s32">n </span>The Standard Template Library: Hangman</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: left;">removed. This is just like a real-life stack, from which you remove the last item you placed on the top of the stack.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a queue?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: A data structure in which elements are removed in the same order they were added. This is just like a real-life queue, such as a line of people in which the first person in line gets served first.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark468">Q: What</a><span class="s12">’</span>s a double-ended queue?<a name="bookmark552">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark469">A: A queue in which elements can be added or removed from either end. Q: What</a><span class="s12">’</span>s a priority queue?<a name="bookmark553">&zwnj;</a></p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: A data structure that supports finding and removing the element with the highest priority.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When would I use pseudocode?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: Any time you want to plan a program or section of code. Q: When would I use stepwise refinement?</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A: When you want to get even more detailed with your pseudocode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a180">Discussion Questions</a></p><ol id="l10"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Why should a game programmer use the STL?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages of a vector over an array?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What types of game objects might you store with a vector?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">How do performance characteristics of a container type affect the decision to use it?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Why is program planning important?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a181">Exercises</a></p><ol id="l11"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Write a program using vectors and iterators that allows a user to main- tain a list of his or her favorite games. The program should allow the user to list all game titles, add a game title, and remove a game title.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark554">Exercises 149</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Assuming that <span class="s35">scores </span>is a vector that holds elements of type <span class="s35">int</span>, what<span class="s12">’</span>s wrong with the following code snippet (meant to increment each element)?</p><p class="s35" style="padding-top: 7pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">vector&lt;int&gt;::iterator iter;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//increment each score</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (iter = scores.begin(); iter != scores.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">iter++;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Write pseudocode for the Word Jumble game from Chapter 3.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">This page intentionally left blank</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s27" name="bookmark555">chapter 5</a><a name="bookmark603">&zwnj;</a><a name="bookmark604">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_186.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s28" name="a182">Functions: Mad Lib</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark556">Every program you</a><span class="s12">’</span>ve seen so far has consisted of one function<span class="s12">—</span><span class="s35">main()</span>.<a name="bookmark605">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, once your programs reach a certain size or level of complexity, it becomes hard to work with them like this. Fortunately, there are ways to break up big programs into smaller, bite-sized chunks of code. In this chapter, you<span class="s12">’</span>ll learn about one way<span class="s12">—</span>creating new functions. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Write new functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Accept values into your new functions through parameters</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Return information from your new functions through return values</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Work with global variables and constants</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Overload functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Inline functions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="s30" name="a183">Creating Functions</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">C++ lets you write programs with multiple functions. Your new functions work just like the ones that are part of the standard language<span class="s12">—</span>they go off and perform a task and then return control to your program. A big advantage of writing new functions is it allows you to break up your code into manageable pieces. Just like the functions you<span class="s12">’</span>ve already learned about from the standard library, your new functions should do one job well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">151</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark557">152 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark606">&zwnj;</a><a name="bookmark607">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a184"><h1 href="#bookmark7">Introducing the Instructions Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The results of the Instructions program are pretty basic<span class="s12">—</span>a few lines of text that are the beginning of some game instructions. From the looks of the output, Instructions seems like a program you could have written way back in Chapter 1. But this program has a fresh element working behind the scenes<span class="s12">—</span>a new function. Take a look at Figure 5.1 to see the modest results of the code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_187.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 5.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The instructions are displayed by a function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">instructions.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Instructions</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates writing new functions #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">// function prototype (declaration) void instructions();</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark558">Creating Functions 153</a><a name="bookmark608">&zwnj;</a><a name="bookmark609">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">instructions(); return 0;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">// function definition void instructions()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Welcome to the most fun you’ve ever had with text!\n\n&quot;; cout &lt;&lt; &quot;Here’s how to play the game<span class="s56">.. .</span>\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a185"><h1 href="#bookmark7">Declaring Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Before you can call a function you<span class="s12">’</span>ve written, you have to declare it. One way to declare a function is to write a <span class="s11">function prototype</span><span class="s12">—</span>code that describes the function. You write a prototype by listing the return value of the function (or <span class="s35">void </span>if the function returns no value), followed by the name of the function, followed by a list of parameters between a set of parentheses. <span class="s11">Parameters </span>receive the values sent as arguments in a function call.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Just before the <span class="s35">main() </span>function, I write a function prototype:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void instructions();</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the preceding code, I declared a function named <span class="s35">instructions </span>that doesn<span class="s12">’</span>t return a value. (You can tell this because I used <span class="s35">void </span>as the return type.) The function also takes no values so it has no parameters. (You can tell this because there<span class="s12">’</span>s nothing between the parentheses.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Prototypes are not the only way to declare a function. Another way to accomplish the same thing is to let the function definition act as its own declaration. To do that, you simply have to put your function definition before the call to the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_188.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you don’t have to use prototypes, they offer a lot of benefits—not the least of which is making your code clearer.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_189.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark559">154 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark610">&zwnj;</a><a name="bookmark611">&zwnj;</a><a name="bookmark612">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a186"><h1 href="#bookmark7">Defining Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Defining functions means writing all the code that makes the function tick. You define a function by listing the return value of the function (or <span class="s35">void </span>if the function returns no value), followed by the name of the function, followed by a list of parameters between a set of parentheses<span class="s12">—</span>just like a function prototype (except you don<span class="s12">’</span>t end the line with a semicolon). This is called the <span class="s11">function</span></p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">header<span class="p">. Then you create a block with curly braces that contains the instructions</span></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">to be executed when the function is executed. This is called the <span class="s11">function body</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark560">At the end of the Instructions program, I define my simple </a><span class="s35">instructions() </span>function, which displays some game instructions. Because the function doesn<span class="s12">’</span>t return any value, I don<span class="s12">’</span>t need to use a <span class="s35">return </span>statement like I do in <span class="s35">main()</span>. I simply end the function definition with a closing curly brace.<a name="bookmark613">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void instructions()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Welcome to the most fun you’ve ever had with text!\n\n&quot;; cout &lt;&lt; &quot;Here’s how to play the game<span class="s56">.. .</span>\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_190.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A function definition must match its prototype on return type and function name; otherwise, you’ll generate a compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a187"><h1 href="#bookmark7">Calling Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You call your own functions the same way you call any other function<span class="s12">—</span>by writing the function<span class="s12">’</span>s name followed by a pair of parentheses that encloses a valid list of arguments. In <span class="s35">main()</span>, I call my newly minted function simply with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">instructions();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This line invokes <span class="s35">instructions()</span>. Whenever you call a function, control of the program jumps to that function. In this case, it means control jumps to <span class="s35">instructions() </span>and the program executes the function<span class="s12">’</span>s code, which displays the game instructions. When a function finishes, control returns to the calling code. In this case, it means control returns to <span class="s35">main()</span>. The next statement in <span class="s35">main () </span>(<span class="s35">return 0;</span>) is executed and the program ends.</p><p class="s19" style="padding-top: 2pt;padding-left: 259pt;text-indent: 0pt;text-align: left;"><a name="bookmark561">Using Parameters and Return Values 155</a><a name="bookmark614">&zwnj;</a><a name="bookmark615">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a188"><h1 href="#bookmark7">Understanding Abstraction</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">By writing and calling functions, you practice what<span class="s12">’</span>s known as <span class="s11">abstraction. </span>Abstraction lets you think about the big picture without worrying about the details. In this program, I can simply use the function <span class="s35">instructions() </span>without worrying about the details of displaying the text. All I have to do is call the function with one line of code, and it gets the job done.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark562">You might be surprised where you find abstraction, but people use it all the time. For example, consider two employees at a fast-food restaurant. If one tells the other that he just filled a Number 3 and </a><span class="s12">“</span>sized it,<span class="s12">” </span>the other employee knows that the first employee took a customer<span class="s12">’</span>s order, went to the heat lamps, grabbed a burger, went over to the deep fryer, filled their biggest cardboard container with french fries, went to the soda fountain, grabbed their biggest cup, filled it with soda, gave it all to the customer, took the customer<span class="s12">’</span>s money, and gave the customer change. Not only would this level of detail make for a boring conversation, but it<span class="s12">’</span>s unnecessary. Both employees understand what it means to fill a Number 3 and <span class="s12">“</span>size it.<span class="s12">” </span>They don<span class="s12">’</span>t have to concern themselves with all the details because they<span class="s12">’</span>re using abstraction.<a name="bookmark563">&zwnj;</a><a name="bookmark616">&zwnj;</a><a name="bookmark617">&zwnj;</a></p><p style="padding-top: 11pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a189">Using Parameters and Return Values</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As you<span class="s12">’</span>ve seen with standard library functions, you can provide a function value and get a value back. For example, with the <span class="s35">toupper() </span>function, you provide a character, and the function returns the uppercase version of it. Your own functions can also receive values and return a value. This allows your functions to communicate with the rest of your program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="h1" name="a190">Introducing the Yes or No </a><h1 href="#bookmark7">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Yes or No program asks the user typical questions a gamer might have to answer. First, the program asks the user to indicate yes or no. Then the program gets more specific and asks whether the user wants to save his game. Again, the results  of  the program are  not remarkable;  it<span class="s12">’</span>s their implementation that<span class="s12">’</span>s interesting. Each question is posed by a different function that communicates with <span class="s35">main()</span>. Figure 5.2 shows a sample run of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">yes_or_no.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">156 Chapter 5 <span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="489" height="258" alt="image" src="Image_192.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each question is asked by a separate function, and information is passed between these functions and</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">main()<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Yes or No</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates return values and parameters</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; char askYesNo1();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">char askYesNo2(string question);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">char answer1 = askYesNo1();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Thanks for answering: &quot; &lt;&lt; answer1 &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">char answer2 = askYesNo2(&quot;Do you wish to save your game?&quot;); cout &lt;&lt; &quot;Thanks for answering: &quot; &lt;&lt; answer2 &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 259pt;text-indent: 0pt;text-align: left;"><a name="bookmark618">Using Parameters and Return Values 157</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">char askYesNo1()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">char response1; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Please enter ’y’ or ’n’: &quot;; cin &gt;&gt; response1;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (response1 != ’y’ &amp;&amp; response1 != ’n’);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return response1;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark564">}</a><a name="bookmark619">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char askYesNo2(string question)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">char response2; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; question &lt;&lt; &quot; (y/n): &quot;; cin &gt;&gt; response2;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (response2 != ’y’ &amp;&amp; response2 != ’n’);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return response2;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a191"><h1 href="#bookmark7">Returning a Value</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can return a value from a function to send information back to the calling code. To return a value, you need to specify a return type and then return a value of that type from the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Specifying a Return Type</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first function I declare, <span class="s35">askYesNo1()</span>, returns a <span class="s35">char </span>value. You can tell this from the function prototype before <span class="s35">main()</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">char askYesNo1();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You can also see this from the function definition after <span class="s35">main()</span>:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">char askYesNo1()</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark620">158 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Using the return Statement</h3><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">askYesNo1() <span class="p">asks the user to enter y or n and keeps asking until he does. Once the user enters a valid character, the function wraps up with the following line, which returns the value of </span>response1<span class="p">.</span></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return response1;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice that <span class="s35">response1 </span>is a <span class="s35">char </span>value. It has to be because that<span class="s12">’</span>s what I promised to return in both the function prototype and function definition.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark565">A function ends whenever it hits a </a><span class="s35">return </span>statement. It<span class="s12">’</span>s perfectly acceptable for a function to have more than one <span class="s35">return</span>. This just means that the function has several points at which it can end.<a name="bookmark621">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_193.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You don’t have to return a value with a <span class="s35">return </span>statement. You can use <span class="s35">return </span>by itself in a function that returns no value (one that indicates <span class="s35">void </span>as its return type) to end the function.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_194.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Using a Returned Value</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In <span class="s35">main()</span>, I call the function with the following line, which assigns the return value of the function to <span class="s35">answer1</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">char answer1 = askYesNo1();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This means that <span class="s35">answer1 </span>is assigned either <span class="s35">’y’ </span>or <span class="s35">’n’</span><span class="s12">—</span>whichever character the user entered when prompted by <span class="s35">askYesNo1()</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next in <span class="s35">main()</span>, I display the value of <span class="s35">answer1 </span>for all to see.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a192"><h1 href="#bookmark7">Accepting Values into Parameters</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can send a function values that it accepts into its parameters. This is the most common way to get information into a function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Specifying Parameters</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The second function I declare, <span class="s35">askYesNo2()</span>, accepts a value into a parameter. Specifically, it accepts a value of type <span class="s35">string</span>. You can tell this from the function prototype before <span class="s35">main()</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char askYesNo2(string question);</p><p class="s19" style="padding-top: 2pt;padding-left: 259pt;text-indent: 0pt;text-align: left;"><a name="bookmark622">Using Parameters and Return Values 159</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_195.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You don’t have to use parameter names in a prototype; all you have to include are the parameter types. For example, the following is a perfectly valid prototype that declares <span class="s35">askYesNo2()</span>, a function with one <span class="s35">string </span>parameter that returns a <span class="s35">char</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">char askYesNo2(string);</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Even though you don’t have to use parameter names in prototypes, it’s a good idea to do so. It makes your code clearer, and it’s worth the minor effort.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_196.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">From the header of <span class="s35">askYesNo2()</span>, you can see that the function accepts a <span class="s35">string</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object as a parameter and names that parameter <span class="s35">question</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char askYesNo2(string question)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Unlike prototypes, you must specify parameter names in a function definition. You use a parameter name inside a function to access the parameter value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_197.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The parameter types specified in a function prototype must match the parameter types listed in the function definition. If they don’t, you’ll generate a nasty compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_198.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Passing Values to Parameters</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">askYesNo2() </span>function is an improvement over <span class="s35">askYesNo1()</span>. The new function allows you to ask your own personalized question by passing a string prompt to the function. In <span class="s35">main()</span>, I call <span class="s35">askYesNo2() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">char answer2 = askYesNo2(&quot;Do you wish to save your game?&quot;);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This statement calls <span class="s35">askYesNo2() </span>and passes the string literal argument <span class="s35">&quot;Do you wish to save your game?&quot;  </span>to the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Using Parameter Values</h3><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">askYesNo2()   <span class="p">accepts  </span>&quot;Do  you  wish  to  save  your  game?&quot;   <span class="p">into  its  parameter </span>question<span class="p">,  which  acts  like  any  other  variable  in  the  function.  In  fact,  I  display </span>question  <span class="p">with:</span></p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; question &lt;&lt; &quot; (y/n): &quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark566">160 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark623">&zwnj;</a><a name="bookmark624">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_199.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Actually, there’s a little more going on behind the scenes here. When the string literal <span class="s35">&quot;Do you wish to save your game?&quot; </span>is passed to <span class="s35">question</span>, a <span class="s35">string </span>object equal to the string literal is created and the <span class="s35">string </span>object gets assigned to <span class="s35">question</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_200.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just like <span class="s35">askYesNo1()</span>, <span class="s35">askYesNo2() </span>continues to prompt the user until he enters y or n. Then the function returns that value and ends.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Back in <span class="s35">main()</span>, the returned <span class="s35">char </span>value is assigned to <span class="s35">answer2</span>, which I then display.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a193"><h1 href="#bookmark7">Understanding Encapsulation</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You might not see the need for return values when you are using your own functions. Why not just use the variables <span class="s35">response1 </span>and <span class="s35">response2 </span>back in the <span class="s35">main()</span>? Because you can<span class="s12">’</span>t; <span class="s35">response1 </span>and <span class="s35">response2 </span>don<span class="s12">’</span>t exist outside of the functions in which they were defined. In fact, no variable you create in a function, including its parameters, can be directly accessed outside its function. This is a good thing, and it is called <span class="s11">encapsulation. </span>Encapsulation helps keep independent code truly separate by hiding or encapsulating the details. That<span class="s12">’</span>s why you use parameters and return values<span class="s12">—</span>to communicate only the informa- tion that needs to be exchanged. Plus, you don<span class="s12">’</span>t have to keep track of variables you create within a function in the rest of your program. As your programs get large, this is a great benefit.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Encapsulation might sound a lot like abstraction. That<span class="s12">’</span>s because they<span class="s12">’</span>re closely related. Encapsulation is a principal of abstraction. Abstraction saves you from worrying about the details, while encapsulation hides the details from you. As an example, consider a television remote control with volume up and down buttons. When you use a TV remote to change the volume, you<span class="s12">’</span>re employing abstraction because you don<span class="s12">’</span>t need to know what happens inside the TV for it to work. Now suppose the TV remote has 10 volume levels. You can get to them all through the remote, but you can<span class="s12">’</span>t directly access them. That is, you can<span class="s12">’</span>t get a specific volume number directly. You can only press the up volume and down volume buttons to eventually get to the level you want. The actual volume number is encapsulated and not directly available to you.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark567">Working with Scopes 161</a><a name="bookmark625">&zwnj;</a><a name="bookmark626">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a194">Understanding Software Reuse</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can reuse functions in other programs. For example, since asking the user a yes or no question is such a common thing to do in a game, you could create an <span class="s35">askYesNo() </span>function and use it in all of your future game programs. So writing good functions not only saves you time and energy in your current game project, but it can save you effort in future ones, too.</p><p class="s24" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark568">Rea l Worl d</a><a name="bookmark627">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_201.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark569">It’s always a waste of time to reinvent the wheel, so </a><i>software reuse</i>—employing existing software and other elements in new projects—is a technique that game companies take to heart. The benefits of software reuse include:<a name="bookmark628">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Increased company productivity. </span><span class="s19">By reusing code and other elements that already exist, such as a graphics engine, game companies can get their projects done with less effort.</span></p><p class="s29" style="padding-top: 8pt;padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Improved software quality. </span><span class="s19">If a game company already has a tested piece of code, such as a networking module, then the company can reuse the code with the knowledge that it’s bug-free.</span></p><p class="s29" style="padding-top: 8pt;padding-left: 82pt;text-indent: -11pt;text-align: left;">n <span class="s37">Improved software performance. </span><span class="s19">Once a game company has a high-performance piece of code, using it again not only saves the company the trouble of reinventing the wheel, it saves them from reinventing a less efficient one.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_202.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can reuse code you<span class="s12">’</span>ve written by copying from one program and pasting it into another, but there is a better way. You can divide up a big game project into multiple files. You<span class="s12">’</span>ll learn about this technique in Chapter 10, <span class="s12">“</span>Inheritance and Polymorphism: Blackjack.<span class="s12">”</span></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark7" class="s30" name="a195">Working with Scopes</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A variable<span class="s12">’</span>s <span class="s11">scope </span>determines where the variable can be seen in your program. Scopes allow you to limit the accessibility of variables and are the key to encapsulation, helping keep separate parts of your program, such as functions, apart from each other.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a196"><h1 href="#bookmark7">Introducing the Scoping Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Scoping program demonstrates scopes. The program creates three variables with the same name in three separate scopes. The program displays the values of</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">162 Chapter 5 <span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">these variables, and you can see that even though they all have the same name, the variables are completely separate entities. Figure 5.3 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_203.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 5.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Even though they have the same name, all three variables have a unique existence in their own scopes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">scoping.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Scoping</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates scopes #include &lt;iostream&gt; using namespace std; void func();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int var = 5;    // local variable in main() cout &lt;&lt; &quot;In main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark629">Working with Scopes 163</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">func();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Back in main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Creating new var in new scope.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">int var = 10;    // variable in new scope, hides other variable named var cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark570">}</a><a name="bookmark630">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;At end of main() var created in new scope no longer exists.\n&quot;; cout &lt;&lt; &quot;At end of main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void func()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int var = -5;    // local variable in func() cout &lt;&lt; &quot;In func() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a197"><h1 href="#bookmark7">Working with Separate Scopes</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every time you use curly braces to create a block, you create a scope. Functions are one example of this. Variables declared in a scope aren<span class="s12">’</span>t visible outside of that scope. This means that variables declared in a function aren<span class="s12">’</span>t visible outside of that function.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Variables declared inside a function are considered <span class="s11">local variables</span><span class="s12">—</span>they<span class="s12">’</span>re local to the function. This is what makes functions encapsulated.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen many local variables in action already. I define yet another local variable in <span class="s35">main() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int var = 5;    // local variable in main()</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This line declares and initializes a local variable named <span class="s35">var</span>. I send the variable to <span class="s35">cout </span>in the next line of code:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark631">164 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">This works just as you<span class="s12">’</span>d expect<span class="s12">—</span>5 is displayed.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I call <span class="s35">func()</span>. Once I enter the function, I<span class="s12">’</span>m in a separate scope outside of the scope defined by <span class="s35">main()</span>. As a result, I can<span class="s12">’</span>t access the variable <span class="s35">var </span>that I defined in <span class="s35">main()</span>. This means that when I next define a variable named <span class="s35">var </span>in <span class="s35">func() </span>with the following line, this new variable is completely separate from the variable named <span class="s35">var </span>in <span class="s35">main()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int var = -5;    // local variable in func()</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The two have no effect on each other, and that<span class="s12">’</span>s the beauty of scopes. When you write a function, you don<span class="s12">’</span>t have to worry if another function uses the same variable names.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Then, when I display the value of <span class="s35">var </span>in <span class="s35">func() </span>with the following line, the computer displays 5.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In func() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That<span class="s12">’</span>s because, as far as the computer can see in this scope, there<span class="s12">’</span>s only one variable named <span class="s35">var</span><span class="s12">—</span>the local variable I declared in this function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Once a scope ends, all of the variables declared in that scope cease to exist. They<span class="s12">’</span>re said to go <span class="s11">out of scope</span>. So next, when <span class="s35">func() </span>ends, its scope ends. This means all of the variables declared in <span class="s35">func() </span>are destroyed. As a result, the <span class="s35">var </span>I declared in <span class="s35">func() </span>with a value of 5 is destroyed.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After <span class="s35">func() </span>ends, control returns to <span class="s35">main() </span>and picks up right where it left off. Next, the following line is executed, which sends <span class="s35">var </span>to <span class="s35">cout</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Back in main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The value of the <span class="s35">var </span>local to <span class="s35">main() </span>(5) is displayed again.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You might be wondering what happened to the <span class="s35">var </span>I created in <span class="s35">main() </span>while I was in <span class="s35">func()</span>. Well, the variable wasn<span class="s12">’</span>t destroyed because <span class="s35">main() </span>hadn<span class="s12">’</span>t yet ended. (Program control simply took a small detour to <span class="s35">func()</span>.) When a program momentarily exits one function to enter another, the computer saves its place in the first function, keeping safe the values of all of its local variables, which are reinstated when control returns to the first function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_204.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Parameters act just like local variables in functions.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_205.png"/></span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark571">Working with Scopes 165</a><a name="bookmark632">&zwnj;</a><a name="bookmark633">&zwnj;</a><a name="bookmark634">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a198"><h1 href="#bookmark7">Working with Nested Scopes</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">You can create a nested scope with a pair of curly braces in an existing scope. That<span class="s12">’</span>s what I do next in <span class="s35">main()</span>, with:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Creating new var in new scope.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">int var = 10;    // variable in new scope, hides other variable named var cout &lt;&lt; &quot;In main() in a new scope var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This new scope is a nested scope in <span class="s35">main()</span>. The first thing I do in this nested scope is display <span class="s35">var</span>. If a variable hasn<span class="s12">’</span>t been declared in a scope, the computer looks up the levels of nested scopes one at a time to find the variable you requested. In this case, because <span class="s35">var </span>hasn<span class="s12">’</span>t been declared in this nested scope, the computer looks one level up to the scope that defines <span class="s35">main() </span>and finds <span class="s35">var</span>. As a result, the program displays that variable<span class="s12">’</span>s value<span class="s12">—</span>5.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, the next thing I do in this nested scope is declare a new variable named <span class="s35">var </span>and initialize it to 10. Now when I send <span class="s35">var </span>to <span class="s35">cout</span>, 10 is displayed. This time the computer doesn<span class="s12">’</span>t have to look up any levels of nested scopes to find <span class="s35">var</span>; there<span class="s12">’</span>s a <span class="s35">var </span>local to this scope. And don<span class="s12">’</span>t worry, the <span class="s35">var </span>I first declared in <span class="s35">main() </span>still exists; it<span class="s12">’</span>s simply hidden in this nested scope by the new <span class="s35">var</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_206.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you can declare variables with the same name in a series of nested scopes, it’s not a good idea because it can lead to confusion.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_207.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next, when the nested scope ends, the <span class="s35">var </span>that was equal to 10 goes out of scope and ceases to exist. However, the first <span class="s35">var </span>I created is still around, so when I display <span class="s35">var </span>for the last time in <span class="s35">main() </span>with the following line, the program displays 5.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;At end of main() var is: &quot; &lt;&lt; var &lt;&lt; &quot;\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark572">166 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark635">&zwnj;</a><a name="bookmark636">&zwnj;</a><a name="bookmark637">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_208.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you define variables inside <span class="s35">for </span>loops, <span class="s35">while </span>loops, <span class="s35">if </span>statements, and <span class="s35">switch </span>statements, these variables don’t exist outside their structures. They act like variables declared in a nested scope. For example, in the following code, the variable <span class="s35">i </span>doesn’t exist outside the loop.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for(int i = 0; i &lt; 10; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; i;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">// i doesn’t exist outside the loop</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark573">But beware—some older compilers don’t properly implement this functionality of standard C++. I recommend that you use an IDE with a modern compiler, such as Microsoft Visual C++ 2010 Express Edition. For step-by-step instructions on how to create your first project with this IDE, check out Appendix A.</a><a name="bookmark638">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_209.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="s30" name="a199">Using Global Variables</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Through the magic of encapsulation, the functions you<span class="s12">’</span>ve seen are all totally sealed off and independent from each other. The only way to get information into them is through their parameters, and the only way to get information out of them is from their return values. Well, that<span class="s12">’</span>s not completely true. There is another way to share information among parts of your program<span class="s12">—</span>through <span class="s11">global variables </span>(variables that are accessible from any part of your program).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark7" class="h1" name="a200">Introducing the Global Reach </a><h1 href="#bookmark7">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Global Reach program demonstrates global variables. The program shows how you can access a global variable from anywhere in your program. It also shows how you can hide a global variable in a scope. Finally, it shows that you can change a global variable from anywhere in your program. Figure 5.4 shows the results of the program.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">global_reach.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">// Global Reach</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates global variables #include &lt;iostream&gt;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Using Global Variables 167</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_210.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">You can access and change global variables from anywhere in a program—but they can also be hidden in a scope as well.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">int glob = 10;    // global variable void access_global();</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">void hide_global(); void change_global();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;; access_global();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">hide_global();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">change_global();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark574">168 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark639">&zwnj;</a><a name="bookmark640">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void access_global()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In access_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void hide_global()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int glob = 0;    // hide global variable glob</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In hide_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark575">void change_global()</a><a name="bookmark641">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">glob = -10;    // change global variable glob</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In change_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a201"><h1 href="#bookmark7">Declaring Global Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You declare global variables outside of any function in your program file. That<span class="s12">’</span>s what I do in the following line, which creates a global variable named <span class="s35">glob </span>initialized to 10.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">int glob = 10;    // global variable</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a202"><h1 href="#bookmark7">Accessing Global Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can access a global variable from anywhere in your program. To prove it, I display <span class="s35">glob </span>in <span class="s35">main() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The program displays 10 because as a global variable, <span class="s35">glob </span>is available to any part of the program. To show this again, I next call <span class="s35">access_global()</span>, and the computer executes the following code in that function:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In access_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Again, 10 is displayed. That makes sense because I<span class="s12">’</span>m displaying the exact same variable in each function.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark576">Using Global Variables 169</a><a name="bookmark642">&zwnj;</a><a name="bookmark643">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a203"><h1 href="#bookmark8">Hiding Global Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can hide a global variable like any other variable in a scope; you simply declare a new variable with the same name. That<span class="s12">’</span>s exactly what I do next, when I call <span class="s35">hide_global()</span>. The key line in that function doesn<span class="s12">’</span>t change the global variable <span class="s35">glob</span>; instead, it creates a new variable named <span class="s35">glob</span>, local to <span class="s35">hide_global()</span>, that hides the global variable.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int glob = 0;    // hide global variable glob</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark577">As a result, when I send </a><span class="s35">glob </span>to <span class="s35">cout </span>next in <span class="s35">hide_global() </span>with the following line, 0 is displayed.<a name="bookmark644">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In hide_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The global variable <span class="s35">glob </span>remains hidden in the scope of <span class="s35">hide_global() </span>until the function ends.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">To prove that the global variable was only hidden and not changed, next I display <span class="s35">glob </span>back in <span class="s35">main() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Once again, 10 is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_211.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you can declare variables in a function with the same name as a global variable, it’s not a good idea because it can lead to confusion.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_212.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a204"><h1 href="#bookmark8">Altering Global Variables</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as you can access a global variable from anywhere in your program, you can alter one from anywhere in your program, too. That<span class="s12">’</span>s what I do next, when I call the <span class="s35">change_global() </span>function. The key line of the function assigns 10 to the global variable <span class="s35">glob</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">glob = -10;    // change global variable glob</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">To show that it worked, I display the variable in <span class="s35">change_global() </span>with:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In change_global() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Then, back in <span class="s35">main()</span>, I send <span class="s35">glob </span>to <span class="s35">cout </span>with:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;In main() glob is: &quot; &lt;&lt; glob &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Because the global variable <span class="s35">glob </span>was changed, 10 is displayed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark578">170 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark579">&zwnj;</a><a name="bookmark645">&zwnj;</a><a name="bookmark646">&zwnj;</a><a name="bookmark647">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="h1" name="a205">Minimizing the Use of Global </a><h1 href="#bookmark8">Variables</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Just because you can doesn<span class="s12">’</span>t mean you should. This is a good programming motto. Sometimes things are technically possible, but not a good idea. Using global variables is an example of this. In general, global variables make programs confusing because it can be difficult to keep track of their changing values. You should limit your use of global variables as much as possible.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a206">Using Global Constants</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Unlike global variables, which can make your programs confusing, <span class="s11">global constants</span><span class="s12">—</span>constants that can be accessed from anywhere in your program<span class="s12">— </span>can help make programs clearer. You declare a global constant much like you declare a global variable<span class="s12">—</span>by declaring it outside of any function. And because</p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">you<span class="s12">’</span>re declaring a constant, you need to use the <span class="s35">const </span>keyword. For example, the following line defines a global constant (assuming the declaration is outside of any function) named <span class="s35">MAX_ENEMIES </span>with a value of 10 that can be accessed anywhere in the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">const int MAX_ENEMIES = 10;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_213.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Just like with global variables, you can hide a global constant by declaring a local constant with the same name. However, you should avoid this because it can lead to confusion.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_214.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">How exactly can global constants make game programming code clearer? Well, suppose you<span class="s12">’</span>re writing an action game in which you want to limit the total number of enemies that can blast the poor player at once. Instead of using a numeric literal everywhere, such as 10, you could define a global constant <span class="s35">MAX_ENEMIES </span>that<span class="s12">’</span>s equal to 10. Then whenever you see that global constant name, you know exactly what it stands for.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One caveat: You should only use global constants if you need a constant value in more than one part of your program. If you only need a constant value in a specific scope (such as in a single function), use a local constant instead.</p><p class="s19" style="padding-top: 2pt;padding-left: 312pt;text-indent: 0pt;text-align: left;"><a name="bookmark580">Using Default Arguments 171</a><a name="bookmark581">&zwnj;</a><a name="bookmark648">&zwnj;</a><a name="bookmark649">&zwnj;</a><a name="bookmark650">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a207">Using Default Arguments</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When you write a function in which a parameter almost always gets passed the same value, you can save the caller the effort of constantly specifying this value by using a <span class="s11">default argument</span><span class="s12">—</span>a value assigned to a parameter if none is specified. Here<span class="s12">’</span>s  a  concrete  example.  Suppose you  have  a  function that  sets  the  graphics display. One of your parameters might be <span class="s35">bool fullScreen</span>, which tells the function whether to display the game in full-screen or windowed mode. Now, if you think the  function  will  often  be  called  with  <span class="s35">true  </span>for  <span class="s35">fullScreen</span>,  you  could  give  that parameter a default argument of <span class="s35">true</span>, saving the caller the effort of passing <span class="s35">true </span>to <span class="s35">fullScreen </span>whenever the caller invokes this display-setting function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a208"><h1 href="#bookmark8">Introducing the Give Me a Number Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Give Me a Number program asks the user for two different numbers in two different ranges. The same function is called each time the user is prompted for a number. However, each call to this function uses a different number of arguments because this function has a default argument for the lower limit. This means the caller can omit an argument for the lower limit, and the function will use a default value automatically. Figure 5.5 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_215.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A default argument is used for the lower limit the first time the user is prompted for a number.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark651">172 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">give_me_a_number.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Give Me a Number</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates default function arguments</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 30pt;text-align: left;">int askNumber(int high, int low = 1); int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int number = askNumber(5);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Thanks for entering: &quot; &lt;&lt; number &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">number = askNumber(10, 5);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Thanks for entering: &quot; &lt;&lt; number &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int askNumber(int high, int low)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int num; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Please enter a number&quot; &lt;&lt; &quot; (&quot; &lt;&lt; low &lt;&lt; &quot; - &quot; &lt;&lt; high &lt;&lt; &quot;): &quot;; cin &gt;&gt; num;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (num &gt; high || num &lt; low);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return num;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 312pt;text-indent: 0pt;text-align: left;"><a name="bookmark582">Using Default Arguments 173</a><a name="bookmark652">&zwnj;</a><a name="bookmark653">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a209"><h1 href="#bookmark8">Specifying Default Arguments</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function <span class="s35">askNumber() </span>has two parameters<span class="s12">—</span><span class="s35">high </span>and <span class="s35">low</span>. You can tell this from the function prototype:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int askNumber(int high, int low = 1);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Notice that the second parameter, <span class="s35">low</span>, looks like it<span class="s12">’</span>s assigned a value. In a way, it is. The <span class="s35">1 </span>is a default argument meaning that if a value isn<span class="s12">’</span>t passed to <span class="s35">low </span>when the function is called, <span class="s35">low </span>is assigned <span class="s35">1</span>. You specify default arguments by using <span class="s35">= </span>followed by a value after a parameter name.</p><p class="s24" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark583">Tra p</a><a name="bookmark654">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_216.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Once you specify a default argument in a list of parameters, you must specify default arguments for all remaining parameters. So the following prototype is valid:</p><p class="s35" style="padding-top: 5pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">void setDisplay(int height, int width, int depth = 32, bool fullScreen = true);</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">while this one is illegal:</p><p class="s35" style="padding-top: 6pt;padding-bottom: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">void setDisplay(int width, int height, int depth = 32, bool fullScreen);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_217.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By the way, you don<span class="s12">’</span>t repeat the default argument in the function definition, as you can see in the function definition of <span class="s35">askNumber()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int askNumber(int high, int low)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="h1" name="a210">Assigning Default Arguments to </a><h1 href="#bookmark8">Parameters</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">askNumber() </span>function asks the user for a number between an upper and a lower limit. The function keeps asking until the user enters a number within the range, and then it returns the number. I first call the function in <span class="s35">main() </span>with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int number = askNumber(5);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As a result of this code, the parameter <span class="s35">high </span>in <span class="s35">askNumber() </span>is assigned 5. Because I don<span class="s12">’</span>t provide any value for the second parameter, <span class="s35">low</span>, it gets assigned the default value of 1. This means the function prompts the user for a number between 1 and 5.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_218.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you are calling a function with default arguments, once you omit an argument, you must omit arguments for all remaining parameters. For example, given the prototype</p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">void setDisplay(int height, int width, int depth = 32, bool fullScreen = true);</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark584">174 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark655">&zwnj;</a><a name="bookmark656">&zwnj;</a><a name="bookmark657">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">a valid call to the function would be</p><p class="s35" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">setDisplay(1680, 1050);</p><p class="s19" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">while an illegal call would be</p><p class="s35" style="padding-top: 6pt;padding-bottom: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">setDisplay(1680, 1050, false);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_219.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark585">Once the user enters a valid number, </a><span class="s35">askNumber() </span>returns that value and ends. Back in <span class="s35">main()</span>, the value is assigned to <span class="s35">number </span>and displayed.<a name="bookmark658">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark586"><h1 href="#bookmark8">Overriding Default Arguments</h1></a><a name="bookmark659">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I call <span class="s35">askNumber() </span>again with:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">number = askNumber(10, 5);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This time I pass a value for <span class="s35">low</span><span class="s12">—</span>5. This is perfectly fine; you can pass an argument for any parameter with a default argument, and the value you pass will override the default. In this case, it means that <span class="s35">low </span>is assigned 5.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As a result, the user is prompted for a number between 5 and 10. Once the user enters a valid number, <span class="s35">askNumber() </span>returns that value and ends. Back in <span class="s35">main()</span>, the value is assigned to <span class="s35">number </span>and displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a211">Overloading Functions</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen how you must specify a parameter list and a single return type for each function you write. But what if you want a function that<span class="s12">’</span>s more versatile<span class="s12">— </span>one that can accept different sets of arguments? For example, suppose you want to write a function that performs a 3D transformation on a set of vertices that are represented as <span class="s35">float</span>s, but you want the function to work with <span class="s35">int</span>s as well. Instead of writing two separate functions with two different names, you could use function overloading so that a single function could handle the different parameter lists. This way, you could call one function and pass vertices as either <span class="s35">float</span>s or <span class="s35">int</span>s.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a212"><h1 href="#bookmark8">Introducing the Triple Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Triple program triples the value 5, and <span class="s12">“</span>gamer<span class="s12">”</span>. The program triples these values using a single function that<span class="s12">’</span>s been overloaded to work with an argument of two different types: <span class="s35">int </span>and <span class="s35">string</span>. Figure 5.6 shows a sample run of the program.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark660">Overloading Functions 175</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_220.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Function overloading allows you to triple the values of two different types using the same function name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">triple.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Triple</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates function overloading</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 30pt;text-align: left;">using namespace std; int triple(int number);</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: left;">string triple(string text);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark587">176 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark661">&zwnj;</a><a name="bookmark662">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Tripling 5: &quot; &lt;&lt; triple(5) &lt;&lt; &quot;\n\n&quot;; cout &lt;&lt; &quot;Tripling ’gamer’: &quot; &lt;&lt; triple(&quot;gamer&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int triple(int number)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (number * 3);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string triple(string text)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (text + text + text);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a213"><h1 href="#bookmark8">Creating Overloaded Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">To create an overloaded function, you simply need to write multiple function definitions with the same name and different parameter lists. In the Triple program, I write two definitions for the function <span class="s35">triple()</span>, each of which specifies a different type as its single argument. Here are the function prototypes:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">int triple(int number); string triple(string text);</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first takes an <span class="s35">int </span>argument and returns an <span class="s35">int</span>. The second takes a <span class="s35">string</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object and returns a <span class="s35">string </span>object.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In each function definition, you can see that I return triple the value sent. In the first function, I return the <span class="s35">int </span>sent, tripled. In the second function, I return the string sent, repeated three times.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_221.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">To implement function overloading, you need to write multiple definitions for the same function with different parameter lists. Notice that I didn’t mention anything about return types. That’s because if you write two function definitions in which only the return type is different, you’ll generate a compile error. For example, you cannot have both of the following prototypes in a program:</p><p class="s35" style="padding-top: 5pt;padding-left: 61pt;text-indent: 0pt;line-height: 118%;text-align: justify;">int Bonus(int); float Bonus(int);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_222.png"/></span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark588">Inlining Functions 177</a><a name="bookmark589">&zwnj;</a><a name="bookmark663">&zwnj;</a><a name="bookmark664">&zwnj;</a><a name="bookmark665">&zwnj;</a><a name="bookmark666">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a214"><h1 href="#bookmark8">Calling Overloaded Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can call an overloaded function the same way you call any other function, by using its name with a set of valid arguments. But with overloaded functions, the compiler (based on the argument values) determines which definition to invoke. For example, when I call <span class="s35">triple() </span>with the following line and use an <span class="s35">int </span>as the argument, the compiler knows to invoke the definition that takes an <span class="s35">int</span>. As a result, the function returns the <span class="s35">int </span>15.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Tripling 5: &quot; &lt;&lt; triple(5) &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark590">I call </a><span class="s35">triple() </span>again with:<a name="bookmark667">&zwnj;</a></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Tripling ’gamer’: &quot; &lt;&lt; triple(&quot;gamer&quot;);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because I use a string literal as the argument, the compiler knows to invoke the definition of the function that takes a <span class="s35">string </span>object. As a result, the function returns the <span class="s35">string </span>object equal to gamergamergamer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a215">Inlining Functions</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">There<span class="s12">’</span>s a small performance cost associated with calling a function. Normally, this isn<span class="s12">’</span>t a big deal because the cost is relatively minor. However, for tiny functions (such as one or two lines), it<span class="s12">’</span>s sometimes possible to speed up program performance by inlining them. By <span class="s11">inlining </span>a function, you ask the compiler to make a copy of the function everywhere it<span class="s12">’</span>s called. As a result, program control doesn<span class="s12">’</span>t have to jump to a different location each time the function is called.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="h1" name="a216">Introducing the Taking Damage </a><h1 href="#bookmark8">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Taking Damage program simulates what happens to a character<span class="s12">’</span>s health as the character takes radiation damage. The character loses half of his health each round. Fortunately, the program only runs three rounds, so we<span class="s12">’</span>re spared the sad end of the character. The program inlines the tiny function that calculates the character<span class="s12">’</span>s new health. Figure 5.7 shows the program results.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">taking_damage.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">178 Chapter 5 <span class="s32">n </span>Functions: Mad Lib</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_223.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The character approaches his demise quite efficiently as his health decreases through an inlined function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Taking Damage</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates function inlining #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">int radiation(int health); using namespace std;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int health = 80;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your health is &quot; &lt;&lt; health &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">health = radiation(health);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;After radiation exposure your health is &quot; &lt;&lt; health &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">health = radiation(health);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;After radiation exposure your health is &quot; &lt;&lt; health &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">health = radiation(health);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;After radiation exposure your health is &quot; &lt;&lt; health &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark591">Inlining Functions 179</a><a name="bookmark668">&zwnj;</a><a name="bookmark669">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">inline int radiation(int health)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (health / 2);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a217"><h1 href="#bookmark8">Specifying Functions for Inlining</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark592">To mark a function for inlining, simply put </a><span class="s35">inline </span>before the function definition. That<span class="s12">’</span>s what I do when I define the following function:<a name="bookmark670">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">inline int radiation(int health)</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Note that you don<span class="s12">’</span>t use <span class="s35">inline </span>in the function declaration:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int radiation(int health);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By flagging the function with <span class="s35">inline</span>, you ask the compiler to copy the function directly into the calling code. This saves the overhead of making the function call. That is, program control doesn<span class="s12">’</span>t have to jump to another part of your code. For small functions, this can result in a performance boost.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, inlining is not a silver bullet for performance. In fact, indiscriminate inlining can lead to worse performance because inlining a function creates extra copies of it, which can dramatically increase memory consumption.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_224.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you inline a function, you really make a request to the compiler, which has the ultimate decision on whether to inline the function. If your compiler thinks that inlining won’t boost performance, it won’t inline the function.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_225.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a218"><h1 href="#bookmark8">Calling Inlined Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Calling an inlined function is no different than calling a non-inlined function, as you see with my first call to <span class="s35">radiation()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">health = radiation(health);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This line of code assigns <span class="s35">health </span>one half of its original value.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Assuming that the compiler grants my request for inlining, this code doesn<span class="s12">’</span>t result in a function call. Instead, the compiler places the code to halve <span class="s35">health</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark593">180 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark671">&zwnj;</a><a name="bookmark672">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">right at this place in the program. In fact, the compiler does this for all three calls to the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_226.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although obsessing about performance is a game programmer’s favorite hobby, there’s a danger in focusing too much on speed. In fact, the approach many developers take is to first get their game programs working well before they tweak for small performance gains. At that point, programmers will <i>profile </i>their code by running a utility (a profiler) that analyzes where the game program spends its time. If a programmer sees bottlenecks, he or she might consider hand optimizations such as function inlining.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_227.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a219">Introducing the Mad Lib Game</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Mad Lib game asks for the user<span class="s12">’</span>s help in creating a story. The user supplies the name of a person, a plural noun, a number, and a verb. The program takes all of this information and uses it to create a personalized story. Figure 5.8 shows a sample run of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="511" height="269" alt="image" src="Image_228.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 5.8</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">After the user provides all of the necessary information, the program displays the literary masterpiece.</p><p class="s19" style="padding-top: 2pt;padding-left: 286pt;text-indent: 0pt;text-align: left;"><a name="bookmark594">Introducing the Mad Lib Game 181</a><a name="bookmark673">&zwnj;</a><a name="bookmark674">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 5 folder; the filename is <span class="s35">mad_lib.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a220"><h1 href="#bookmark8">Setting Up the Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">As usual, I start the program with some comments and include the necessary files.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Mad-Lib</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Creates a story based on user input</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark595">#include &lt;iostream&gt; #include &lt;string&gt;</a><a name="bookmark675">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">string askText(string prompt); int askNumber(string prompt);</p><p class="s35" style="padding-left: 114pt;text-indent: -73pt;line-height: 119%;text-align: left;">void tellStory(string name, string noun, int number, string bodyPart, string verb);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="p">You can tell from my function prototypes that I have three functions in addition to </span>main()<span class="s12">—</span>askText()<span class="p">, </span>askNumber()<span class="p">, and </span>tellStory()<span class="p">.</span></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a221"><h1 href="#bookmark8">The main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">main() </span>function calls all of the other functions. It calls the function <span class="s35">askText() </span>to get a name, plural noun, body part, and verb from the user. It calls <span class="s35">askNumber() </span>to get a number from the user. It calls <span class="s35">tellStory()  </span>with all of the user-supplied information to generate and display the story.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Welcome to Mad Lib.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Answer the following questions to help create a new story.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">string name = askText(&quot;Please enter a name: &quot;);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">string noun = askText(&quot;Please enter a plural noun: &quot;); int number = askNumber(&quot;Please enter a number: &quot;); string bodyPart = askText(&quot;Please enter a body part: &quot;); string verb = askText(&quot;Please enter a verb: &quot;);</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark596">182 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark676">&zwnj;</a><a name="bookmark677">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">tellStory(name, noun, number, bodyPart, verb);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a222"><h1 href="#bookmark8">The askText() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark597">The </a><span class="s35">askText() </span>function gets a string from the user. The function is versatile and takes a parameter of type <span class="s35">string</span>, which it uses to prompt the user. Because of this, I<span class="s12">’</span>m able to call this single function to ask the user for a variety of different pieces of information, including a name, plural noun, body part, and verb.<a name="bookmark678">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string askText(string prompt)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">string text; cout &lt;&lt; prompt; cin &gt;&gt; text; return text;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_229.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Remember that this simple use of <span class="s35">cin </span>only works with strings that have no white space in them (such as tabs or spaces). So when a user is prompted for a body part, he can enter <span class="s35">bellybutton</span>, but <span class="s35">medulla oblongata </span>will cause a problem for the program.</p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">There are ways to compensate for this, but that really requires a discussion of something called <i>streams</i>, which is beyond the scope of this book. So use <span class="s35">cin </span>in this way, but just be aware of its limitations.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_230.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a223"><h1 href="#bookmark8">The askNumber() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">askNumber() </span>function gets an integer from the user. Although I only call it once in the program, it<span class="s12">’</span>s versatile because it takes a parameter of type <span class="s35">string </span>that it uses to prompt the user.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int askNumber(string prompt)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int num;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; prompt; cin &gt;&gt; num; return num;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark598">Summary 183</a><a name="bookmark679">&zwnj;</a><a name="bookmark680">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a224"><h1 href="#bookmark8">The tellStory() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The <span class="s35">tellStory() </span>function takes all of the information entered by the user and uses it to display a personalized story.</p><p class="s35" style="padding-top: 5pt;padding-left: 119pt;text-indent: -78pt;line-height: 119%;text-align: left;">void tellStory(string name, string noun, int number, string bodyPart, string verb)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nHere’s your story:\n&quot;; cout &lt;&lt; &quot;The famous explorer &quot;; cout &lt;&lt; name;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark599">cout &lt;&lt; &quot; had nearly given up a life-long quest to find\n&quot;; cout &lt;&lt; &quot;The Lost City of &quot;;</a><a name="bookmark681">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; noun;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot; when one day, the &quot;; cout &lt;&lt; noun;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot; found the explorer.\n&quot;; cout &lt;&lt; &quot;Surrounded by &quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; number; cout &lt;&lt; &quot; &quot; &lt;&lt; noun;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;, a tear came to &quot;; cout &lt;&lt; name &lt;&lt; &quot;’s &quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; bodyPart &lt;&lt; &quot;.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;After all this time, the quest was finally over. &quot;; cout &lt;&lt; &quot;And then, the &quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; noun &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;promptly devoured &quot;; cout &lt;&lt; name &lt;&lt; &quot;. &quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;The moral of the story? Be careful what you &quot;; cout &lt;&lt; verb;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; for.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a225">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Functions allow you to break up your programs into manageable chunks.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>One way to declare a function is to write a function prototype<span class="s12">—</span>code that lists the return value, name, and parameter types of a function.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Defining a function means writing all the code that makes the function tick.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark682">184 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark683">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can use the <span class="s35">return </span>statement to return a value from a function. You can also use <span class="s35">return </span>to end a function that has <span class="s35">void </span>as its return type.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A variable<span class="s12">’</span>s scope determines where the variable can be seen in your program.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Global variables are accessible from any part of your program. In general, you should try to limit your use of global variables.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Global constants are accessible from any part of your program. Using global constants can make your program code clearer.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark600">n </a><span class="p">Default arguments are assigned to a parameter if no value for the param- eter is specified in the function call.</span><a name="bookmark684">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Function overloading is the process of creating multiple definitions for the same function, each of which has a different set of parameters.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Function inlining is the process of asking the compiler to inline a function<span class="s12">—</span>meaning that the compiler should make a copy of the function everywhere in the code where the function is called. Inlining very small functions can sometimes yield a performance boost.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a226">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I write functions?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Functions allow you to break up your programs into logical pieces. These pieces result in smaller, more manageable chunks of code, which are easier to work with than a single monolithic program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What<span class="s12">’</span>s encapsulation?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 107%;text-align: justify;">A: At its core, encapsulation is about keeping things separate. Function encapsulation provides that variables declared in a function are not accessible outside the function, for example.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s the difference between an argument and a parameter?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -13pt;line-height: 106%;text-align: justify;">A: An argument is what you use in a function call to pass a value to a function. A parameter is what you use in a function definition to accept values passed to a function.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark685">Questions and Answers 185</a><a name="bookmark686">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can I have more than one <span class="s35">return </span>statement in a function?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: left;">A: Sure. In fact, you might want multiple <span class="s35">return </span>statements to specify different end points of a function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a local variable?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A variable that<span class="s12">’</span>s defined in a scope. All variables defined in a function are local variables; they<span class="s12">’</span>re local to that function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What does it mean to hide a variable?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A variable is hidden when you declare it inside a new scope with the same name as a variable in an outer scope. As a result, you can<span class="s12">’</span>t get to the variable in the outer scope by using its variable name in the inner scope.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: When does a variable go out of scope?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A variable goes out of scope when the scope in which it was created ends. Q: What does it mean when a variable goes out of scope?</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: It means the variable ceases to exist. Q: What<span class="s12">’</span>s a nested scope?</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A: A scope created within an existing scope.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Must an argument have the same name as the parameter to which it<span class="s12">’</span>s passed?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: No. You<span class="s12">’</span>re free to use different names. It<span class="s12">’</span>s only the value that<span class="s12">’</span>s passed from a function call to a function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can I write one function that calls another?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Of course. In fact, whenever you write a function that you call from <span class="s35">main()</span>, you<span class="s12">’</span>re doing just that. In addition, you can write a function (other than <span class="s35">main()</span>) that calls another function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is code profiling?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: It<span class="s12">’</span>s the process of recording how much CPU time various parts of a program use.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark601">186 Chapter 5 </a><span class="s32">n </span>Functions: Mad Lib<a name="bookmark687">&zwnj;</a><a name="bookmark688">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why profile code?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 107%;text-align: left;">A: To determine any bottlenecks in a program. Sometimes it makes sense to revisit these sections of code in an attempt to optimize them.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When do programmers profile code?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: Usually toward the end of the programming of a game project. Q: What<span class="s12">’</span>s premature optimization?</p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 107%;text-align: justify;"><a name="bookmark602">A: An attempt to optimize code too early in the development process. Code optimization usually makes sense near the end of programming a game project.</a><a name="bookmark689">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a227">Discussion Questions</a></p><ol id="l12"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How does function encapsulation help you write better programs?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How can global variables make code confusing?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How can global constants make code clearer?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the pros and cons of optimizing code?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How can software reuse benefit the game industry?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a228">Exercises</a></p><ol id="l13"><li><p style="padding-top: 1pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following prototype?</p><p class="s35" style="padding-top: 1pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">int askNumber(int low = 1, int high);</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Rewrite the Hangman game from Chapter 4 using functions. Include a function to get the player<span class="s12">’</span>s guess and another function to determine whether the player<span class="s12">’</span>s guess is in the secret word.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Using default arguments, write a function that asks the user for a number and returns that number. The function should accept a string prompt from the calling code. If the caller doesn<span class="s12">’</span>t supply a string for the prompt, the function should use a generic prompt. Next, using function overloading, write a function that achieves the same results.</p></li></ol><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:82pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s27" name="bookmark690">chapter 6</a><a name="bookmark732">&zwnj;</a><a name="bookmark733">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_231.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s28" name="bookmark691">References: Tic-Tac-Toe</a><a name="bookmark734">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark692">The concept of references is simple, but its implications are profound. In this chapter, you</a><span class="s12">’</span>ll learn about references and how they can help you write more efficient game code. Specifically, you<span class="s12">’</span>ll learn to:<a name="bookmark735">&zwnj;</a></p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Create references</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Access and change referenced values</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Pass references to functions to alter argument values or for efficiency</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Return references from a function for efficiency or to alter values</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a229">Using References</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">reference </span>provides another name for a variable. Whatever you do to a reference is done to the variable to which it refers. You can think of a reference as a nickname for a variable<span class="s12">—</span>another name that the variable goes by. In the first program in this chapter, I<span class="s12">’</span>ll show you how to create references. Then, in the next few programs, I<span class="s12">’</span>ll show you why you<span class="s12">’</span>d want to use references and how they can improve your game programs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a230"><h1 href="#bookmark8">Introducing the Referencing Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Referencing program demonstrates references. The program declares and initializes a variable to hold a score and then creates a reference that refers to the variable. The program displays the score using the variable and the reference to</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">187</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">188 Chapter 6 <span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">show that they access the same single value. Next, the program shows that this single value can be altered through either the variable or the reference. Figure 6.1 illustrates the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="233" alt="image" src="Image_232.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 6.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The variable <span class="s35">myScore </span>and the reference <span class="s35">mikesScore </span>are both names for the single score value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 6 folder; the filename is <span class="s35">referencing.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Referencing</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates using references #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int myScore = 1000;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int&amp; mikesScore = myScore;    //create a reference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore is: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mikesScore is: &quot; &lt;&lt; mikesScore &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark693">Using References 189</a><a name="bookmark736">&zwnj;</a><a name="bookmark737">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Adding 500 to myScore\n&quot;; myScore += 500;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore is: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mikesScore is: &quot; &lt;&lt; mikesScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Adding 500 to mikesScore\n&quot;; mikesScore += 500;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;myScore is: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mikesScore is: &quot; &lt;&lt; mikesScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a231"><h1 href="#bookmark8">Creating References</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The first thing I do in <span class="s35">main() </span>is create a variable to hold my score.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int myScore = 1000;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Then I create a reference that refers to <span class="s35">myScore</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int&amp; mikesScore = myScore;    //create a reference</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding line declares and initializes <span class="s35">mikesScore</span>, a reference that refers to <span class="s35">myScore</span>. <span class="s35">mikesScore </span>is an alias for <span class="s35">myScore</span>. <span class="s35">mikesScore </span>does not hold its own <span class="s35">int </span>value; it<span class="s12">’</span>s simply another way to get at the <span class="s35">int </span>value that <span class="s35">myScore </span>holds.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To declare and initialize a reference, start with the type of value to which the reference will refer, followed by the reference operator (<span class="s35">&amp;</span>), followed by the reference name, followed by <span class="s35">=</span>, followed by the variable to which the reference will refer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_233.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Sometimes programmers prefix a reference name with the letter “r” to remind them that they’re working with a reference. A programmer might include the following lines:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int playerScore = 1000; int&amp; rScore = playerScore;</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_234.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One way to understand references is to think of them as nicknames. For example, suppose you<span class="s12">’</span>ve got a friend named Eugene, and he (understandably) asks to be called by a nickname<span class="s12">—</span>Gibby (not much of an improvement, but it<span class="s12">’</span>s what Eugene</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark694">190 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark738">&zwnj;</a><a name="bookmark739">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">wants). So when you<span class="s12">’</span>re at a party with your friend, you can call him over using either Eugene or Gibby. Your friend is only one person, but you can call him using either his name or a nickname. This is the same way a variable and a reference to that variable work. You can get to a single value stored in a variable by using its variable name or the name of a reference to that variable. Finally, whatever you do, try not to name your variables <span class="s35">Eugene</span><span class="s12">—</span>for their sakes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_235.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;"><a name="bookmark695">Because a reference must always refer to another value, you must initialize the reference when you declare it. If you don’t, you’ll get a compile error. The following line is quite illegal:</a><a name="bookmark740">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int&amp; mikesScore;    //don’t try this at home!</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_236.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a232"><h1 href="#bookmark8">Accessing Referenced Values</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I send both <span class="s35">myScore </span>and <span class="s35">mikesScore </span>to <span class="s35">cout</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore is: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mikesScore is: &quot; &lt;&lt; mikesScore &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Both lines of code display <span class="s35">1000 </span>because they each access the same single chunk of memory that stores the number 1000. Remember, there is only one value, and it is stored in the variable <span class="s35">myScore</span>. <span class="s35">mikesScore </span>simply provides another way to get to that value.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a233"><h1 href="#bookmark8">Altering Referenced Values</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I increase the value of <span class="s35">myScore </span>by 500.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">myScore += 500;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When I send <span class="s35">myScore </span>to <span class="s35">cout</span>, <span class="s35">1500 </span>is displayed, just as you<span class="s12">’</span>d expect. When I send <span class="s35">mikesScore </span>to <span class="s35">cout</span>, <span class="s35">1500 </span>is also displayed. Again, that<span class="s12">’</span>s because <span class="s35">mikesScore </span>is just another name for the variable <span class="s35">myScore</span>. In essence, I<span class="s12">’</span>m sending the same variable to <span class="s35">cout </span>both times.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I increase <span class="s35">mikesScore </span>by 500.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">mikesScore += 500;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Because <span class="s35">mikesScore </span>is just another name for <span class="s35">myScore</span>, the preceding line of code increases the value of <span class="s35">myScore </span>by 500. So when I next send <span class="s35">myScore </span>to <span class="s35">cout</span>, <span class="s35">2000 </span>is displayed. When I send <span class="s35">mikesScore </span>to <span class="s35">cout</span>, <span class="s35">2000 </span>is displayed again.</p><p class="s19" style="padding-top: 2pt;padding-left: 248pt;text-indent: 0pt;text-align: left;"><a name="bookmark696">Passing References to Alter Arguments 191</a><a name="bookmark741">&zwnj;</a><a name="bookmark742">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_237.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">A reference always refers to the variable with which it was initialized. You can’t reassign a reference to refer to another variable so, for example, the results of the following code might not be obvious.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int myScore = 1000;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int&amp; mikesScore = myScore; int larrysScore = 2500;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">mikesScore = larrysScore;    //may not do what you think!</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark697">The  line  </a><span class="s35">mikesScore  =  larrysScore;  </span>does  not  reassign  the  reference  <span class="s35">mikesScore  </span>so it  refers  to  <span class="s35">larrysScore  </span>because  a  reference  can’t  be  reassigned.  However,  because <span class="s35">mikesScore </span>is just another name for <span class="s35">myScore</span>, the code <span class="s35">mikesScore = larrysScore; </span>is equivalent to <span class="s35">myScore = larrysScore;</span>, which assigns <span class="s35">2500 </span>to <span class="s35">myScore</span>. And after all is said and done, <span class="s35">myScore </span>becomes <span class="s35">2500 </span>and <span class="s35">mikesScore </span>still refers to <span class="s35">myScore</span>.<a name="bookmark743">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_238.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark8" class="s30" name="a234">Passing References to Alter Arguments</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Now that you<span class="s12">’</span>ve seen how references work, you might be wondering why you<span class="s12">’</span>d ever use them. Well, references come in quite handy when you are passing variables to functions because when you pass a variable to a function, the function gets a copy of the variable. This means that the original variable you passed (called the <span class="s11">argument variable</span>) can<span class="s12">’</span>t be changed. Sometimes this might be exactly what you want because it keeps the argument variable safe and unalterable. But other times you might want to change an argument variable from inside the function to which it was passed. You can accomplish this by using references.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a235"><h1 href="#bookmark8">Introducing the Swap Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Swap program defines two variables<span class="s12">—</span>one that holds my pitifully low score and another that holds your impressively high score. After displaying the scores, the program calls a function meant to swap the scores. But because only copies of the score values are sent to the function, the argument variables that hold the scores are unchanged. Next, the program calls another swap function. This time, through the use of references, the argument variables<span class="s12">’ </span>values are successfully exchanged<span class="s12">—</span>giving me the great big score and leaving you with the small one. Figure 6.2 shows the program in action.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark744">192 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="233" alt="image" src="Image_239.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 6.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Passing references allows <span class="s35">goodSwap() </span>to alter the argument variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 6 folder; the filename is <span class="s35">swap.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Swap</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates passing references to alter argument variables #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">void badSwap(int x, int y); void goodSwap(int&amp; x, int&amp; y);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int myScore = 150; int yourScore = 1000;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Original values\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 248pt;text-indent: 0pt;text-align: left;"><a name="bookmark745">Passing References to Alter Arguments 193</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Calling badSwap()\n&quot;; badSwap(myScore, yourScore);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Calling goodSwap()\n&quot;; goodSwap(myScore, yourScore);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark698">return 0;</a><a name="bookmark746">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void badSwap(int x, int y)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int temp = x; x = y;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">y = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void goodSwap(int&amp; x, int&amp; y)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int temp = x; x = y;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">y = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a236"><h1 href="#bookmark8">Passing by Value</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After declaring and initializing <span class="s35">myScore </span>and <span class="s35">yourScore</span>, I send them to <span class="s35">cout</span>. As you<span class="s12">’</span>d expect, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed. Next I call <span class="s35">badSwap()</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When you specify a parameter the way you<span class="s12">’</span>ve seen so far (as an ordinary variable, not as a reference), you<span class="s12">’</span>re indicating that the argument for that parameter will be <span class="s11">passed by value</span>, meaning that the parameter will get a <span class="s11">copy </span>of the argument variable and not access to the argument variable itself. By looking at the function header of <span class="s35">badSwap()</span>, you can tell that a call to the function passes both arguments by value.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void badSwap(int x, int y)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark699">194 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark747">&zwnj;</a><a name="bookmark748">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">This means that when I call <span class="s35">badSwap() </span>with the following line, copies of <span class="s35">myScore</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">and <span class="s35">yourScore </span>are sent to the parameters, <span class="s35">x </span>and <span class="s35">y</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">badSwap(myScore, yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Specifically, <span class="s35">x  </span>is assigned <span class="s35">150  </span>and <span class="s35">y  </span>is assigned <span class="s35">1000</span>. As a result, nothing I do with  <span class="s35">x  </span>and  <span class="s35">y  </span>in  the  function  <span class="s35">badSwap()  </span>will  have  any  effect  on  <span class="s35">myScore  </span>and <span class="s35">yourScore</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When the guts of <span class="s35">badSwap() </span>execute, <span class="s35">x </span>and <span class="s35">y </span>do exchange values<span class="s12">—</span><span class="s35">x </span>becomes <span class="s35">1000 </span>and <span class="s35">y </span>becomes <span class="s35">150</span>. However, when the function ends, both <span class="s35">x </span>and <span class="s35">y </span>go out of scope and cease to exist. Control then returns to <span class="s35">main()</span>, where <span class="s35">myScore </span>and <span class="s35">yourScore </span>haven<span class="s12">’</span>t changed. Then, when I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed again. Sadly, I still have the small score and you still have the large one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a237"><h1 href="#bookmark8">Passing by Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">It<span class="s12">’</span>s possible to give a function access to an argument variable by passing a parameter a reference to the argument variable. As a result, anything done to the parameter will be done to the argument variable. To <span class="s11">pass by reference</span>, you must first declare the parameter as a reference.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can tell that a call to <span class="s35">goodSwap() </span>passes both arguments by reference by looking at the function header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void goodSwap(int&amp; x, int&amp; y)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This means that when I call <span class="s35">goodSwap() </span>with the following line, the parameter <span class="s35">x</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">will refer to <span class="s35">myScore </span>and the parameter <span class="s35">y </span>will refer to <span class="s35">yourScore</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">goodSwap(myScore, yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This means that <span class="s35">x </span>is just another name for <span class="s35">myScore </span>and <span class="s35">y </span>is just another name for <span class="s35">yourScore</span>. When <span class="s35">goodSwap() </span>executes and <span class="s35">x </span>and <span class="s35">y </span>exchange values, what really happens is that <span class="s35">myScore </span>and <span class="s35">yourScore </span>exchange values.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After the function ends, control returns to <span class="s35">main()</span>, where I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>. This time <span class="s35">1000 </span>and <span class="s35">150 </span>are displayed. The variables have exchanged values. I<span class="s12">’</span>ve taken the large score and left you with the small one. Success at last!</p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark700">Passing References for Efficiency 195</a><a name="bookmark701">&zwnj;</a><a name="bookmark749">&zwnj;</a><a name="bookmark750">&zwnj;</a><a name="bookmark751">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="s30" name="a238">Passing References for Efficiency</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Passing a variable by value creates some overhead because you must copy the variable before you assign it to a parameter. When we<span class="s12">’</span>re talking about variables of simple, built-in types, such as an <span class="s35">int </span>or a <span class="s35">float</span>, the overhead is negligible. But a large object, such as one that represents an entire 3D world, could be expensive to copy. Passing by reference, on the other hand, is efficient because you don<span class="s12">’</span>t make a copy of an argument variable. Instead, you simply provide access to the existing object through a reference.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark8" class="h1" name="a239">Introducing the Inventory Displayer </a><h1 href="#bookmark8">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Inventory Displayer program creates a vector of strings that represents a hero<span class="s12">’</span>s inventory. The program then calls a function that displays the inventory. The program passes the displayer function the vector of items as a reference, so it<span class="s12">’</span>s an efficient call; the vector isn<span class="s12">’</span>t copied. However, there<span class="s12">’</span>s a new wrinkle. The program passes the vector as a special kind of reference that prohibits the displayer function from changing the vector. Figure 6.3 shows you the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 6 folder; the filename is <span class="s35">inventory_displayer.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="233" alt="image" src="Image_240.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 6.3</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">The vector <span class="s35">inventory </span>is passed in a safe and efficient way to the function that displays the hero’s items.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark752">196 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Inventory Displayer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates constant references</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark702">//parameter vec is a constant reference to a vector of strings void display(const vector&lt;string&gt;&amp; inventory);</a><a name="bookmark753">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt; inventory; inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">display(inventory);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//parameter vec is a constant reference to a vector of strings void display(const vector&lt;string&gt;&amp; vec)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Your items:\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: -26pt;line-height: 118%;text-align: left;">for (vector&lt;string&gt;::const_iterator iter = vec.begin(); iter != vec.end(); ++iter)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *iter &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark9" class="h1" name="a240">Understanding the Pitfalls of Reference </a><h1 href="#bookmark9">Passing</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">One way to efficiently give a function access to a large object is to pass it by reference. However, this introduces a potential problem. As you saw in the Swap program, it opens up an argument variable to being changed. But what if you</p><p class="s19" style="padding-top: 2pt;padding-left: 278pt;text-indent: 0pt;text-align: left;"><a name="bookmark703">Passing References for Efficiency 197</a><a name="bookmark754">&zwnj;</a><a name="bookmark755">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">don<span class="s12">’</span>t want to change the argument variable? Is there a way to take advantage of the efficiency of passing by reference while protecting an argument variable<span class="s12">’</span>s integrity? Yes, there is. The answer is to pass a constant reference.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_241.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">In general, you should avoid changing an argument variable. Try to write functions that send back new information to the calling code through a return value.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_242.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="h1" name="bookmark704">Declaring Parameters as Constant </a><h1 href="#bookmark9">References</h1><a name="bookmark756">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function <span class="s35">display() </span>shows the contents of the hero<span class="s12">’</span>s inventory. In the function<span class="s12">’</span>s header I specify one parameter<span class="s12">—</span>a constant reference to a vector of <span class="s35">string </span>objects named <span class="s35">vec</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void display(const vector&lt;string&gt;&amp; vec)</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">constant reference </span>is a restricted reference. It acts like any other reference, except you can<span class="s12">’</span>t use it to change the value to which it refers. To create a constant reference, simply put the keyword <span class="s35">const </span>before the type in the reference declaration.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">What does this all mean for the function <span class="s35">display()</span>? Because the parameter <span class="s35">vec </span>is a constant reference, it means <span class="s35">display() </span>can<span class="s12">’</span>t change <span class="s35">vec</span>. In turn, this means that <span class="s35">inventory </span>is safe; it can<span class="s12">’</span>t be changed by <span class="s35">display()</span>. In general, you can efficiently pass an argument to a function as a constant reference so it<span class="s12">’</span>s accessible, but not changeable. It<span class="s12">’</span>s like providing the function read-only access to the argument. Although constant references are very useful for specifying function parameters, you can use them anywhere in your program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_243.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A constant reference comes in handy in another way. If you need to assign a constant value to a reference, you have to assign it to a constant reference. (A non-constant reference won’t do.)</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_244.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a241"><h1 href="#bookmark9">Passing a Constant Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Back in <span class="s35">main()</span>, I create <span class="s35">inventory </span>and then call <span class="s35">display() </span>with the following line, which passes the vector as a constant reference.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">display(inventory);</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark705">198 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark757">&zwnj;</a><a name="bookmark758">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This results in an efficient and safe function call. It<span class="s12">’</span>s efficient because only a reference is passed; the vector is not copied. It<span class="s12">’</span>s safe because the reference to the vector is a constant reference; <span class="s35">inventory </span>can<span class="s12">’</span>t be changed by <span class="s35">display()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_245.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can’t modify a parameter marked as a constant reference. If you try, you’ll generate a compile error.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_246.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, <span class="s35">display() </span>lists the elements in the vector using a constant reference to</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark706">inventory</a><span class="p">. Then control returns to </span>main() <span class="p">and the program ends.</span><a name="bookmark759">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a242">Deciding How to Pass Arguments</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">At this point you<span class="s12">’</span>ve seen three different ways to pass arguments<span class="s12">—</span>by value, as a reference, and as a constant reference. So how do you decide which method to use? Here are some guidelines:</p><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>By value. </b>Pass by value when an argument variable is one of the funda- mental built-in types, such as <span class="s35">bool</span>, <span class="s35">int</span>, or <span class="s35">float</span>. Objects of these types are so small that passing by reference doesn<span class="s12">’</span>t result in any gain in effi- ciency. You should also pass by value when you want the computer to make a copy of a variable. You might want to use a copy if you plan to alter a parameter in a function, but you don<span class="s12">’</span>t want the actual argument variable to be affected.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>As a constant reference. </b>Pass a constant reference when you want to efficiently pass a value that you don<span class="s12">’</span>t need to change.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="h2">As a reference. </span><span class="p">Pass a reference only when you want to alter the value of the argument variable. However, you should try to avoid changing argument variables whenever possible.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a243">Returning References</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just like when you pass a value, when you return a value from a function, you<span class="s12">’</span>re really returning a copy of the value. Again, for values of the basic built-in types, this isn<span class="s12">’</span>t a big deal. However, it can be an expensive operation if you<span class="s12">’</span>re returning a large object. Returning a reference is an efficient alternative.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark707">Returning References 199</a><a name="bookmark760">&zwnj;</a><a name="bookmark761">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark9" class="h1" name="a244">Introducing the Inventory Referencer </a><h1 href="#bookmark9">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Inventory Referencer program demonstrates returning references. The program displays the elements of a vector that holds a hero<span class="s12">’</span>s inventory by using returned references. Then the program changes one of the items through a returned reference. Figure 6.4 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="233" alt="image" src="Image_247.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 6.4</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The items in the hero’s inventory are displayed and changed by using returned references.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 6 folder; the filename is <span class="s35">inventory_referencer.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Inventory Referencer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates returning a reference</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//returns a reference to a string</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string&amp; refToElement(vector&lt;string&gt;&amp; inventory, int i);</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark762">200 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt; inventory; inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//displays string that the returned reference refers to cout &lt;&lt; &quot;Sending the returned reference to cout:\n&quot;; cout &lt;&lt; refToElement(inventory, 0) &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark708">//assigns one reference to another -- inexpensive assignment</a><a name="bookmark763">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Assigning the returned reference to another reference.\n&quot;; string&amp; rStr = refToElement(inventory, 1);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Sending the new reference to cout:\n&quot;; cout &lt;&lt; rStr &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">//copies a string object -- expensive assignment</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Assigning the returned reference to a string object.\n&quot;; string str = refToElement(inventory, 2);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Sending the new string object to cout:\n&quot;; cout &lt;&lt; str &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//altering the string object through a returned reference cout &lt;&lt; &quot;Altering an object through a returned reference.\n&quot;; rStr = &quot;Healing Potion&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Sending the altered object to cout:\n&quot;; cout &lt;&lt; inventory[1] &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//returns a reference to a string</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string&amp; refToElement(vector&lt;string&gt;&amp; vec, int i)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return vec[i];</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a245"><h1 href="#bookmark9">Returning a Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Before you can return a reference from a function, you must specify that you<span class="s12">’</span>re returning one. That<span class="s12">’</span>s what I do in the <span class="s35">refToElement() </span>function header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string&amp; refToElement(vector&lt;string&gt;&amp; inventory, int i)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark764">Returning References 201</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By using the reference operator in <span class="s35">string&amp; </span>when I specify the return type, I<span class="s12">’</span>m saying that the function will return a reference to a <span class="s35">string </span>object (not a <span class="s35">string </span>object itself). You can use the reference operator like I did to specify that a function returns a reference to an object of a particular type. Simply put the reference operator after the type name.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The body of the function <span class="s35">refToElement() </span>contains only one statement, which returns a reference to the element at position <span class="s35">i </span>in the vector.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return vec[i];</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark709">Notice that there</a><span class="s12">’</span>s nothing in the <span class="s35">return </span>statement to indicate that the function returns a reference. The function header and prototype determine whether a function returns an object or a reference to an object.<a name="bookmark765">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_248.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although returning a reference can be an efficient way to send information back to a calling function, you have to be careful not to return a reference to an out-of-scope object—an object that ceases to exist. For example, the following function returns a reference to a <span class="s35">string </span>object that no longer exists after the function ends—and that’s illegal.</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">string&amp; badReference()</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;line-height: 118%;text-align: left;">string local = &quot;This string will cease to exist once the function ends.&quot;; return local;</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">One way to avoid this type of problem is to never return a reference to a local variable.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_249.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a246"><h1 href="#bookmark9">Displaying the Value of a Returned Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">After creating <span class="s35">inventory</span>, a vector of items, I display the first item through a returned reference.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; refToElement(inventory, 0) &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code calls <span class="s35">refToElement()</span>, which returns a reference to the element at position <span class="s35">0 </span>of <span class="s35">inventory </span>and then sends that reference to <span class="s35">cout</span>. As a result, <span class="s35">sword </span>is displayed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark710">202 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark711">&zwnj;</a><a name="bookmark766">&zwnj;</a><a name="bookmark767">&zwnj;</a><a name="bookmark768">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a247"><h1 href="#bookmark9">Assigning a Returned Reference to a Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next I assign a returned reference to another reference with the following line, which takes a reference to the element in position <span class="s35">1 </span>of <span class="s35">inventory </span>and assigns it to <span class="s35">rStr</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string&amp; rStr = refToElement(inventory, 1);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This is an efficient assignment because assigning a reference to a reference does not involve the copying of an object. Then I send <span class="s35">rStr </span>to <span class="s35">cout</span>, and <span class="s35">armor </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark712"><h1 href="#bookmark9">Assigning a Returned Reference to a Variable</h1></a><a name="bookmark769">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I assign a returned reference to a variable.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string str = refToElement(inventory, 2);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code doesn<span class="s12">’</span>t assign a reference to <span class="s35">str</span>. It can<span class="s12">’</span>t, because <span class="s35">str </span>is a <span class="s35">string </span>object. Instead, the code copies the element to which the returned reference refers (the element in position <span class="s35">2 </span>of <span class="s35">inventory</span>) and assigns that new copy of the <span class="s35">string </span>object to <span class="s35">str</span>. Because this kind of assignment involves copying an object, it<span class="s12">’</span>s more expensive than assigning one reference to another. Sometimes the cost of copying an object this way is perfectly acceptable, but you should be aware of the extra overhead associated with this kind of assignment and avoid it when necessary.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I send the new <span class="s35">string </span>object, <span class="s35">str</span>, to <span class="s35">cout</span>, and <span class="s35">shield </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a248"><h1 href="#bookmark9">Altering an Object through a Returned Reference</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can also alter the object to which a returned reference refers. This means you can change the hero<span class="s12">’</span>s inventory through <span class="s35">rStr</span>, as in the following line of code.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">rStr = &quot;Healing Potion&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">rStr </span>refers to the element in position <span class="s35">1 </span>of <span class="s35">inventory</span>, this code changes <span class="s35">inventory[1] </span>so it<span class="s12">’</span>s equal to <span class="s35">&quot;Healing Potion&quot;</span>. To prove it, I display the element using the following line, which does indeed show <span class="s35">Healing Potion</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[1] &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If I want to protect <span class="s35">inventory </span>so a reference returned by <span class="s35">refToElement() </span>can<span class="s12">’</span>t be used to change the vector, I should specify the return type of the function as a constant reference.</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark713">Introducing the Tic-Tac-Toe Game 203</a><a name="bookmark770">&zwnj;</a><a name="bookmark771">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark9" class="s30" name="a249">Introducing the Tic-Tac-Toe Game</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter project, you<span class="s12">’</span>ll learn how to create a computer opponent using a dash of AI (<span class="s11">Artificial Intelligence</span>). In the game, the player and computer square off in a high-stakes, man-versus-machine showdown of Tic-Tac-Toe. The computer plays a formidable (although not perfect) game and comes with enough attitude to make any match fun. Figure 6.5 shows the start of a match.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="442" height="233" alt="image" src="Image_250.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark714">Figure 6.5</a><a name="bookmark772">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The computer is full of<span class="s55">.. .</span>confidence.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a250"><h1 href="#bookmark9">Planning the Game</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This game is your most ambitious project yet. You certainly have all the skills you need to create it, but I<span class="s12">’</span>m going to go through a longer planning section to help you get the big picture and understand how to create a larger program. Remember, the most important part of programming is planning to program. Without a roadmap, you<span class="s12">’</span>ll never get to where you want to go (or it<span class="s12">’</span>ll take you a lot longer as you travel the scenic route).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_251.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Game designers work countless hours on concept papers, design documents, and prototypes before programmers write any game code. Once the design work is done, the programmers start their work— more planning. It’s only after programmers write their own technical designs that they then begin coding in earnest. The moral of this story? Plan. It’s easier to scrap a blueprint than a 50-story building.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_252.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark773">204 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Writing the Pseudocode</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">It<span class="s12">’</span>s back to your favorite language that<span class="s12">’</span>s not really a language<span class="s12">—</span>pseudocode. Because I<span class="s12">’</span>ll be using functions for most of the tasks in the program, I can afford to think about the code at a pretty abstract level. Each line of pseudocode should feel like one function call. Later, all I<span class="s12">’</span>ll have to do is write the functions that the plan implies. Here<span class="s12">’</span>s the pseudocode:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">Create an empty Tic-Tac-Toe board Display the game instructions Determine who goes first</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Display the board</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">While nobody’s won and it’s not a tie If it’s the human’s turn</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Get the human’s move</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 20pt;line-height: 118%;text-align: left;">Update the board with the human’s move Otherwise</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">Calculate the computer’s move</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 20pt;line-height: 118%;text-align: left;">Update the board with the computer’s move Display the board</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Switch turns</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Congratulate the winner or declare a tie</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Representing the Data</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">All right, I<span class="s12">’</span>ve got a good plan, but it is pretty abstract and talks about throwing around different elements that aren<span class="s12">’</span>t really defined in my mind yet. I see the idea of making a move as placing a piece on a game board. But how exactly am I going to represent the game board? Or a piece? Or a move?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Since I<span class="s12">’</span>m going to display the game board on the screen, why not just represent a piece as a single character<span class="s12">—</span>an X or an O? An empty piece could just be a space. Therefore, the board itself could be a vector of <span class="s35">char</span>s. There are nine squares on a Tic-Tac-Toe board, so the vector should have nine elements. Each square on the board will correspond to an element in the vector. Figure 6.6 illustrates what I mean.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Each square or position on the board is represented by a number, 0<span class="s12">–</span>8. That means the vector will have nine elements, giving it position numbers 0<span class="s12">–</span>8. Because each move indicates a square where a piece should be placed, a move is also just a number, 0<span class="s12">–</span>8. That means a move could be represented as an <span class="s35">int</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark774">Introducing the Tic-Tac-Toe Game 205</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.139pt" cellspacing="0"><tr style="height:36pt"><td style="width:36pt;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_253.png"/></span></p></td><td style="width:36pt;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><span><img width="6" height="18" alt="image" src="Image_254.png"/></span></p></td><td style="width:36pt;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_255.png"/></span></p></td></tr><tr style="height:35pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_256.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_257.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_258.png"/></span></p></td></tr><tr style="height:36pt"><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_259.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="17" alt="image" src="Image_260.png"/></span></p></td><td style="width:36pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20"><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><span><img width="12" height="18" alt="image" src="Image_261.png"/></span></p></td></tr></table><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 6.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each square number corresponds to a position in the vector that represents the board.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark715">The side the player and computer play could also be represented by a </a><span class="s35">char</span><span class="s12">— </span>either an <span class="s35">’X’ </span>or an <span class="s35">’O’</span>, just like a game piece. A variable to represent the side of the current turn would also be a <span class="s35">char</span>, either an <span class="s35">’X’  </span>or an <span class="s35">’O’</span>.<a name="bookmark775">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Creating a List of Functions</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The pseudocode inspires the different functions I<span class="s12">’</span>ll need. I created a list of them, thinking about what each will do, what parameters they<span class="s12">’</span>ll have, and what values they<span class="s12">’</span>ll return. Table 6.1 shows the results of my efforts.</p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a251"><h1 href="#bookmark9">Setting Up the Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (www.courseptr.com/downloads)</a>.  The  program  is  in  the  Chapter  6  folder;  the filename is <span class="s35">tic-tac-toe.cpp</span>. I<span class="s12">’</span>ll go over the code here, section by section.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first thing I do in the program is include the files I need, define some global constants, and write my function prototypes.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Tic-Tac-Toe</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Plays the game of tic-tac-toe against a human opponent</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark776">206 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="522" height="477" alt="image" src="Image_262.png"/></span></p><p class="s43" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Table 6.1 <span class="s44">Tic-Tac-Toe Functions</span></p><p class="s37" style="padding-top: 7pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">Function Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">void instructions() <span class="s41">Displays the game instructions.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">char askYesNo(string <i>question</i>) <span class="s41">Asks a yes or no question. Receives a question. Returns</span></p><p class="s41" style="padding-left: 231pt;text-indent: 0pt;text-align: left;">either a <span class="s57">’y’ </span>or an <span class="s57">’n’</span>.</p><p class="s57" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">int askNumber(string <i>question</i>, int</p><p class="s58" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">high<span class="s57">, int </span>low <span class="s57">= 0)</span></p><p class="s41" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Asks for a number within a range. Receives a question, a low number, and a high number. Returns a number in the range from <span class="s58">low </span>to <span class="s58">high</span>.</p><p class="s57" style="padding-top: 1pt;padding-left: 231pt;text-indent: -178pt;line-height: 106%;text-align: left;">char humanPiece() <span class="s41">Determines the human’s piece. Returns either an </span>’X’ <span class="s41">or an </span>’O’<span class="s41">.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">char opponent(char <i>piece</i>) <span class="s41">Calculates the opposing piece given a piece. Receives</span></p><p class="s41" style="text-indent: 0pt;text-align: right;">either an <span class="s57">’X’ </span>or an <span class="s57">’O’</span>. Returns either an <span class="s57">’X’ </span>or an</p><p class="s57" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">’O’<span class="s41">.</span></p><p class="s57" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;line-height: 112%;text-align: left;">void displayBoard(const vector&lt;char&gt;&amp; <i>board</i>)</p><p class="s57" style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">char winner(const vector&lt;char&gt;&amp;</p><p class="s58" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">board<span class="s57">)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">bool isLegal(const vector&lt;char&gt;&amp;</p><p class="s58" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">board<span class="s57">, int </span>move<span class="s57">)</span></p><p class="s57" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">int humanMove(const vector&lt;char&gt;&amp;</p><p class="s58" style="padding-top: 1pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">board<span class="s57">, char </span>human<span class="s57">)</span></p><p class="s57" style="padding-top: 3pt;padding-left: 53pt;text-indent: 0pt;line-height: 112%;text-align: left;">int computerMove(vector&lt;char&gt; <i>board</i>, char <i>computer</i>)</p><p class="s57" style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;line-height: 112%;text-align: left;">void announceWinner(char <i>winner</i>, char <i>computer</i>, char <i>human</i>)</p><p class="s41" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">Displays the board on the screen. Receives a board.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 12pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Determines the game winner. Receives a board. Returns an <span class="s57">’X’</span>, <span class="s57">’O’</span>, <span class="s57">’T’ </span>(to indicate a tie), or <span class="s57">’N’ </span>(to indicate that no one has won yet).</p><p class="s41" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Determines whether a move is legal. Receives a board and a move. Returns either <span class="s57">true </span>or <span class="s57">false</span>.</p><p class="s41" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;line-height: 106%;text-align: left;">Gets the human’s move. Receives a board and the human’s piece. Returns the human’s move.</p><p class="s41" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;line-height: 115%;text-align: left;">Calculates the computer’s move. Receives a board and the computer’s piece. Returns the computer’s move. Congratulates the winner or declares a tie. Receives the</p><p class="s41" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">winning side, the computer’s piece, and the human’s</p><p class="s41" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">piece.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">// global constants const char X = ’X’; const char O = ’O’; const char EMPTY = ’ ’; const char TIE = ’T’; const char NO_ONE = ’N’;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">// function prototypes void instructions();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">char askYesNo(string question);</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark716">Introducing the Tic-Tac-Toe Game 207</a><a name="bookmark777">&zwnj;</a><a name="bookmark778">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">int askNumber(string question, int high, int low = 0); char humanPiece();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">char opponent(char piece);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">void displayBoard(const vector&lt;char&gt;&amp; board); char winner(const vector&lt;char&gt;&amp; board);</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">bool isLegal(const vector&lt;char&gt;&amp; board, int move); int humanMove(const vector&lt;char&gt;&amp; board, char human); int computerMove(vector&lt;char&gt; board, char computer);</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void announceWinner(char winner, char computer, char human);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the global constants section, <span class="s35">X </span>is shorthand for the <span class="s35">char ’X’</span>, one of the two pieces in the game. <span class="s35">O </span>represents the <span class="s35">char ’O’</span>, the other piece in the game. <span class="s35">EMPTY</span>, also a <span class="s35">char</span>, represents an empty square on the board. It<span class="s12">’</span>s a space because when it<span class="s12">’</span>s displayed, it will look like an empty square. <span class="s35">TIE </span>is a <span class="s35">char </span>that represents a tie game. And <span class="s35">NO_ONE </span>is a <span class="s35">char </span>used to represent neither side of the game, which I use to indicate that no one has won yet.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a252"><h1 href="#bookmark9">The main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you can see, the <span class="s35">main() </span>function is almost exactly the pseudocode I created earlier.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">// main function int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int move;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">const int NUM_SQUARES = 9;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;char&gt; board(NUM_SQUARES, EMPTY);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">instructions();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">char human = humanPiece();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">char computer = opponent(human); char turn = X; displayBoard(board);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">while (winner(board) == NO_ONE)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (turn == human)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">move = humanMove(board, human); board[move] = human;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark717">208 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark779">&zwnj;</a><a name="bookmark780">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;line-height: 118%;text-align: left;">move = computerMove(board, computer); board[move] = computer;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">displayBoard(board); turn = opponent(turn);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark718">announceWinner(winner(board), computer, human);</a><a name="bookmark781">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a253"><h1 href="#bookmark9">The instructions() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">This function displays the game instructions and gives the computer opponent a little attitude.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void instructions()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Welcome to the ultimate man-machine showdown: Tic-Tac-Toe.\n&quot;; cout &lt;&lt; &quot;--where human brain is pit against silicon processor\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Make your move known by entering a number, 0 - 8. The number\n&quot;; cout &lt;&lt; &quot;corresponds to the desired board position, as illustrated:\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; 0 | 1 | 2\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; ——————— \n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; 3 | 4 | 5\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; ——————— \n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot; 6 | 7 | 8\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Prepare yourself, human. The battle is about to begin.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a254"><h1 href="#bookmark9">The askYesNo() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function asks a yes or no question. It keeps asking the question until the player enters either a y or an n. It receives a question and returns either a <span class="s35">’y’ </span>or an <span class="s35">’n’</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark719">Introducing the Tic-Tac-Toe Game 209</a><a name="bookmark782">&zwnj;</a><a name="bookmark783">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">char askYesNo(string question)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">char response; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; question &lt;&lt; &quot; (y/n): &quot;; cin &gt;&gt; response;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (response != ’y’ &amp;&amp; response != ’n’);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return response;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark720">}</a><a name="bookmark784">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a255"><h1 href="#bookmark9">The askNumber() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function asks for a number within a range and keeps asking until the player enters a valid number. It receives a question, a high number, and a low number. It returns a number within the range specified.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int askNumber(string question, int high, int low)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int number; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; question &lt;&lt; &quot; (&quot; &lt;&lt; low &lt;&lt; &quot; - &quot; &lt;&lt; high &lt;&lt; &quot;): &quot;; cin &gt;&gt; number;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">} while (number &gt; high || number &lt; low);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return number;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If you take a look at this function<span class="s12">’</span>s prototype, you can see that the low number has a default value of <span class="s35">0</span>. I take advantage of this fact when I call the function later in the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a256"><h1 href="#bookmark9">The humanPiece() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function asks the player if he wants to go first, and returns the human<span class="s12">’</span>s piece based on that choice. As the great tradition of Tic-Tac-Toe dictates, the X goes first.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char humanPiece()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark721">210 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe<a name="bookmark785">&zwnj;</a><a name="bookmark786">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">char go_first = askYesNo(&quot;Do you require the first move?&quot;); if (go_first == ’y’)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nThen take the first move. You will need it.\n&quot;; return X;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nYour bravery will be your undoing<span class="s56">.. . </span>I will go first.\n&quot;; return O;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark722">}</a><a name="bookmark787">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a257"><h1 href="#bookmark9">The opponent() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">This function gets a piece (either an <span class="s35">’X’ </span>or an <span class="s35">’O’</span>) and returns the opponent<span class="s12">’</span>s piece (either an <span class="s35">’X’  </span>or an <span class="s35">’O’</span>).</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char opponent(char piece)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (piece == X)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">return O;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">return X;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a258"><h1 href="#bookmark9">The displayBoard() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function displays the board passed to it. Because each element in the board is either a space, an <span class="s35">’X’</span>, or an <span class="s35">’O’</span>, the function can display each one. I use a few other characters on my keyboard to draw a decent-looking Tic-Tac-Toe board.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void displayBoard(const vector&lt;char&gt;&amp; board)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\t&quot; &lt;&lt; board[0] &lt;&lt; &quot; | &quot; &lt;&lt; board[1] &lt;&lt; &quot; | &quot; &lt;&lt; board[2]; cout &lt;&lt; &quot;\n\t&quot; &lt;&lt; &quot;———————&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\t&quot; &lt;&lt; board[3] &lt;&lt; &quot; | &quot; &lt;&lt; board[4] &lt;&lt; &quot; | &quot; &lt;&lt; board[5]; cout &lt;&lt; &quot;\n\t&quot; &lt;&lt; &quot;———————&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark723">Introducing the Tic-Tac-Toe Game 211</a><a name="bookmark788">&zwnj;</a><a name="bookmark789">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\t&quot; &lt;&lt; board[6] &lt;&lt; &quot; | &quot; &lt;&lt; board[7] &lt;&lt; &quot; | &quot; &lt;&lt; board[8]; cout &lt;&lt; &quot;\n\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Notice that the vector that represents the board is passed through a constant reference. This means that the vector is passed efficiently; it is not copied. It also means that the vector is safeguarded against any changes. Since I plan to simply display the board and not change it in this function, this is perfect.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a259"><h1 href="#bookmark9">The winner() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This function receives a board and returns the winner. There are four possible values for a winner. The function will return either <span class="s35">X </span>or <span class="s35">O </span>if one of the players has won. If every square is filled and no one has won, it returns <span class="s35">TIE</span>. Finally, if no one has won and there is at least one empty square, the function returns <span class="s35">NO_ONE</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">char winner(const vector&lt;char&gt;&amp; board)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">// all possible winning rows</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">const int WINNING_ROWS[8][3] = { {0, 1, 2},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{3, 4, 5},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{6, 7, 8},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{0, 3, 6},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{1, 4, 7},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{2, 5, 8},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{0, 4, 8},</p><p class="s35" style="padding-top: 2pt;padding-left: 223pt;text-indent: 0pt;text-align: left;">{2, 4, 6} };</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first thing to notice is that the vector that represents the board is passed through a constant reference. This means that the vector is passed efficiently; it is not copied. It also means that the vector is safeguarded against any change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In this initial section of the function, I define a constant, two-dimensional array of <span class="s35">int</span>s called <span class="s35">WINNING_ROWS</span>, which represents all eight ways to get three in a row and  win  the  game.  Each  winning  row  is  represented  by  a  group  of  three numbers<span class="s12">—</span>three  board  positions  that  form  a  winning  row.  For  example,  the group <span class="s35">{0, 1, 2}  </span>represents the top row<span class="s12">—</span>board positions 0, 1, and 2. The next</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">group, <span class="s35">{3, 4, 5}</span>, represents the middle row<span class="s12">—</span>board positions 3, 4, and 5. And so on<span class="s51">... </span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next I check to see whether either player has won.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark790">212 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const int TOTAL_ROWS = 8;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">// if any winning row has three values that are the same (and not EMPTY),</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">// then we have a winner</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for(int row = 0; row &lt; TOTAL_ROWS; ++row)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 108pt;text-indent: -26pt;line-height: 119%;text-align: left;">if ( (board[WINNING_ROWS[row][0]] != EMPTY) &amp;&amp; (board[WINNING_ROWS[row][0]] == board[WINNING_ROWS[row][1]]) &amp;&amp; (board[WINNING_ROWS[row][1]] == board[WINNING_ROWS[row][2]]) )</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;"><a name="bookmark724">return board[WINNING_ROWS[row][0]];</a><a name="bookmark791">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I loop through each possible way a player can win to see whether either player has three in a row. The <span class="s35">if </span>statement checks to see whether the three squares in question all contain the same value and are not <span class="s35">EMPTY</span>. If so, it means that the row has either three Xs or Os in it, and one side has won. The function then returns the piece in the first position of this winning row.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">If neither player has won, I check for a tie game.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">// since nobody has won, check for a tie (no empty squares left) if (count(board.begin(), board.end(), EMPTY) == 0)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">return TIE;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If there are no empty squares on the board, then the game is a tie. I use the STL <span class="s35">count() </span>algorithm, which counts the number of times a given value appears in a group of container elements, to count the number of <span class="s35">EMPTY </span>elements in <span class="s35">board</span>. If the number is equal to <span class="s35">0</span>, the function returns <span class="s35">TIE</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Finally, if neither player has won and the game isn<span class="s12">’</span>t a tie, then there is no winner yet. Thus, the function returns <span class="s35">NO_ONE</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">// since nobody has won and it isn’t a tie, the game ain’t over return NO_ONE;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a260"><h1 href="#bookmark9">The isLegal() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function receives a board and a move. It returns <span class="s35">true </span>if the move is a legal one on the board or <span class="s35">false </span>if the move is not legal. A legal move is represented by the number of an empty square.</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;"><a name="bookmark725">Introducing the Tic-Tac-Toe Game 213</a><a name="bookmark792">&zwnj;</a><a name="bookmark793">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">inline bool isLegal(int move, const vector&lt;char&gt;&amp; board)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (board[move] == EMPTY);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Again, notice that the vector that represents the board is passed through a constant reference. This means that the vector is passed efficiently; it is not copied. It also means that the vector is safeguarded against any change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark726">You can see that I inlined </a><span class="s35">isLegal()</span>. Modern compilers are quite good at optimizing on their own; however, since this function is just one line, it<span class="s12">’</span>s a good candidate for inlining.<a name="bookmark794">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a261"><h1 href="#bookmark9">The humanMove() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This next function receives a board and the human<span class="s12">’</span>s piece. It returns the square number for where the player wants to move. The function asks the player for the square number to which he wants to move until the response is a legal move. Then the function returns the move.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int humanMove(const vector&lt;char&gt;&amp; board, char human)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int move = askNumber(&quot;Where will you move?&quot;, (board.size() - 1)); while (!isLegal(move, board))</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThat square is already occupied, foolish human.\n&quot;; move = askNumber(&quot;Where will you move?&quot;, (board.size() - 1));</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Fine<span class="s56">.. .</span>\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return move;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Again, notice that the vector that represents the board is passed through a constant reference. This means that the vector is passed efficiently; it is not copied. It also means that the vector is safeguarded against any change.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a262"><h1 href="#bookmark9">The computerMove() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This function receives the board and the computer<span class="s12">’</span>s piece. It returns the computer<span class="s12">’</span>s move. The first thing to notice is that I do not pass the board by reference.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">int computerMove(vector&lt;char&gt; board, char computer)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">214 Chapter 6 <span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Instead, I choose to pass by value, even though it<span class="s12">’</span>s not as efficient as passing by reference. I pass by value because I need to work with and modify a copy of the board as I place pieces in empty squares to determine the best computer move. By working with a copy, I keep the original vector that represents the board safe.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Now on to the guts of the function. Okay, how do I program a bit of AI so the computer puts up a decent fight? Well, I came up with a basic three-step strategy for choosing a move.</p><ol id="l14"><li><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">If the computer can win on this move, make that move.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Otherwise, if the human can win on his next move, block him.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Otherwise, take the best remaining open square. The best square is the center. The next best squares are the corners, and then the rest of the squares.</p></li></ol><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next section of the function implements Step 1.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">unsigned int move = 0; bool found = false;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//if computer can win on next move, that’s the move to make while (!found &amp;&amp; move &lt; board.size())</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (isLegal(move, board))</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">board[move] = computer;</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">found = winner(board) == computer; board[move] = EMPTY;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (!found)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">++move;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">I begin to loop through all of the possible moves, 0<span class="s12">–</span>8. For each move, I test to see whether the move is legal. If it is, I put the computer<span class="s12">’</span>s piece in the</p><p class="s19" style="padding-top: 2pt;padding-left: 272pt;text-indent: 0pt;text-align: left;">Introducing the Tic-Tac-Toe Game 215</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">corresponding square and check to see whether the move gives the computer a win. Then I undo the move by making that square empty again. If the move didn<span class="s12">’</span>t result in a win for the computer, I go on to the next empty square. However, if the move did give the computer a win, then the loop ends<span class="s12">—</span>and I<span class="s12">’</span>ve found the move (<span class="s35">found </span>is <span class="s35">true</span>) that I want the computer to make (square number <span class="s35">move</span>) to win the game.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next, I check to see if I need to go on to Step 2 of my AI strategy. If I haven<span class="s12">’</span>t found a move yet (<span class="s35">found </span>is <span class="s35">false</span>), then I check to see whether the human can win on his next move.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//otherwise, if human can win on next move, that’s the move to make if (!found)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">move = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">char human = opponent(computer);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">while (!found &amp;&amp; move &lt; board.size())</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">if (isLegal(move, board))</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">board[move] = human;</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;line-height: 118%;text-align: left;">found = winner(board) == human; board[move] = EMPTY;</p><p class="s35" style="padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">if (!found)</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">++move;</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I begin to loop through all of the possible moves, 0<span class="s12">–</span>8. For each move, I test to see whether the move is legal. If it is, I put the human<span class="s12">’</span>s piece in the corresponding square and check to see whether the move gives the human a win. Then I undo the move by making that square empty again. If the move didn<span class="s12">’</span>t result in a win for the human, I go on to the next empty square. However, if the move did give the human a win, then the loop ends<span class="s12">—</span>and I<span class="s12">’</span>ve found the</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark795">216 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">move (<span class="s35">found </span>is <span class="s35">true</span>) that I want the computer to make (square number <span class="s35">move</span>) to block the human from winning on his next move.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I check to see if I need to go on to Step 3 of my AI strategy. If I haven<span class="s12">’</span>t found a move yet (<span class="s35">found </span>is <span class="s35">false</span>), then I look through the list of best moves, in order of desirability, and take the first legal one.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//otherwise, moving to the best open square is the move to make if (!found)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">move = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">unsigned int i = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">const int BEST_MOVES[] = {4, 0, 2, 6, 8, 1, 3, 5, 7};</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">//pick best open square</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">while (!found &amp;&amp; i &lt; board.size())</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">move = BEST_MOVES[i];</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">if (isLegal(move, board))</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">found = true;</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">++i;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point in the function, I<span class="s12">’</span>ve found the move I want the computer to make<span class="s12">—</span>whether that<span class="s12">’</span>s a move that gives the computer a win, blocks a winning move for the human, or is simply the best empty square available. So, I have the computer announce the move and return the corresponding square number.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;I shall take square number &quot; &lt;&lt; move &lt;&lt; endl; return move;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Rea l Worl d</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_263.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The Tic-Tac-Toe game considers only the next possible move. Programs that play serious games of strategy, such as chess, look far deeper into the consequences of individual moves and consider many levels of moves and countermoves. In fact, good computer chess programs can consider literally millions of board positions before making a move.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_264.png"/></span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark727">Summary 217</a><a name="bookmark796">&zwnj;</a><a name="bookmark797">&zwnj;</a><a name="bookmark798">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a263"><h1 href="#bookmark9">The announceWinner() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">This function receives the winner of the game, the computer<span class="s12">’</span>s piece, and the human<span class="s12">’</span>s piece. The function announces the winner or declares a tie.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void announceWinner(char winner, char computer, char human)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (winner == computer)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; winner &lt;&lt; &quot;’s won!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark728">cout &lt;&lt; &quot;As I predicted, human, I am triumphant once more -- proof\n&quot;; cout &lt;&lt; &quot;that computers are superior to humans in all regards.\n&quot;;</a><a name="bookmark799">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (winner == human)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; winner &lt;&lt; &quot;’s won!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;No, no! It cannot be! Somehow you tricked me, human.\n&quot;; cout &lt;&lt; &quot;But never again! I, the computer, so swear it!\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;It’s a tie.\n&quot;;</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;You were most lucky, human, and somehow managed to tie me.\n&quot;; cout &lt;&lt; &quot;Celebrate<span class="s56">.. . </span>for this is the best you will ever achieve.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a264">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference is an alias; it<span class="s12">’</span>s another name for a variable.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>You create a reference using <span class="s35">&amp;</span><span class="s12">—</span>the referencing operator.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference must be initialized when it<span class="s12">’</span>s defined.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A reference can<span class="s12">’</span>t be changed to refer to a different variable.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Whatever you do to a reference is done to the variable to which the reference refers.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you assign a reference to a variable, you create a new copy of the referenced value.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark800">218 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you pass a variable to a function by value, you pass a copy of the variable to the function.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">When you pass a variable to a function by reference, you pass access to the variable.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Passing by reference can be more efficient than passing by value, especially when you are passing large objects.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><a name="bookmark729">n </a><span class="p">Passing a reference provides direct access to the argument variable passed to a function. As a result, the function can make changes to the argument variable.</span><a name="bookmark801">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>A constant reference can<span class="s12">’</span>t be used to change the value to which it refers.</p><p style="padding-left: 65pt;text-indent: 0pt;text-align: left;">You declare a constant reference by using the keyword <span class="s35">const</span>.</p><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can<span class="s12">’</span>t assign a constant reference or a constant value to a non-constant reference.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Passing a constant reference to a function protects the argument variable from being changed by that function.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">Changing the value of an argument variable passed to a function can lead to confusion, so game programmers consider passing a constant reference before passing a non-constant reference.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">Returning a reference can be more efficient than returning a copy of a value, especially when you are returning large objects.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>You can return a constant reference to an object so the object can<span class="s12">’</span>t be changed through the returned reference.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>A basic technique of game AI is to have the computer consider all of its legal moves and all of its opponent<span class="s12">’</span>s legal replies before deciding which move to take next.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a265">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">Q: Different programmers put the reference operator (<span class="s35">&amp;</span>) in different places when declaring a reference. Where should I put it?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Three basic styles exist with regard to using the referencing operator. Some programmers opt for <span class="s35">int&amp; ref = var;</span>, while others opt for <span class="s35">int &amp; ref = var;</span>.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark802">Questions and Answers 219</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 56pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Still others opt for <span class="s35">int &amp;ref = var;</span>. The computer is fine with all three. There are cases to be made for each style; however, the most important thing is to be consistent.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why can<span class="s12">’</span>t I initialize a non-constant reference with a constant value?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: Because a non-constant reference allows you to change the value to which it refers.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: If I initialize a constant reference with a non-constant variable, can I change the value of the variable?</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: Not through the constant reference because when you declare a constant reference, you<span class="s12">’</span>re saying that the reference can<span class="s12">’</span>t be used to change the value to which it refers (even if that value can be changed by other means).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How does passing a constant reference save overhead?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: When you pass a large object to a function by value, your program makes a copy of the object. This can be an expensive operation depending on the size of the object. Passing a reference is like only passing access to the large object; it is an inexpensive operation.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can I make a reference to a reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -14pt;line-height: 107%;text-align: justify;">A: Not exactly. You can assign one reference to another reference, but the new reference will simply refer to the value to which the original reference refers.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">Q: What happens if I declare a reference without initializing it? A: Your compiler should complain because it<span class="s12">’</span>s illegal.</p><p style="padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Why should I avoid changing the value of a variable that I pass through a reference?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because it could lead to confusion. It<span class="s12">’</span>s impossible to tell from only a function call whether a variable is being passed to change its value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Does that mean I should always pass a constant reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No. You can pass a non-constant reference to a function, but to most game programmers, this signals that you intend to change the argument variable<span class="s12">’</span>s value.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark803">220 Chapter 6 </a><span class="s32">n </span>References: Tic-Tac-Toe</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: If I don<span class="s12">’</span>t change the argument variables passed to functions, how should I get new information back to the calling code?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: Use return values.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can I pass a literal through a non-constant reference?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: No. If you try to pass a literal as a non-constant reference, you<span class="s12">’</span>ll generate a compile error.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark730">Q: Is it impossible to pass a literal to a parameter that accepts a reference? A: No, you can pass a literal as a constant reference.</a><a name="bookmark804">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What happens when I return an object from a function?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Normally, your program creates a copy of the object and returns that. This can be an expensive operation, depending on the size of the object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why return a reference?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: It can be more efficient because returning a reference doesn<span class="s12">’</span>t involve copying an object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How can I lose the efficiency of returning a reference?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -13pt;line-height: 106%;text-align: justify;">A: By assigning the returned reference to a variable. When you assign a reference to a variable, the computer must make a copy of the object to which the reference refers.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s wrong with returning a reference to a local variable?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: The local variable doesn<span class="s12">’</span>t exist once the function ends, which means that you<span class="s12">’</span>re returning a reference to a non-existent object, which is illegal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a266">Discussion Questions</a></p><ol id="l15"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">What are the advantages and disadvantages of passing an argument by value?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages and disadvantages of passing a reference?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What are the advantages and disadvantages of passing a constant reference?</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark731">Exercises 221</a><a name="bookmark805">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages and disadvantages of returning a reference?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Should game AI cheat in order to create a more worthy opponent?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s30" name="a267">Exercises</a></p><ol id="l16"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Improve the Mad Lib game from Chapter 5 by using references to make the program more efficient.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following program?</p><p class="s35" style="padding-top: 1pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 85pt;text-indent: 0pt;line-height: 119%;text-align: left;">int score; score = 1000;</p><p class="s35" style="padding-left: 85pt;text-indent: 0pt;line-height: 118%;text-align: left;">float&amp; rScore = score; return 0;</p><p class="s35" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following function?</p></li></ol><p class="s35" style="padding-top: 1pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">int&amp; plusThree(int number)</p><p class="s35" style="padding-top: 2pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 85pt;text-indent: 0pt;line-height: 119%;text-align: left;">int threeMore = number + 3; return threeMore;</p><p class="s35" style="padding-left: 65pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">This page intentionally left blank</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark9" class="s27" name="bookmark806">chapter 7</a><a name="bookmark840">&zwnj;</a><a name="bookmark841">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_265.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark9" class="s28" name="a268">Pointers: Tic-Tac-Toe 2.0</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark807">Pointers are a powerful part of C++. In some ways, they behave like iterators from the STL. Often, you can use them in place of references. But pointers offer functionality that no other part of the language can. In this chapter, you</a><span class="s12">’</span>ll learn the basic mechanics of pointers and get an idea of what they<span class="s12">’</span>re good for. Specifically, you<span class="s12">’</span>ll learn to:<a name="bookmark842">&zwnj;</a></p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Declare and initialize pointers</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Dereference pointers</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use constants and pointers</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Pass and return pointers</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Work with pointers and arrays</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark9" class="s30" name="a269">Understanding Pointer Basics</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Pointers have a reputation for being difficult to understand. In reality, the essence of pointers is quite simple<span class="s12">—</span>a <span class="s11">pointer </span>is a variable that can contain a memory address. Pointers give you the ability to work directly and efficiently with computer memory. Like iterators from the STL, they<span class="s12">’</span>re often used to access the contents of other variables. But before you can put pointers to good use in your game programs, you have to understand the basics of how they work.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">223</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark808">224 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark843">&zwnj;</a><a name="bookmark844">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_266.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Computer memory is a lot like a neighborhood, but instead of houses in which people store their stuff, you have memory locations where you can store data. Just like a neighborhood where houses sit side by side, labeled with addresses, chunks of computer memory sit side by side, labeled with addresses. In a neighborhood, you can use a slip of paper with a street address on it to get to a particular house (and to the stuff stored inside it). In a computer, you can use a pointer with a memory address in it to get to a particular memory location (and to the stuff stored inside it).</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_267.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a270"><h1 href="#bookmark9">Introducing the Pointing Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Pointing program demonstrates the mechanics of pointers. The program creates a variable for a score and then creates a pointer to store the address of that variable. The program shows that you can change the value of a variable directly, and the pointer will reflect the change. It also shows that you can change the value of a variable through a pointer. It then demonstrates that you can change a pointer to point to another variable entirely. Finally, the program shows that pointers can work just as easily with objects. Figure 7.1 illustrates the results of the program.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">pointing.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="239" alt="image" src="Image_268.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 7.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The pointer <span class="s35">pScore </span>first points to the variable <span class="s35">score </span>and then to the variable <span class="s35">newScore</span>, while the pointer <span class="s35">pStr </span>points to the variable <span class="s35">str</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 295pt;text-indent: 0pt;text-align: left;">Understanding Pointer Basics 225</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">// Pointing</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates using pointers</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; int main()</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pAPointer; //declare a pointer</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 26pt;text-align: justify;">int* pScore = 0;      //declare and initialize a pointer int score = 1000;</p><p class="s35" style="padding-top: 1pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">pScore = &amp;score;      //assign pointer pScore address of variable score</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: justify;">cout &lt;&lt; &quot;Assigning &amp;score to pScore\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">cout &lt;&lt; &quot;&amp;score is: &quot; &lt;&lt; &amp;score &lt;&lt; &quot;\n&quot;;          //address of score variable cout &lt;&lt; &quot;pScore is: &quot; &lt;&lt; pScore &lt;&lt; &quot;\n&quot;;          //address stored in pointer cout &lt;&lt; &quot;score is: &quot; &lt;&lt; score &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">cout &lt;&lt; &quot;*pScore is: &quot; &lt;&lt; *pScore &lt;&lt; &quot;\n\n&quot;; //value pointed to by pointer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Adding 500 to score\n&quot;; score += 500;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;score is: &quot; &lt;&lt; score &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pScore is: &quot; &lt;&lt; *pScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Adding 500 to *pScore\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pScore += 500;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;score is: &quot; &lt;&lt; score &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pScore is: &quot; &lt;&lt; *pScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Assigning &amp;newScore to pScore\n&quot;; int newScore = 5000;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pScore = &amp;newScore;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;&amp;newScore is: &quot; &lt;&lt; &amp;newScore &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;pScore is: &quot; &lt;&lt; pScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;newScore is: &quot; &lt;&lt; newScore &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;*pScore is: &quot; &lt;&lt; *pScore &lt;&lt; &quot;\n\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark809">226 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark845">&zwnj;</a><a name="bookmark846">&zwnj;</a><a name="bookmark847">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Assigning &amp;str to pStr\n&quot;; string str = &quot;score&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">string* pStr = &amp;str;      //pointer to string object cout &lt;&lt; &quot;str is: &quot; &lt;&lt; str &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pStr is: &quot; &lt;&lt; *pStr &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;(*pStr).size() is: &quot; &lt;&lt; (*pStr).size() &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;pStr-&gt;size() is: &quot; &lt;&lt; pStr-&gt;size() &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a271"><h1 href="#bookmark9">Declaring Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">With the first statement in <span class="s35">main() </span>I declare a pointer named <span class="s35">pAPointer</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* pAPointer; //declare a pointer</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because pointers work in such a unique way, programmers often prefix pointer variable names with the letter <span class="s12">“</span>p<span class="s12">” </span>to remind them that the variable is indeed a pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just like an iterator, a pointer is declared to point to a specific type of value. <span class="s35">pAPointer </span>is a pointer to <span class="s35">int</span>, which means that it can only point to an <span class="s35">int </span>value. <span class="s35">pAPointer </span>can<span class="s12">’</span>t point to a <span class="s35">float </span>or a <span class="s35">char</span>, for example. Another way to say this is that <span class="s35">pAPointer </span>can only store the address of an <span class="s35">int</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">To declare a pointer of your own, begin with the type of object to which the pointer will point, followed by an asterisk, followed by the pointer name. When you declare a pointer, you can put whitespace on either side of the asterisk. So <span class="s35">int* pAPointer;</span>, <span class="s35">int *pAPointer;</span>, and <span class="s35">int * pAPointer; </span>all declare a pointer named <span class="s35">pAPointer</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_269.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you declare a pointer, the asterisk only applies to the single variable name that immediately follows it. So the following statement declares <span class="s35">pScore </span>as a pointer to <span class="s35">int </span>and score as an <span class="s35">int</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">int* pScore, score;</p><p class="s35" style="padding-top: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">score <span class="s19">is not a pointer! It’s a variable of type </span>int<span class="s19">. One way to make this clearer is to play with the whitespace and rewrite the statement as:</span></p><p class="s35" style="padding-top: 5pt;padding-left: 58pt;text-indent: 0pt;text-align: left;">int *pScore, score;</p><p class="s19" style="padding-top: 2pt;padding-left: 295pt;text-indent: 0pt;text-align: left;"><a name="bookmark810">Understanding Pointer Basics 227</a><a name="bookmark848">&zwnj;</a><a name="bookmark849">&zwnj;</a><a name="bookmark850">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">However, the clearest way to declare a pointer is to declare it in its own statement, as in the following lines.</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;line-height: 118%;text-align: left;">int* pScore; int score;</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_270.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a272"><h1 href="#bookmark9">Initializing Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As with other variables, you can initialize a pointer in the same statement you declare it. That<span class="s12">’</span>s what I do next with the following line, which assigns <span class="s35">0 </span>to <span class="s35">pScore</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark811">int* pScore = 0;    //declare and initialize a pointer</a><a name="bookmark851">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Assigning <span class="s35">0 </span>to a pointer has special meaning. Loosely translated, it means, <span class="s12">“</span>Point to nothing.<span class="s12">” </span>Programmers call a pointer with the value of zero a <span class="s11">null pointer</span>. You should always initialize a pointer with some value when you declare it, even if that value is zero.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_271.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Many programmers assign NULL to a pointer instead of 0 to make the pointer a null pointer. NULL is a constant defined in multiple library files, including <span class="s35">iostream</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_272.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a273"><h1 href="#bookmark9">Assigning Addresses to Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because pointers store addresses of objects, you need a way to get addresses into the pointers. One way to do that is to get the memory address of an existing variable and assign it to a pointer. That<span class="s12">’</span>s what I do in the following line, which gets the address of the variable <span class="s35">score </span>and assigns it to <span class="s35">pScore</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pScore = &amp;score;      //assign pointer address of variable score</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I get the address of <span class="s35">score </span>by preceding the variable name with <span class="s35">&amp;</span>, the <span class="s11">address of </span>operator. (Yes, you<span class="s12">’</span>ve seen the <span class="s35">&amp; </span>symbol before, when it was used as the reference operator. However, in this context, the <span class="s35">&amp; </span>symbol gets the address of an object.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As a result of the preceding line of code, <span class="s35">pScore </span>contains the address of <span class="s35">score</span>. It<span class="s12">’</span>s as if <span class="s35">pScore </span>knows exactly where <span class="s35">score </span>is located in the computer<span class="s12">’</span>s memory. This means you can use <span class="s35">pScore </span>to get to <span class="s35">score </span>and manipulate the value stored in <span class="s35">score</span>. Figure 7.2 serves as a visual illustration of the relationship between <span class="s35">pScore </span>and <span class="s35">score</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark852">228 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark853">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s41" style="padding-left: 56pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span><img width="41" height="13" alt="image" src="Image_273.png"/></span>	<span><img width="32" height="7" alt="image" src="Image_274.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="221" height="40" alt="image" src="Image_275.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 7.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The pointer <span class="s35">pScore </span>points to <span class="s35">score</span>, which stores the value <span class="s35">1000</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark812">To prove that </a><span class="s35">pScore </span>contains the address of <span class="s35">score</span>, I display the address of the variable and the value of the pointer with the following lines.<a name="bookmark854">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;&amp;score is: &quot; &lt;&lt; &amp;score &lt;&lt; &quot;\n&quot;;          //address of score variable cout &lt;&lt; &quot;pScore is: &quot; &lt;&lt; pScore &lt;&lt; &quot;\n&quot;;          //address stored in pointer</p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">pScore <span class="p">contains </span>0x22ff5c<span class="p">, which is the address of </span>score<span class="p">. (The specific addresses displayed by the Pointing program might be different on your system. The important thing is that the values for </span>pScore <span class="p">and </span>&amp;score <span class="p">are the same.)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a274"><h1 href="#bookmark9">Dereferencing Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as you dereference an iterator to access the object to which it refers, you dereference a pointer to access the object to which it points. You accomplish the dereferencing the same way<span class="s12">—</span>with <span class="s35">*</span>, the dereference operator. I put the dereference operator to work with the following line, which displays <span class="s35">1000 </span>because <span class="s35">*pScore </span>accesses the value stored in <span class="s35">score</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pScore is: &quot; &lt;&lt; *pScore &lt;&lt; &quot;\n\n&quot;; //value pointed to by pointer</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Remember, <span class="s35">*pScore </span>means, <span class="s12">“</span>the object to which <span class="s35">pScore </span>points.<span class="s12">”</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_276.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Don’t dereference a null pointer because it could lead to disastrous results.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_277.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I add <span class="s35">500 </span>to <span class="s35">score </span>with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">score += 500;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When I send <span class="s35">score </span>to <span class="s35">cout</span>, <span class="s35">1500 </span>is displayed, as you<span class="s12">’</span>d expect. When I send</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">*pScore <span class="p">to </span>cout<span class="p">, the displayed once more.</span></p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">contents of</p><p class="s35" style="padding-top: 3pt;padding-left: 3pt;text-indent: 0pt;text-align: left;">score</p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">are</p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">again</p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">sent</p><p style="padding-left: 3pt;text-indent: 0pt;text-align: left;">to <span class="s35">cout</span>, and <span class="s35">1500 </span>is</p><p class="s19" style="padding-top: 2pt;padding-left: 295pt;text-indent: 0pt;text-align: left;"><a name="bookmark855">Understanding Pointer Basics 229</a><a name="bookmark856">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I add <span class="s35">500 </span>to the value to which <span class="s35">pScore </span>points with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">*pScore += 500;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Because <span class="s35">pScore </span>points to <span class="s35">score</span>, the preceding line of code adds <span class="s35">500 </span>to <span class="s35">score</span>. Therefore, when I next send <span class="s35">score </span>to <span class="s35">cout</span>, <span class="s35">2000 </span>is displayed. Then, when I send</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 14pt;text-align: justify;">*pScore <span class="p">to </span>cout<span class="s51">.. .</span><span class="p">you guessed it, </span>2000 <span class="p">is displayed again.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_278.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark813">Don’t change the value of a pointer when you want to change the value of the object to which the pointer points. For example, if I want to add </a><span class="s35">500 </span>to the <span class="s35">int </span>that <span class="s35">pScore </span>points to, then the following line would be a big mistake.<a name="bookmark857">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">pScore += 500;</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The preceding code adds <span class="s35">500 </span>to the address stored in <span class="s35">pScore</span>, not to the value to which <span class="s35">pScore </span>originally pointed. As a result, <span class="s35">pScore </span>now points to some address that might contain anything. Dereferencing a pointer like this can lead to disastrous results.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_279.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a275"><h1 href="#bookmark9">Reassigning Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Unlike references, pointers can point to different objects at different times during the life of a program. Reassigning a pointer works like reassigning any other variable. Next, I reassign <span class="s35">pScore </span>with the following line.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">pScore = &amp;newScore;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As the result, <span class="s35">pScore </span>now points to <span class="s35">newScore</span>. To prove this, I display the address of <span class="s35">newScore </span>by sending <span class="s35">&amp;newScore </span>to <span class="s35">cout</span>, followed by the address stored in <span class="s35">pScore</span>. Both statements display the same address. Then I send <span class="s35">newScore </span>and</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">*pScore <span class="p">to </span>cout<span class="p">. Both display </span>5000 <span class="p">because they both access the same chunk of memory that stores this value.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_280.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Don’t change the value to which a pointer points when you want to change the pointer itself. For example, if I want to change <span class="s35">pScore </span>to point to <span class="s35">newScore</span>, then the following line would be a big mistake.</p><p class="s35" style="padding-top: 5pt;padding-left: 60pt;text-indent: 0pt;text-align: justify;">*pScore = newScore;</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">This code simply changes the value to which <span class="s35">pScore </span>currently points; it doesn’t change <span class="s35">pScore </span>itself. If <span class="s35">newScore </span>is equal to <span class="s35">5000</span>, then the previous code is equivalent to <span class="s35">*pScore = 5000; </span>and <span class="s35">pScore </span>still points to the same variable it pointed to before the assignment.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_281.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark814">230 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark858">&zwnj;</a><a name="bookmark859">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a276"><h1 href="#bookmark9">Using Pointers to Objects</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">So far, the Pointing program has worked only with values of a built-in type, <span class="s35">int</span>. But you can use pointers with objects just as easily. I demonstrate this next with the following lines, which create <span class="s35">str</span>, a <span class="s35">string </span>object equal to <span class="s35">&quot;score&quot;</span>, and <span class="s35">pStr</span>, a pointer that points to that object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string str = &quot;score&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* pStr = &amp;str;      //pointer to string object</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">pStr <span class="p">is a pointer to </span>string<span class="p">, meaning that it can point to any </span>string <span class="p">object. Another way to say this is to say that </span>pStr <span class="p">can store the address of any </span>string <span class="p">object.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can access an object through a pointer using the dereference operator. That<span class="s12">’</span>s what I do next with the following line.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pStr is: &quot; &lt;&lt; *pStr &lt;&lt; &quot;\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">By using the dereference operator with <span class="s35">*pStr</span>, I send the object to which <span class="s35">pStr</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">points (<span class="s35">str</span>) to <span class="s35">cout</span>. As a result, the text <span class="s35">score </span>is displayed.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can call the member functions of an object through a pointer the same way you can call the member functions of an object through an iterator. One way to do this is by using the dereference operator and the member access operator, which is what I do next with the following lines.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;(*pStr).size() is: &quot; &lt;&lt; (*pStr).size() &lt;&lt; &quot;\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code <span class="s35">(*pStr).size() </span>says, <span class="s12">“</span>Take the result of dereferencing <span class="s35">pStr </span>and call that object<span class="s12">’</span>s <span class="s35">size() </span>member function.<span class="s12">” </span>Because <span class="s35">pStr </span>refers to the <span class="s35">string </span>object equal to <span class="s35">&quot;score&quot;</span>, the code returns <span class="s35">5</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_282.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Whenever you dereference a pointer to access a data member or member function, surround the dereferenced pointer with a pair of parentheses. This ensures that the dot operator will be applied to the object to which the pointer points.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_283.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just as with iterators, you can use the <span class="s35">-&gt; </span>operator with pointers for a more readable way to access object members. That<span class="s12">’</span>s what I demonstrate next with the following line.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;pStr-&gt;size() is: &quot; &lt;&lt; pStr-&gt;size() &lt;&lt; &quot;\n&quot;;</p><p class="s19" style="padding-top: 2pt;padding-left: 250pt;text-indent: 0pt;text-align: left;"><a name="bookmark815">Understanding Pointers and Constants 231</a><a name="bookmark816">&zwnj;</a><a name="bookmark860">&zwnj;</a><a name="bookmark861">&zwnj;</a><a name="bookmark862">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding statement again displays the number of characters in the string object equal to <span class="s35">&quot;score&quot;</span>; however, I<span class="s12">’</span>m able to substitute <span class="s35">pStr-&gt;size() </span>for <span class="s35">(*pStr).size() </span>this time, making the code more readable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="s30" name="a277">Understanding Pointers and Constants</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">There are still some pointer mechanics you need to understand before you can start to use pointers effectively in your game programs. You can use the keyword <span class="s35">const </span>to restrict the way a pointer works. These restrictions can act as safeguards and can make your programming intentions clearer. Since pointers are quite versatile, restricting how a pointer can be used is in line with the programming mantra of asking for only what you need.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a278"><h1 href="#bookmark10">Using a Constant Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As you<span class="s12">’</span>ve seen, pointers can point to different objects at different times in a program. However, by using the <span class="s35">const </span>keyword when you declare and initialize a pointer, you can restrict the pointer so it can only point to the object it was initialized to point to. A pointer like this is called a <span class="s11">constant pointer</span>. Another way to say this is to say that the address stored in a constant pointer can never change<span class="s12">—</span>it<span class="s12">’</span>s constant. Here<span class="s12">’</span>s an example of creating a constant pointer:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int score = 100;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* const pScore = &amp;score;    //a constant pointer</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The preceding code creates a constant pointer, <span class="s35">pScore</span>, which points to <span class="s35">score</span>. You create a constant pointer by putting <span class="s35">const </span>right before the name of the pointer when you declare it.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like all constants, you must initialize a constant pointer when you first declare it. The following line is illegal and will produce a big, fat compile error.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* const pScore;    //illegal - - you must initialize a constant pointer</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">pScore </span>is a constant pointer, it can<span class="s12">’</span>t ever point to any other memory location. The following code is also quite illegal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pScore = &amp;anotherScore;    //illegal – pScore can’t point to a different object</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although you can<span class="s12">’</span>t change <span class="s35">pScore </span>itself, you can use <span class="s35">pScore </span>to change the value to which it points. The following line is completely legal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*pScore = 500;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark817">232 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark863">&zwnj;</a><a name="bookmark864">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Confused? Don<span class="s12">’</span>t be. It<span class="s12">’</span>s perfectly fine to use a constant pointer to change the value to which it points. Remember, the restriction on a constant pointer is that its value<span class="s12">—</span>the address that the pointer stores<span class="s12">—</span>can<span class="s12">’</span>t change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The way a constant pointer works should remind you of something<span class="s12">—</span>a reference. Like a reference, a constant pointer can refer only to the object it was initialized to refer to.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_284.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can use a constant pointer instead of a reference in your programs, you should stick with references when possible. References have a cleaner syntax than pointers and can make your code easier to read.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_285.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="h1" name="a279">Using a Pointer to a </a><h1 href="#bookmark10">Constant</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As you<span class="s12">’</span>ve seen, you can use pointers to change the values to which they point. However, by using the <span class="s35">const </span>keyword when you declare a pointer, you can restrict a pointer so it can<span class="s12">’</span>t be used to change the value to which it points. A pointer like this is called a <span class="s11">pointer to a constant</span>. Here<span class="s12">’</span>s an example of declaring such a pointer:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">const int* pNumber;    //a pointer to a constant</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code declares a pointer to a constant, <span class="s35">pNumber</span>. You declare a pointer to a constant by putting <span class="s35">const </span>right before the type of value to which the pointer will point.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You assign an address to a pointer to a constant as you did before.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">int lives = 3; pNumber = &amp;lives;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">However, you can<span class="s12">’</span>t use the pointer to change the value to which it points. The following line is illegal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*pNumber -= 1;    //illegal - - can’t use pointer to a constant to change value</p><p class="s35" style="padding-top: 2pt;padding-left: 120pt;text-indent: 0pt;text-align: left;">//that pointer points to</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although you can<span class="s12">’</span>t use a pointer to a constant to change the value to which it points, the pointer itself can change. This means that a pointer to a constant</p><p class="s19" style="padding-top: 2pt;padding-left: 250pt;text-indent: 0pt;text-align: left;"><a name="bookmark818">Understanding Pointers and Constants 233</a><a name="bookmark865">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">can point to different objects in a program. The following code is perfectly legal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">const int MAX_LIVES = 5;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pNumber = &amp;MAX_LIVES;    //pointer itself can change</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a280"><h1 href="#bookmark10">Using a Constant Pointer to a Constant</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">constant pointer to a constant </span>combines the restrictions of a constant pointer and a pointer to a constant. This means that a constant pointer to a constant can only point to the object that it was initialized to point to. In addition, it can<span class="s12">’</span>t be used to change the value of the object to which it points. Here<span class="s12">’</span>s the declaration and initialization of such a pointer:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">const int* const pBONUS = &amp;BONUS;    //a constant pointer to a constant</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code creates a constant pointer to a constant named <span class="s35">pBONUS </span>that points to the constant <span class="s35">BONUS</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_286.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Like a pointer to a constant, a constant pointer to a constant can point to either a non-constant or constant value.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_287.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can<span class="s12">’</span>t reassign a constant pointer to a constant. The following line is not legal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">pBONUS = &amp;MAX_LIVES;    //illegal - - pBONUS can’t point to another object</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can<span class="s12">’</span>t use a constant pointer to a constant to change the value to which it points. This means that the following line is illegal.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">*pBONUS = MAX_LIVES;    //illegal - - can’t change value through pointer</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In many ways, a constant pointer to a constant acts like a constant reference, which can only refer to the value it was initialized to refer to and which can<span class="s12">’</span>t be used to change that value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_288.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although you can use a constant pointer to a constant instead of a constant reference in your programs, you should stick with constant references when possible. References have a cleaner syntax than pointers and can make your code easier to read.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_289.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark819">234 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark866">&zwnj;</a><a name="bookmark867">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a281"><h1 href="#bookmark10">Summarizing Constants and Pointers</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I<span class="s12">’</span>ve presented a lot of information on constants and pointers, so I want to provide a summary to help crystallize the new concepts. Here are three examples of the different ways in which you can use the keyword <span class="s35">const </span>when you are declaring pointers:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">int* const p = &amp;i;</span></p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><a name="bookmark820">n   </a><span class="s35">const int* p;</span><a name="bookmark868">&zwnj;</a></p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">const int* const p = &amp;I;</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark821">The first example declares and initializes a constant pointer. A constant pointer can only point to the object to which it was initialized to point. The value</a><span class="s12">—</span>the memory address<span class="s12">—</span>stored in the pointer itself is constant and can<span class="s12">’</span>t change. A constant pointer can only point to a non-constant value; it can<span class="s12">’</span>t point to a constant.<a name="bookmark869">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The second example declares a pointer to a constant. A pointer to a constant can<span class="s12">’</span>t be used to change the value to which it points. A pointer to a constant can point to different objects during the life of a program. A pointer to a constant can point to a constant or non-constant value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The third example declares a constant pointer to a constant. A constant pointer to a constant can only point to the value to which it was initialized to point. In addition, it can<span class="s12">’</span>t be used to change the value to which it points. A constant pointer to a constant can be initialized to point to a constant or a non-constant value.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a282">Passing Pointers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Even though references are the preferred way to pass arguments because of their cleaner syntax, you still might need to pass objects through pointers. For example, suppose you<span class="s12">’</span>re using a graphics engine that returns a pointer to a 3D object. If you want another function to use this object, you<span class="s12">’</span>ll probably want to pass the pointer to the object for efficiency. Therefore, it<span class="s12">’</span>s important to know how to pass pointers as well as references.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="h1" name="a283">Introducing the Swap Pointer Version </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Swap Pointer Version program works just like the Swap program from Chapter 6, except that the Swap Pointer Version program uses pointers instead of references. The Swap Pointer Version program defines two variables<span class="s12">—</span>one</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Passing Pointers 235</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">that holds my pitifully low score and another that holds your impressively high score. After displaying the scores, the program calls a function meant to swap the scores. Because only copies of the score values are sent to the function, the original variables are unaltered. Next, the program calls another swap function. This time, through the use of constant pointers, the original variables<span class="s12">’ </span>values are successfully exchanged (giving me the great big score and leaving you with the small one). Figure 7.3 shows the program in action.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="224" alt="image" src="Image_290.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 7.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Passing pointers allows a function to alter variables outside of the function’s scope.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">swap_pointer_ver.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Swap Pointer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// Demonstrates passing constant pointers to alter argument variables #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void badSwap(int x, int y);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void goodSwap(int* const pX, int* const pY);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark870">236 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int myScore = 150; int yourScore = 1000;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cout &lt;&lt; &quot;Original values\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Calling badSwap()\n&quot;; badSwap(myScore, yourScore);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark822">cout &lt;&lt; &quot;Calling goodSwap()\n&quot;; goodSwap(&amp;myScore, &amp;yourScore);</a><a name="bookmark871">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;myScore: &quot; &lt;&lt; myScore &lt;&lt; &quot;\n&quot;; cout &lt;&lt; &quot;yourScore: &quot; &lt;&lt; yourScore &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void badSwap(int x, int y)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int temp = x; x = y;</p><p class="s35" style="padding-left: 61pt;text-indent: 0pt;line-height: 11pt;text-align: left;">y = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void goodSwap(int* const pX, int* const pY)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;line-height: 119%;text-align: left;">//store value pointed to by pX in temp int temp = *pX;</p><p class="s35" style="padding-left: 61pt;text-indent: 0pt;line-height: 11pt;text-align: left;">//store value pointed to by pY in address pointed to by pX</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">*pX = *pY;</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">//store value originally pointed to by pX in address pointed to by pY</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pY = temp;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a284"><h1 href="#bookmark10">Passing by Value</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">After I declare and initialize <span class="s35">myScore </span>and <span class="s35">yourScore</span>, I send them to <span class="s35">cout</span>. As you<span class="s12">’</span>d expect, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed. Next I call <span class="s35">badSwap()</span>, which passes both</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark823">Passing Pointers 237</a><a name="bookmark872">&zwnj;</a><a name="bookmark873">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">arguments by value. This means that when I call the function with the following line, copies of <span class="s35">myScore </span>and <span class="s35">yourScore </span>are sent to the parameters <span class="s35">x </span>and <span class="s35">y</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">badSwap(myScore, yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Specifically, <span class="s35">x </span>is assigned <span class="s35">150 </span>and <span class="s35">y </span>is assigned <span class="s35">1000</span>. As a result, nothing I do with <span class="s35">x </span>and <span class="s35">y </span>in <span class="s35">badSwap() </span>will have any effect on <span class="s35">myScore </span>and <span class="s35">yourScore</span>.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When <span class="s35">badSwap() </span>executes, <span class="s35">x </span>and <span class="s35">y </span><span class="s11">do </span>exchange values<span class="s12">—</span><span class="s35">x </span>becomes <span class="s35">1000 </span>and <span class="s35">y </span>becomes <span class="s35">150</span>. However, when the function ends, both <span class="s35">x </span>and <span class="s35">y </span>go out of scope. Control then returns to <span class="s35">main()</span>, in which <span class="s35">myScore </span>and <span class="s35">yourScore </span>haven<span class="s12">’</span>t changed. When I then send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>, <span class="s35">150 </span>and <span class="s35">1000 </span>are displayed again. Sadly, I still have the tiny score and you still have the large one.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a285"><h1 href="#bookmark10">Passing a Constant Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen that it<span class="s12">’</span>s possible to give a function access to variables by passing references. It<span class="s12">’</span>s also possible to accomplish this using pointers. When you pass a pointer, you only pass the address of an object. This can be quite efficient, especially if you<span class="s12">’</span>re working with objects that occupy large chunks of memory. Passing a pointer is like e-mailing a friend the URL of a website instead of trying to send him the entire site.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Before you can pass a pointer to a function, you need to specify function parameters as pointers. That<span class="s12">’</span>s what I do in the <span class="s35">goodSwap() </span>header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void goodSwap(int* const pX, int* const pY)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This means that <span class="s35">pX </span>and <span class="s35">pY </span>are constant pointers and will each accept a memory address. I made the parameters constant pointers because, although I plan to change the values they point to, I don<span class="s12">’</span>t plan to change the pointers themselves. Remember, this is just how references work. You can change the value to which a reference refers, but not the reference itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In <span class="s35">main()</span>, I pass the addresses of <span class="s35">myScore </span>and <span class="s35">yourScore </span>when I call <span class="s35">goodSwap()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">goodSwap(&amp;myScore, &amp;yourScore);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice that I send the addresses of the variables to <span class="s35">goodSwap() </span>by using the address of operator. When you pass an object to a pointer, you need to send the address of the object.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark874">238 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In <span class="s35">goodSwap()</span>, <span class="s35">pX </span>stores the address of <span class="s35">myScore </span>and <span class="s35">pY </span>stores the address of <span class="s35">yourScore</span>. Anything done to <span class="s35">*pX </span>will be done to <span class="s35">myScore</span>; anything done to <span class="s35">*pY </span>will be done to <span class="s35">yourScore</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The first line of <span class="s35">goodSwap() </span>takes the value that <span class="s35">pX </span>points to and assigns it to <span class="s35">temp</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int temp = *pX;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Because <span class="s35">pX </span>points to <span class="s35">myScore</span>, <span class="s35">temp </span>becomes <span class="s35">150</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The next line assigns the value pointed to by <span class="s35">pY </span>to the object to which <span class="s35">pX </span>points.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark824">*pX = *pY;</a><a name="bookmark875">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This statement copies the value stored in <span class="s35">yourScore</span>, <span class="s35">1000</span>, and assigns it to the memory location of <span class="s35">myScore</span>. As a result, <span class="s35">myScore </span>becomes <span class="s35">1000</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The last statement in the function stores the value of <span class="s35">temp</span>, <span class="s35">150</span>, in the address pointed to by <span class="s35">pY</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pY = temp;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Because <span class="s35">pY </span>points to <span class="s35">yourScore</span>, <span class="s35">yourScore </span>becomes <span class="s35">150</span>.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After the function ends, control returns to <span class="s35">main()</span>, where I send <span class="s35">myScore </span>and <span class="s35">yourScore </span>to <span class="s35">cout</span>. This time, <span class="s35">1000 </span>and <span class="s35">150 </span>are displayed. The variables have exchanged values. Success at last!</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_291.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s54" target="_blank">You can also pass a constant pointer to a constant. This works much like passing a constant reference, which is done to efficiently pass an object that you don’t need to change. I’ve adapted the Inventory Displayer program from Chapter 6, which demonstrates passing constant references, to pass a constant pointer to a constant. You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">inventory_displayer_pointer_ver.cpp</span>.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_292.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a286">Returning Pointers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Before references, the only option game programmers had for returning objects efficiently from functions was using pointers. And even though using references provides a cleaner syntax than using pointers, you might still need to return objects through pointers.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark825">Returning Pointers 239</a><a name="bookmark876">&zwnj;</a><a name="bookmark877">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="h1" name="a287">Introducing the Inventory Pointer </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Inventory Pointer program demonstrates returning pointers. Through returned pointers, the program displays and even alters the values of a vector that holds a hero<span class="s12">’</span>s inventory. Figure 7.4 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="224" alt="image" src="Image_293.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 7.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">A function returns a pointer (not a <span class="s35">string </span>object) to each item in the hero’s inventory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">inventory_pointer.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Inventory Pointer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates returning a pointer</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">//returns a pointer to a string element</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string* ptrToElement(vector&lt;string&gt;* const pVec, int i);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark878">240 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">vector&lt;string&gt; inventory; inventory.push_back(&quot;sword&quot;); inventory.push_back(&quot;armor&quot;); inventory.push_back(&quot;shield&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">//displays string object that the returned pointer points to</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Sending the objected pointed to by returned pointer:\n&quot;; cout &lt;&lt; *(ptrToElement(&amp;inventory, 0)) &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark826">//assigns one pointer to another - - inexpensive assignment cout &lt;&lt; &quot;Assigning the returned pointer to another pointer.\n&quot;; string* pStr = ptrToElement(&amp;inventory, 1);</a><a name="bookmark879">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Sending the object pointed to by new pointer to cout:\n&quot;; cout &lt;&lt; *pStr &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">//copies a string object - - expensive assignment</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Assigning object pointed by pointer to a string object.\n&quot;; string str = *(ptrToElement(&amp;inventory, 2));</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Sending the new string object to cout:\n&quot;; cout &lt;&lt; str &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//altering the string object through a returned pointer cout &lt;&lt; &quot;Altering an object through a returned pointer.\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">*pStr = &quot;Healing Potion&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Sending the altered object to cout:\n&quot;; cout &lt;&lt; inventory[1] &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string* ptrToElement(vector&lt;string&gt;* const pVec, int i)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//returns address of the string in position i of vector that pVec points to return &amp;((*pVec)[i]);</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a288"><h1 href="#bookmark10">Returning a Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Before you can return a pointer from a function, you must specify that you<span class="s12">’</span>re returning one. That<span class="s12">’</span>s what I do in the <span class="s35">refToElement() </span>header.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">string* ptrToElement(vector&lt;string&gt;* const pVec, int i)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark880">Returning Pointers 241</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By starting the header with <span class="s35">string*</span>, I<span class="s12">’</span>m saying that the function will return a pointer to a <span class="s35">string </span>object (and not a <span class="s35">string </span>object itself). To specify that a function returns a pointer to an object of a particular type, put an asterisk after the type name of the return type.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The body of the function <span class="s35">ptrToElement() </span>contains only one statement, which returns a pointer to the element at position <span class="s35">i </span>in the vector pointed to by <span class="s35">pVec</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return &amp;((*pVec)[i]);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark827">The </a><span class="s35">return </span>statement might look a little cryptic, so I<span class="s12">’</span>ll step through it. Whenever you come upon a complex expression, evaluate it like the computer does<span class="s12">—</span>by starting with the innermost part. I<span class="s12">’</span>ll start with <span class="s35">(*pVec)[i]</span>, which means the element in position <span class="s35">i </span>of the vector pointed to by <span class="s35">pVec</span>. By applying the address of operator (<span class="s35">&amp;</span>) to the expression, it becomes the address of the element in position <span class="s35">i </span>of the vector pointed to by <span class="s35">pVec</span>.<a name="bookmark881">&zwnj;</a></p><p class="s24" style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_294.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Although returning a pointer can be an efficient way to send information back to a calling function, you have to be careful not to return a pointer that points to an out-of-scope object. For example, the following function returns a pointer that, if used, could crash the program.</p><p class="s35" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">string* badPointer()</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 79pt;text-indent: 0pt;line-height: 119%;text-align: left;">string local = &quot;This string will cease to exist once the function ends.&quot;; string* pLocal = &amp;local;</p><p class="s35" style="padding-left: 79pt;text-indent: 0pt;line-height: 11pt;text-align: left;">return pLocal;</p><p class="s35" style="padding-top: 2pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">That’s because <span class="s35">badPointer() </span>returns a pointer to a string that no longer exists after the function ends. A pointer to a non-existent object is called a <i>dangling pointer</i>. Attempting to dereference a dangling pointer can lead to disastrous results. One way to avoid dangling pointers is to never return a pointer to a local variable.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_295.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a289"><h1 href="#bookmark10">Using a Returned Pointer to Display a Value</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">After I create <span class="s35">inventory</span>, a vector of items, I display a value with a returned pointer.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">cout &lt;&lt; *(ptrToElement(&amp;inventory, 0)) &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The preceding code calls <span class="s35">ptrToElement()</span>, which returns a pointer to <span class="s35">inventory[0]</span>. (Remember,  <span class="s35">ptrToElement()  </span>doesn<span class="s12">’</span>t  return  a  copy  of  one  of  the  elements  of</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark828">242 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark882">&zwnj;</a><a name="bookmark883">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">inventory<span class="p">; it returns a pointer  to one of them.) The line  then  sends the  </span>string</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">object pointed to by the pointer to <span class="s35">cout</span>. As a result, <span class="s35">sword </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a290"><h1 href="#bookmark10">Assigning a Returned Pointer to a Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I assign a returned pointer to another pointer with the following line.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* pStr = ptrToElement(&amp;inventory, 1);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark829">The call to </a><span class="s35">prtToElement() </span>returns a pointer to <span class="s35">inventory[1]</span>. The statement assigns that pointer to <span class="s35">pStr</span>. This is an efficient assignment because assigning a pointer to a pointer does not involve copying the <span class="s35">string </span>object.<a name="bookmark884">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To help you understand the results of this line of code, look at Figure 7.5, which shows a representation of <span class="s35">pStr </span>after the assignment. (Note that the figure is abstract because the vector <span class="s35">inventory </span>doesn<span class="s12">’</span>t contain the string literals <span class="s35">&quot;sword&quot;</span>, <span class="s35">&quot;armor&quot;</span>, and <span class="s35">&quot;shield&quot;</span>; instead, it contains <span class="s35">string </span>objects.)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="118" alt="image" src="Image_296.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 7.5</p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">pStr <span class="s19">points to the element at position </span>1 <span class="s19">of </span>inventory<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I send <span class="s35">*pStr </span>to <span class="s35">cout </span>and <span class="s35">armor </span>is displayed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="h1" name="a291">Assigning to a Variable the Value Pointed </a><h1 href="#bookmark10">to by a Returned Pointer</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next I assign the value pointed to by a returned pointer to a variable.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string str = *(ptrToElement(&amp;inventory, 2));</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The call to <span class="s35">prtToElement() </span>returns a pointer to <span class="s35">inventory[2]</span>. However, the preceding statement doesn<span class="s12">’</span>t assign this pointer to <span class="s35">str</span><span class="s12">—</span>it can<span class="s12">’</span>t because <span class="s35">str </span>is a <span class="s35">string </span>object. Instead, the computer quietly makes a copy of the <span class="s35">string </span>object to which the pointer points and assigns that object to <span class="s35">str</span>. To help drive this point home, check out Figure 7.6, which provides an abstract representation of the results of this assignment.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark885">Returning Pointers 243</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="15" height="9" alt="image" src="Image_297.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="83" height="40" alt="image" src="Image_298.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="247" height="119" alt="image" src="Image_299.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark830">Figure 7.6</a><a name="bookmark886">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">str <span class="s19">is a new </span>string <span class="s19">object, totally independent from </span>inventory<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">An assignment like this one, where an object is copied, is more expensive than the assignment of one pointer to another. Sometimes the cost of copying an object is perfectly acceptable, but you should be aware of the extra overhead associated with this kind of assignment and avoid it when necessary.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a292"><h1 href="#bookmark10">Altering an Object through a Returned Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can also alter the object to which a returned pointer points. This means that I can change the hero<span class="s12">’</span>s inventory through <span class="s35">pStr</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pStr = &quot;Healing Potion&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">pStr </span>points to the element in position <span class="s35">1 </span>of <span class="s35">inventory</span>, this code changes <span class="s35">inventory[1] </span>so it<span class="s12">’</span>s equal to <span class="s35">&quot;Healing Potion&quot;</span>. To prove this, I display the element with the following line, which does indeed show <span class="s35">Healing Potion</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; inventory[1] &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">For an abstract representation, check out Figure 7.7, which shows the status of the variables after the assignment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_300.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">If you want to protect an object pointed to by a returned pointer, make sure to restrict the pointer. Return either a pointer to a constant or a constant pointer to a constant.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_301.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark831">244 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark887">&zwnj;</a><a name="bookmark888">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="321" height="156" alt="image" src="Image_302.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 7.7</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark832">inventory[1] </a><span class="s19">is changed through the returned pointer stored in </span>pStr<span class="s19">.</span><a name="bookmark889">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a293">Understanding the Relationship between Pointers and Arrays</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Pointers have an intimate relationship with arrays. In fact, an array name is really a constant pointer to the first element of the array. Because the elements of an array are stored in a contiguous block of memory, you can use the array name as a pointer for random access to elements. This relationship also has important implications for how you can pass and return arrays, as you<span class="s12">’</span>ll soon see.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="h1" name="a294">Introducing the Array Passer </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Array Passer program creates an array of high scores and then displays them, using the array name as a constant pointer. Next, the program passes the array name as a constant pointer to a function that increases the scores. Finally, the program passes the array name to a function as a constant pointer to a constant to display the new high scores. Figure 7.8 shows the results of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">array_passer.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Array Passer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates relationship between pointers and arrays #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 140pt;text-indent: 0pt;text-align: left;">Understanding the Relationship between Pointers and Arrays 245</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="425" height="224" alt="image" src="Image_303.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 7.8</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Using an array name as a pointer, the high scores are displayed, altered, and passed to functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void increase(int* const array, const int NUM_ELEMENTS);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void display(const int* const array, const int NUM_ELEMENTS);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Creating an array of high scores.\n\n&quot;; const int NUM_SCORES = 3;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">int highScores[NUM_SCORES] = {5000, 3500, 2700};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Displaying scores using array name as a constant pointer.\n&quot;; cout &lt;&lt; *highScores &lt;&lt; endl;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; *(highScores + 1) &lt;&lt; endl; cout &lt;&lt; *(highScores + 2) &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Increasing scores by passing array as a constant pointer.\n\n&quot;; increase(highScores, NUM_SCORES);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 109pt;text-indent: -47pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Displaying scores by passing array as a constant pointer to a constant.\n&quot;;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">display(highScores, NUM_SCORES);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark833">246 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark890">&zwnj;</a><a name="bookmark891">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void increase(int* const array, const int NUM_ELEMENTS)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; NUM_ELEMENTS; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">array[i] += 500;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void display(const int* const array, const int NUM_ELEMENTS)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; NUM_ELEMENTS; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; array[i] &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a295"><h1 href="#bookmark10">Using an Array Name as a Constant Pointer</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because an array name is a constant pointer to the first element of the array, you can dereference the name to get at the first element. That<span class="s12">’</span>s what I do after I create an array of high scores, called <span class="s35">highScores</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *highScores &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I dereference <span class="s35">highScores </span>to access the first element in the array and send it to</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">cout<span class="p">. As a result, </span>5000 <span class="p">is displayed.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can randomly access array elements using an array name as a pointer through simple addition. All you have to do is add the position number of the element you want to access to the pointer before you dereference it. This is simpler than it sounds. For example, I next access the score at position <span class="s35">1 </span>in <span class="s35">highScores </span>with the following line, which displays <span class="s35">3500</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *(highScores + 1) &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In the preceding code, <span class="s35">*(highScores + 1) </span>is equivalent to <span class="s35">highScores[1]</span>. Both return the element in position <span class="s35">1 </span>of <span class="s35">highScores</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I access the score at position <span class="s35">2 </span>in <span class="s35">highScores </span>with the following line, which displays <span class="s35">2700</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *(highScores + 2) &lt;&lt; endl;</p><p class="s19" style="padding-top: 2pt;padding-left: 140pt;text-indent: 0pt;text-align: left;"><a name="bookmark834">Understanding the Relationship between Pointers and Arrays 247</a><a name="bookmark892">&zwnj;</a><a name="bookmark893">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the preceding code, <span class="s35">*(highScores + 2)  </span>is equivalent to <span class="s35">highScores[2]</span>. Both return  the  element  in  position  <span class="s35">2  </span>of  <span class="s35">highScores</span>.  In  general,  you  can  write <span class="s35">arrayName[i]  </span>as <span class="s35">*(arrayName + i)</span>, where <span class="s35">arrayName  </span>is the name of an array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a296"><h1 href="#bookmark10">Passing and Returning Arrays</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because an array name is a constant pointer, you can use it to efficiently pass an array to a function. That<span class="s12">’</span>s what I do next with the following line, which passes to <span class="s35">increase</span>() a constant pointer to the first element of the array and the number of elements in the array.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">increase(highScores, NUM_SCORES);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_304.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you pass an array to a function, it’s usually a good idea to also pass the number of elements in the array so the function can use this to avoid attempting to access an element that doesn’t exist.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_305.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you can see from the function header of <span class="s35">increase()</span>, the array name is accepted as a constant pointer.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void increase(int* const array, const int NUM_ELEMENTS)</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The function body adds <span class="s35">500 </span>to each score.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">for (int i = 0; i &lt; NUM_ELEMENTS; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">array[i] += 500;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I treat <span class="s35">array </span>just like any array and use the subscripting operator to access each of its elements. Alternatively, I could have treated <span class="s35">array </span>as a pointer and substituted <span class="s35">*(array + i) += 500 </span>for the expression <span class="s35">array[i] += 500</span>, but I opted for the more readable version.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After <span class="s35">increase() </span>ends, control returns to <span class="s35">main()</span>. To prove that <span class="s35">increase() </span>did in fact increase the high scores, I call a function to show the scores.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">display(highScores, NUM_SCORES);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function <span class="s35">display() </span>also accepts <span class="s35">highScore </span>as a pointer. However, as you can see from the function<span class="s12">’</span>s header, the function accepts it as a constant pointer to a constant.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void display(const int* const array, const int NUM_ELEMENTS)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark835">248 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark894">&zwnj;</a><a name="bookmark895">&zwnj;</a><a name="bookmark896">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By passing the array in this way, I keep it safe from changes. Because all I want to do is display each element, it<span class="s12">’</span>s the perfect way to go.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Finally, the body of <span class="s35">display() </span>runs and all of the scores are listed, showing that they<span class="s12">’</span>ve each increased by 500.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_306.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can pass a C-style string to a function, just like any other array. In addition, you can pass a string literal to a function as a constant pointer to a constant.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_307.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark836">Because an array name is a pointer, you can return an array using the array name, just as you would any other pointer to an object.</a><a name="bookmark897">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a297">Introducing the Tic-Tac-Toe 2.0 Game</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The project for this chapter is a modified version of the project from Chapter 6, the Tic-Tac-Toe game. From the player<span class="s12">’</span>s perspective, the Tic-Tac-Toe 2.0 game looks exactly the same as the original because the changes are under the hood<span class="s12">— </span>I<span class="s12">’</span>ve replaced all of the references with pointers. This means that objects such as the Tic-Tac-Toe board are passed as constant pointers instead of as references. This has other implications, including the fact that the address of a Tic-Tac-Toe board must be passed instead of the board itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for the new version of the program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 7 folder; the filename is <span class="s35">tic-tac-toe2.cpp</span>. I won<span class="s12">’</span>t go over the code because most of it remains the same. But even though the number of changes isn<span class="s12">’</span>t great, the changes are significant. This is a good program to study because, although you should use references whenever you can, you should be equally comfortable with pointers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a298">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Computer memory is organized in an ordered way, where each chunk of memory has its own unique address.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A pointer is a variable that contains a memory address.</span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark898">Summary 249</a><a name="bookmark899">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">In many ways, pointers act like iterators from the STL. For example, just as with iterators, you use pointers to indirectly access an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">To declare a pointer, you list a type, followed by an asterisk, followed by a name.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Programmers often prefix pointer variable names with the letter <span class="s12">“</span>p<span class="s12">” </span>to remind them that the variable is indeed a pointer.</p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;line-height: 140%;text-align: left;"><span class="s29">n </span>Just like an iterator, a pointer is declared to refer to a value of a specific type. <span class="s29">n </span>It<span class="s12">’</span>s good programming practice to initialize a pointer when you declare it. <span class="s29">n </span>If you assign <span class="s35">0 </span>to a pointer, the pointer is called a null pointer.</p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>To get the address of a variable, put the address of operator (<span class="s35">&amp;</span>) before the variable name.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>When a pointer contains the address of an object, it<span class="s12">’</span>s said to point to the object.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Unlike references, you can reassign pointers. That is, a pointer can point to different objects at different times during the life of a program.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Just as with iterators, you dereference a pointer to access the object it points to with <span class="s35">*</span>, the dereference operator.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Just as with iterators, you can use the <span class="s35">-&gt; </span>operator with pointers for a more readable way to access object data members and member functions.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A constant pointer can only point to the object it was initialized to point to. You declare a constant pointer by putting the keyword <span class="s35">const </span>right before the pointer name, as in <span class="s35">int* const p = &amp;i;</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can<span class="s12">’</span>t use a pointer to a constant to change the value to which it points. You declare a pointer to a constant by putting the keyword <span class="s35">const </span>before the type name, as in <span class="s35">const int* p;</span>.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>A constant pointer to a constant can only point to the value it was initialized to point to, and it can<span class="s12">’</span>t be used to change that value. You declare a constant pointer to a constant by putting the keyword <span class="s35">const </span>before the type name and right before the pointer name, as in <span class="s35">const int* const p = &amp;I;</span>.</p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can pass pointers for efficiency or to provide direct access to an object.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark837">250 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark900">&zwnj;</a><a name="bookmark901">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>If you want to pass a pointer for efficiency, you should pass a pointer to a constant or a constant pointer to a constant so the object you<span class="s12">’</span>re passing access to can<span class="s12">’</span>t be changed through the pointer.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A dangling pointer is a pointer to an invalid memory address. Dangling pointers are often caused by deleting an object to which a pointer pointed. Dereferencing such a pointer can lead to disastrous results.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can return a pointer from a function, but be careful not to return a dangling pointer.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a299">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How is a pointer different from the variable to which it points?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: A pointer stores a memory address. If a pointer points to a variable, it stores the address of that variable.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What good is it to store the address of a variable that already exists?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: One big advantage of storing the address of an existing variable is that you can pass a pointer to the variable for efficiency instead of passing the variable by value.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Does a pointer always have to point to an existing variable?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: No. You can create a pointer that points to an unnamed chunk of computer memory as you need it. You<span class="s12">’</span>ll learn more about allocating memory in this dynamic fashion in Chapter 9, <span class="s12">“</span>Advanced Classes and Dynamic Memory: Game Lobby.<span class="s12">”</span></p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Why should I pass variables using references instead of pointers whenever possible?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Because of the sweet, syntactic sugar that references provide. Passing a reference or a pointer is an efficient way to provide access to objects, but pointers require extra syntax (like the dereference operator) to access the object itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should I initialize a pointer when I declare it or soon thereafter?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Because dereferencing an uninitialized pointer can lead to disastrous results, including a program crash.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark902">Questions and Answers 251</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a dangling pointer?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: A pointer that points to an invalid memory location, where any data could exist.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s so dangerous about a dangling pointer?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: Like using an uninitialized pointer, using a dangling pointer can lead to disastrous results, including a program crash.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why should I initialize a pointer to <span class="s35">0</span>?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: By initializing a pointer to <span class="s35">0</span>, you create a null pointer, which is understood as a pointer to nothing.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: So then it<span class="s12">’</span>s safe to dereference a null pointer, right?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: No! Although it<span class="s12">’</span>s good programming practice to assign <span class="s35">0 </span>to a pointer that doesn<span class="s12">’</span>t point to an object, dereferencing a null pointer is as dangerous as dereferencing a dangling pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What will happen if I dereference a null pointer?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: Just like dereferencing a dangling pointer or an uninitialized pointer, the results are unpredictable. Most likely, you<span class="s12">’</span>ll crash your program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What good are null pointers?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: They<span class="s12">’</span>re often returned by functions as a sign of failure. For example, if a function is supposed to return a pointer to an object that represents the graphics screen, but that function couldn<span class="s12">’</span>t initialize the screen, it might return a null pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: How does using the keyword <span class="s35">const </span>when declaring a pointer affect the pointer?</p><p style="padding-top: 7pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: It depends on how you use it. Generally, you use <span class="s35">const </span>when you are declaring a pointer to restrict what the pointer can do.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What kinds of restrictions can I impose on a pointer by declaring it with</p><p class="s35" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">const<span class="p">?</span></p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: You can restrict a pointer so it can only point to the object it was initialized to point to, or you can restrict a pointer so it can<span class="s12">’</span>t change the value of the object it points to, or both.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark838">252 Chapter 7 </a><span class="s32">n </span>Pointers: Tic-Tac-Toe 2.0<a name="bookmark903">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Why would I want to restrict what a pointer can do?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: For safety. For example, you might be working with an object that you know you don<span class="s12">’</span>t want to change.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: To what type of pointers can I assign a constant value?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A pointer to a constant or a constant pointer to a constant. Q: How can I safely return a pointer from a function?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;"><a name="bookmark839">A: One way is by returning a pointer to an object that you received from the calling function. This way, you</a><span class="s12">’</span>re returning a pointer to an object that exists back in the calling code. (In Chapter 9, you<span class="s12">’</span>ll discover another important way when you learn about dynamic memory.)<a name="bookmark904">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a300">Discussion Questions</a></p><ol id="l17"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What are the advantages and disadvantages of passing a pointer?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What kinds of situations call for a constant pointer?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What kinds of situations call for a pointer to a constant?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What kinds of situations call for a constant pointer to a constant?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What kinds of situations call for a non-constant pointer to a non-constant object?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s30" name="a301">Exercises</a></p><ol id="l18"><li><p style="padding-top: 1pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Write a program with a pointer to a pointer to a <span class="s35">string </span>object. Use the pointer to the pointer to call the <span class="s35">size() </span>member function of the <span class="s35">string </span>object.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Rewrite the final project from Chapter 5, the Mad Lib game, so that no <span class="s35">string </span>objects are passed to the function that tells the story. Instead, the function should accept pointers to <span class="s35">string </span>objects.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Will the three memory addresses displayed by the following program all be the same? Explain what<span class="s12">’</span>s going on in the code.</p></li></ol><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Exercises 253</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 63pt;text-indent: 0pt;line-height: 146%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 63pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 84pt;text-indent: 0pt;line-height: 119%;text-align: justify;">int a = 10; int&amp; b = a; int* c = &amp;b;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 84pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &amp;a &lt;&lt; endl; cout &lt;&lt; &amp;b &lt;&lt; endl; cout &lt;&lt; &amp;(*c) &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 63pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">This page intentionally left blank</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s27" name="bookmark905">chapter 8</a><a name="bookmark937">&zwnj;</a><a name="bookmark938">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark10" class="s28" name="bookmark906">Classes: Critter Caretaker</a><a name="bookmark939">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 41pt;text-indent: 0pt;line-height: 15pt;text-align: left;">Object-oriented programming <span class="p">(OOP) is a</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_308.gif"/></span></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">different way of thinking about</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">programming. It<span class="s12">’</span>s a modern methodology that<span class="s12">’</span>s used in the creation of the vast majority of games (and other commercial software, too). In OOP, you define different types of objects with relationships to each other that allow the objects to interact. You<span class="s12">’</span>ve already worked with objects from types defined in libraries, but one of the key characteristics of OOP is the ability to make your own types from which you can create objects. In this chapter, you<span class="s12">’</span>ll see how to define your own types and create objects from them. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Create new types by defining classes</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Declare class data members and member functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Instantiate objects from classes</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Set member access levels</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Declare static data members and member functions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="s30" name="a302">Defining New Types</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Whether you<span class="s12">’</span>re talking about alien spacecrafts, poisonous arrows, or angry mutant chickens, games are full of objects. Fortunately, C++ lets you represent game entities as software objects, complete with member functions and data members. These objects work just like the others you<span class="s12">’</span>ve already seen, such as</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 11pt;text-indent: 0pt;text-align: right;">255</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark907">256 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark940">&zwnj;</a><a name="bookmark941">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">string <span class="p">and </span>vector <span class="p">objects. But to use a new kind of object (say, an angry mutant chicken object), you must first define a type for it.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="h1" name="a303">Introducing the Simple Critter </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Simple Critter Program defines a brand-new type called <span class="s35">Critter </span>for creating virtual pet objects. The program uses this new type to create two <span class="s35">Critter </span>objects. Then, it gives each critter a hunger level. Finally, each critter offers a greeting and announces its hunger level to the world. Figure 8.1 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_309.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 8.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each critter says hi and announces how hungry it is.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 8 folder; the filename is <span class="s35">simple_critter.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Simple Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates creating a new type #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark942">Defining New Types 257</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter // class definition –– defines a new type, Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Hunger;                // data member</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void Greet();                // member function prototype</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Greet()        // member function definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Hi. I’m a critter. My hunger level is &quot; &lt;&lt; m_Hunger &lt;&lt; &quot;.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark908">}</a><a name="bookmark943">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter crit1; Critter crit2;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">crit1.m_Hunger = 9;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;crit1’s hunger level is &quot; &lt;&lt; crit1.m_Hunger &lt;&lt; &quot;.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">crit2.m_Hunger = 3;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;crit2’s hunger level is &quot; &lt;&lt; crit2.m_Hunger &lt;&lt; &quot;.\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">crit1.Greet(); crit2.Greet();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a304"><h1 href="#bookmark10">Defining a Class</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To create a new type, you can define a <span class="s11">class</span><span class="s12">—</span>code that groups data members and member functions. From a class, you create individual objects that have their own copies of each data member and access to all of the member functions. A class is like a blueprint. Just as a blueprint defines the structure of a building, a class defines the structure of an object. And just as a foreman can create many houses from the same blueprint, a game programmer can create many objects from the same class. Some real code will help solidify this theory. I begin a class definition in the Simple Critter program with</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">class Critter // class definition –– defines a new type, Critter</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark944">258 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark945">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">for a class named <span class="s35">Critter</span>. To define a class, start with the keyword <span class="s35">class</span>, followed by the class name. By convention, class names begin with an uppercase letter. You surround the class body with curly braces and end it with a semicolon.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Declaring Data Members</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">In a class definition, you can declare class data members to represent object qualities. I give the critters just one quality, hunger. I see hunger as a range that could be represented by an integer, so I declare an <span class="s35">int </span>data member <span class="s35">m_Hunger</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark909">int m_Hunger;                // data member</a><a name="bookmark946">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This means that every <span class="s35">Critter </span>object will have its own hunger level, represented by its own data member named <span class="s35">m_Hunger</span>. Notice that I prefix the data member name with <span class="s35">m_</span>. Some game programmers follow this naming convention so that data members are instantly recognizable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Declaring Member Functions</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In a class definition, you can also declare member functions to represent object abilities. I give a critter just one<span class="s12">—</span>the ability to greet the world and announce its hunger level<span class="s12">—</span>by declaring the member function <span class="s35">Greet()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void Greet();                // member function prototype</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This means that every <span class="s35">Critter </span>object will have the ability to say hi and announce its own hunger level through its member function, <span class="s35">Greet()</span>. By convention, member function names begin with an uppercase letter. At this point, I<span class="s12">’</span>ve only declared the member function <span class="s35">Greet()</span>. Don<span class="s12">’</span>t worry, though, I<span class="s12">’</span>ll define it outside of the class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_310.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You might have noticed the keyword <span class="s35">public </span>in the class definition. You can ignore it for now. You’ll learn more about it a bit later in this chapter, in the section, “Specifying Public and Private Access Levels.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_311.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a305"><h1 href="#bookmark10">Defining Member Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can define member functions outside of a class definition. Outside of the <span class="s35">Critter </span>class definition, I define the <span class="s35">Critter </span>member function <span class="s35">Greet()</span>, which says hi and displays the critter<span class="s12">’</span>s hunger level.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark910">Defining New Types 259</a><a name="bookmark947">&zwnj;</a><a name="bookmark948">&zwnj;</a><a name="bookmark949">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Greet()        // member function definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Hi. I’m a critter. My hunger level is &quot; &lt;&lt; m_Hunger &lt;&lt; &quot;.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The definition looks like any other function definition you<span class="s12">’</span>ve seen, except for one thing<span class="s12">—</span>I prefix the function name with <span class="s35">Critter::</span>. When you define a member function outside of its class, you need to qualify it with the class name and scope resolution operator so the compiler knows that the definition belongs to the class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark911">In the member function, I send </a><span class="s35">m_Hunger </span>to <span class="s35">cout</span>. This means that <span class="s35">Greet() </span>displays the value of <span class="s35">m_Hunger </span>for the specific object through which the function is called. This simply means that the member function displays the critter<span class="s12">’</span>s hunger level. You can access the data members and member functions of an object in any member function simply by using the member<span class="s12">’</span>s name.<a name="bookmark950">&zwnj;</a></p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a306"><h1 href="#bookmark10">Instantiating Objects</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When you create an object, you <span class="s11">instantiate </span>it from a class. In fact, specific objects are called <span class="s11">instances </span>of the class. In <span class="s35">main()</span>, I instantiate two instances of <span class="s35">Critter</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter crit1; Critter crit2;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">As a result, I have two <span class="s35">Critter </span>objects<span class="s12">—</span><span class="s35">crit1 </span>and <span class="s35">crit2</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a307"><h1 href="#bookmark10">Accessing Data Members</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">It<span class="s12">’</span>s time to put these critters to work. Next, I give my first critter a hunger level.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">crit1.m_Hunger = 9;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code assigns <span class="s35">9 </span>to <span class="s35">crit1</span><span class="s12">’</span>s data member <span class="s35">m_Hunger</span>. Just like when you are accessing an available member function of an object, you can access an available data member of an object using the member selection operator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">To prove that the assignment worked, I display the critter<span class="s12">’</span>s hunger level.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;crit1’s hunger level is &quot; &lt;&lt; crit1.m_Hunger &lt;&lt; &quot;.\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding code displays <span class="s35">crit1</span><span class="s12">’</span>s data member <span class="s35">m_Hunger </span>and correctly shows <span class="s35">9</span>. Just like when you are assigning a value to an available data member, you can</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark912">260 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark951">&zwnj;</a><a name="bookmark952">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">get the value of an available data member through the member selection operator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I show that the same process works for another <span class="s35">Critter </span>object.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">crit2.m_Hunger = 3;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;crit2’s hunger level is &quot; &lt;&lt; crit2.m_Hunger &lt;&lt; &quot;.\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This time, I assign <span class="s35">3 </span>to <span class="s35">crit2</span><span class="s12">’</span>s data member <span class="s35">m_Hunger </span>and display it.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark913">So, </a><span class="s35">crit1 </span>and <span class="s35">crit2 </span>are both instances of <span class="s35">Critter</span>, and yet each exists independently and each has its own identity. Also, each has its own <span class="s35">m_Hunger </span>data member with its own value.<a name="bookmark953">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a308"><h1 href="#bookmark10">Calling Member Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Next, I again put the critters through their paces. I get the first critter to give a greeting.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">crit1.Greet();</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The  preceding  code  calls  <span class="s35">crit1</span><span class="s12">’</span>s  <span class="s35">Greet()   </span>member  function.  The  function accesses  the  calling  object<span class="s12">’</span>s  <span class="s35">m_Hunger  </span>data  member  to  form  the  greeting  it displays. Because <span class="s35">crit1</span><span class="s12">’</span>s <span class="s35">m_Hunger  </span>data member is <span class="s35">9</span>, the function displays the text: <span class="s35">Hi. I’m a critter. My hunger level is 9.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I get the second critter to speak up.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">crit2.Greet();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The  preceding  code  calls  <span class="s35">crit2</span><span class="s12">’</span>s  <span class="s35">Greet()   </span>member  function.  This  function accesses  the  calling  object<span class="s12">’</span>s  <span class="s35">m_Hunger  </span>data  member  to  form  the  greeting  it displays. Because <span class="s35">crit2</span><span class="s12">’</span>s <span class="s35">m_Hunger  </span>data member is <span class="s35">3</span>, the function displays the text: <span class="s35">Hi. I’m a critter. My hunger level is 3.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="s30" name="a309">Using Constructors</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When you instantiate objects, you often want to do some initialization<span class="s12">—</span>usually assigning values to data members. Luckily, a class has a special member function known as a <span class="s11">constructor </span>that is automatically called every time a new object is instantiated. This is a big convenience because you can use a constructor to perform an initialization of the new object.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark914">Using Constructors 261</a><a name="bookmark954">&zwnj;</a><a name="bookmark955">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="h1" name="a310">Introducing the Constructor Critter </a><h1 href="#bookmark10">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Constructor Critter program demonstrates constructors. The program instantiates a new critter object, which automatically invokes its constructor. First, the constructor announces that a new critter has been born. Then, it assigns the value passed to it to the critter<span class="s12">’</span>s hunger level. Finally, the program calls the critter<span class="s12">’</span>s greeting member function, which displays the critter<span class="s12">’</span>s hunger level, proving that the constructor did in fact initialize the critter. Figure 8.2 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_312.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 8.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Critter </span>constructor initializes a new object’s hunger level automatically.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 8 folder; the filename is <span class="s35">constructor_critter.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Constructor Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates constructors #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark956">262 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Hunger;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter(int hunger = 0); // constructor prototype void Greet();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::Critter(int hunger) // constructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark915">cout &lt;&lt; &quot;A new critter has been born!&quot; &lt;&lt; endl; m_Hunger = hunger;</a><a name="bookmark957">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Greet()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Hi. I’m a critter. My hunger level is &quot; &lt;&lt; m_Hunger &lt;&lt; &quot;.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Critter crit(7); crit.Greet();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark10" class="h1" name="a311">Declaring and Defining a </a><h1 href="#bookmark10">Constructor</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I declare a constructor in <span class="s35">Critter </span>with the following code:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">Critter(int hunger = 0); // constructor prototype</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you can see from the declaration, the constructor has no return type. It can<span class="s12">’</span>t<span class="s12">— </span>it<span class="s12">’</span>s illegal to specify a return type for a constructor. Also, you have no flexibility when naming a constructor. You have to give it the same name as the class itself.</p><p class="s24" style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_313.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">A <i>default constructor </i>requires no arguments. If you don’t define a default constructor, the compiler defines a minimal one for you that simply calls the default constructors of any data members of the class. If you write your own constructor, then the compiler won’t provide a default constructor for you. It’s usually a good idea to have a default constructor, so you should make sure to supply your own when necessary. One way to accomplish this is to supply default arguments for all parameters in a constructor definition.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_314.png"/></span></p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark958">Using Constructors 263</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">I define the constructor outside of the class with the following code:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::Critter(int hunger) // constructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;A new critter has been born!&quot; &lt;&lt; endl; m_Hunger = hunger;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark916">The constructor displays a message saying that a new critter has been born and initializes the object</a><span class="s12">’</span>s <span class="s35">m_Hunger </span>data member with the argument value passed to the constructor. If no value is passed, then the constructor uses the default argument value of <span class="s35">0</span>.<a name="bookmark959">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_315.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can use <i>member initializers </i>as a shorthand way to assign values to data members in a constructor. To write a member initializer, start with a colon after the constructor’s parameter list. Then type the name of the data member you want to initialize, followed by the expression you want to assign to the data member, surrounded by parentheses. If you have multiple initializers, separate them with commas. This is much simpler than it sounds (and it’s really useful, too). Here’s an example that assigns <span class="s35">hunger </span>to <span class="s35">m_Hunger </span>and <span class="s35">boredom </span>to <span class="s35">m_Boredom</span>. Member initializers are especially useful when you have many data members to initialize.</p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: -20pt;line-height: 119%;text-align: justify;">Critter::Critter(int hunger = 0, int boredom = 0): m_Hunger(hunger),</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">m_Boredom(boredom)</p><p class="s35" style="padding-top: 2pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{} // empty constructor body</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_316.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a312"><h1 href="#bookmark10">Calling a Constructor Automatically</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You don<span class="s12">’</span>t explicitly call a constructor; however, whenever you instantiate a new object, its constructor is automatically called. In <span class="s35">main()</span>, I put my constructor into action with the following code:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(7);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When <span class="s35">crit </span>is instantiated, its constructor is automatically called and the message <span class="s35">A new critter has been born!  </span>is displayed. Then, the constructor assigns <span class="s35">7  </span>to the object<span class="s12">’</span>s <span class="s35">m_Hunger </span>data member.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 114%;text-align: justify;">To prove that the constructor worked, back in <span class="s35">main()</span>, I call the object<span class="s12">’</span>s <span class="s35">Greet() </span>member  function  and  sure  enough,  it  displays  <span class="s35">Hi.  I’m  a  critter.  My  hunger level is 7.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark917">264 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark918">&zwnj;</a><a name="bookmark960">&zwnj;</a><a name="bookmark961">&zwnj;</a><a name="bookmark962">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a313">Setting Member Access Levels</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Like functions, you should treat objects as encapsulated entities. This means that, in general, you should avoid directly altering or accessing an object<span class="s12">’</span>s data members. Instead, you should call an object<span class="s12">’</span>s member functions, allowing the object to maintain its own data members and ensure their integrity. Fortunately, you can enforce data member restrictions when you define a class by setting member access levels.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="h1" name="a314">Introducing the Private Critter </a><h1 href="#bookmark11">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Private Critter program demonstrates class member access levels by declaring a class for critters that restricts direct access to an object<span class="s12">’</span>s data member for its hunger level. The class provides two member functions<span class="s12">—</span>one that allows access to the data member and one that allows changes to the data member. The program creates a new critter and indirectly accesses and changes the critter<span class="s12">’</span>s hunger level through these member functions. However, when the program attempts to change the critter<span class="s12">’</span>s hunger level to an illegal value, the member function that allows the changes catches the illegal value and doesn<span class="s12">’</span>t make the change. Finally, the program uses the hunger-level-setting member function with a legal value, which works like a charm. Figure 8.3 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_317.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 8.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">By using a <span class="s35">Critter </span>object’s <span class="s35">GetHunger() </span>and <span class="s35">SetHunger() </span>member functions, the program indirectly accesses an object’s <span class="s35">m_Hunger </span>data member.</p><p class="s19" style="padding-top: 2pt;padding-left: 291pt;text-indent: 0pt;text-align: left;">Setting Member Access Levels 265</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 8 folder; the filename is <span class="s35">private_critter.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Private Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates setting member access levels #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">public: // begin public section Critter(int hunger = 0);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">int GetHunger() const;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void SetHunger(int hunger);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">private:                    // begin private section int m_Hunger;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Critter::Critter(int hunger): m_Hunger(hunger)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;A new critter has been born!&quot; &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::GetHunger() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::SetHunger(int hunger)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (hunger &lt; 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You can’t set a critter’s hunger to a negative number.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark963">266 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Hunger = hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(5);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark919">//cout &lt;&lt; crit.m_Hunger;    //illegal, m_Hunger is private! cout &lt;&lt; &quot;Calling GetHunger(): &quot; &lt;&lt; crit.GetHunger() &lt;&lt; &quot;\n\n&quot;;</a><a name="bookmark964">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Calling SetHunger() with -1.\n&quot;; crit.SetHunger(-1);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Calling SetHunger() with 9.\n&quot;; crit.SetHunger(9);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Calling GetHunger(): &quot; &lt;&lt; crit.GetHunger() &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="a315">Specifying Public and Private Access </a><h1 href="#bookmark11">Levels</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Every class data member and member function has an access level, which determines from where in your program you can access it. So far, I<span class="s12">’</span>ve always specified class members to have public access levels using the keyword <span class="s35">public</span>. Again in <span class="s35">Critter</span>, I start a public section with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">public: // begin public section</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">By using <span class="s35">public:</span>, I<span class="s12">’</span>m saying that any data member or member function that follows (until another access level specifier) will be public. This means that any part of the program can access them. Because I declare all of the member functions in this section, it means that any part of my code can call any member function through a <span class="s35">Critter </span>object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I specify a private section with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">private: // begin private section</p><p class="s19" style="padding-top: 2pt;padding-left: 291pt;text-indent: 0pt;text-align: left;"><a name="bookmark965">Setting Member Access Levels 267</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By using <span class="s35">private:</span>, I<span class="s12">’</span>m saying that any data member or member function that follows (until another access level specifier) will be private. This means that only code in the <span class="s35">Critter </span>class can directly access it. Since I declare <span class="s35">m_Hunger </span>in this section, it means that only the code in <span class="s35">Critter </span>can directly access an object<span class="s12">’</span>s <span class="s35">m_Hunger </span>data member. Therefore, I can<span class="s12">’</span>t directly access an object<span class="s12">’</span>s <span class="s35">m_Hunger </span>data member through the object in <span class="s35">main() </span>as I<span class="s12">’</span>ve done in previous programs. So the following line in <span class="s35">main()</span>, if uncommented, would be an illegal statement:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//cout &lt;&lt; crit.m_Hunger;    //illegal, m_Hunger is private!</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark920">Because </a><span class="s35">m_Hunger </span>is private, I can<span class="s12">’</span>t access it from code that is not part of the <span class="s35">Critter </span>class. Again, only code that<span class="s12">’</span>s part of <span class="s35">Critter </span>can directly access the data member.<a name="bookmark966">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I<span class="s12">’</span>ve only shown you how to make data members private, but you can make member functions private, too. Also, you can repeat access modifiers. So if you want, you could have a private section, followed by a public section, followed by another private section in a class. Finally, member access is private by default. Until you specify an access modifier, any class members you declare will be private.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a316"><h1 href="#bookmark11">Defining Accessor Member Functions</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">An <span class="s11">accessor member function </span>allows indirect access to a data member. Because <span class="s35">m_Hunger </span>is private, I wrote an accessor member function, <span class="s35">GetHunger()</span>, to return the value of the data member. (For now, you can ignore the keyword <span class="s35">const</span>.)</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::GetHunger() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">I put the member function to work in <span class="s35">main() </span>with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Calling GetHunger(): &quot; &lt;&lt; crit.GetHunger() &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">In the preceding code, <span class="s35">crit.GetHunger() </span>simply returns the value of <span class="s35">crit</span><span class="s12">’</span>s <span class="s35">m_Hunger </span>data member, which is <span class="s35">5</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark967">268 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_318.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Just as you can with regular functions, you can inline member functions. One way to inline a member function is to define it right inside of the class definition, where you’d normally only declare the member function. If you include a member function definition in a class, then of course you don’t need to define it outside of the class.</p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">An exception to this rule is that when you define a member function in a class definition using the keyword <span class="s35">virtual</span>, the member function is not automatically inlined. You’ll learn about virtual functions in Chapter 10, “Inheritance and Polymorphism: Blackjack.”</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_319.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark921">At this point, you might be wondering why you</a><span class="s12">’</span>d go to the trouble of making a data member private only to grant full access to it through accessor functions. The answer is that you don<span class="s12">’</span>t generally grant full access. For example, take a look at the accessor member function I defined for setting an object<span class="s12">’</span>s <span class="s35">m_Hunger </span>data member, <span class="s35">SetHunger()</span>:<a name="bookmark968">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::SetHunger(int hunger)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (hunger &lt; 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;You can’t set a critter’s hunger to a negative number.\n\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Hunger = hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  this  accessor  member  function,  I  first  check  to  make  sure  that  the  value passed to the member function is greater than zero. If it<span class="s12">’</span>s not, it<span class="s12">’</span>s an illegal value and  I  display  a  message,  leaving  the  data  member  unchanged.  If  the  value  is greater than zero, then I make the change. This way, <span class="s35">SetHunger()  </span>protects the integrity of <span class="s35">m_Hunger</span>, ensuring that it can<span class="s12">’</span>t be set to a negative number. Just as I<span class="s12">’</span>ve done here, most game programmers begin their accessor member function names with <span class="s35">Get  </span>or <span class="s35">Set</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a317"><h1 href="#bookmark11">Defining Constant Member Functions</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">constant member function </span>can<span class="s12">’</span>t modify a data member of its class or call a non-constant member function of its class. Why restrict what a member function can do? Again, it goes back to the tenet of asking only for what you</p><p class="s19" style="padding-top: 2pt;padding-left: 191pt;text-indent: 0pt;text-align: left;"><a name="bookmark969">Using Static Data Members and Member Functions 269</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">need. If you don<span class="s12">’</span>t need to change any data members in a member function, then it<span class="s12">’</span>s a good idea to declare that member function to be constant. It protects you from accidentally altering a data member in the member function, and it makes your intentions clear to other programmers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_320.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark922">Okay, I lied a little. A constant member function can alter a static data member. You’ll learn about static data members a bit later in this chapter, in the “Declaring and Initializing Static Data Members” section. Also, if you qualify a data member with the </a><span class="s35">mutable </span>keyword, then even a constant member function can modify it. For now, though, don’t worry about either of these exceptions.<a name="bookmark970">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_321.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can declare a constant member function by putting the keyword <span class="s35">const </span>at the end of the function header. That<span class="s12">’</span>s what I do in <span class="s35">Critter </span>with the following line, which declares <span class="s35">GetHunger() </span>to be a constant member function.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int GetHunger() const;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This  means  that  <span class="s35">GetHunger()  </span>can<span class="s12">’</span>t  change  the  value  of  any  non-static  data member declared in the <span class="s35">Critter </span>class, nor can it call any non-constant <span class="s35">Critter </span>member function. I made <span class="s35">GetHunger()  </span>constant because it only returns a value and doesn<span class="s12">’</span>t need to modify any data member. Generally, <span class="s35">Get </span>member functions can be defined as constant.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a318">Using Static Data Members and Member Functions</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Objects are great because each instance stores its own set of data, giving it a unique identity. But what if you want to store some information about an entire class, such as the total number of instances that exist? You might want to do this if you<span class="s12">’</span>ve created a bunch of enemies and you want them to fight the player based on their total number. For example, if their total number is below a certain threshold, you might want the enemies to run away. You could store the total number of instances in each object, but that would be a waste of storage space. Plus, it would be cumbersome to update all of the objects as the total changes. Instead, what you really want is a way to store a single value for an entire class. You can do this with a static data member.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark923">270 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark971">&zwnj;</a><a name="bookmark972">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="a319">Introducing the Static Critter </a><h1 href="#bookmark11">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Static Critter program declares a new kind of critter with a static data member that stores the total number of critters that have been created. It also defines a static member function that displays the total. Before the program instantiates any new critter objects, it displays the total number of critters by directly accessing the static data member that holds the total. Next, the program instantiates three new critters. Then it displays the total number of critters by calling a static member function that accesses the static data member. Figure 8.4 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_322.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 8.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The program stores the total number of <span class="s35">Critter </span>objects in the static data member <span class="s35">s_Total </span>and accesses that data member in two different ways.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 8 folder; the filename is <span class="s35">static_critter.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Static Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates static member variables and functions #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 191pt;text-indent: 0pt;text-align: left;"><a name="bookmark973">Using Static Data Members and Member Functions 271</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">static int s_Total;            //static member variable declaration</p><p class="s35" style="padding-top: 2pt;padding-left: 187pt;text-indent: 0pt;text-align: left;">//total number of Critter objects in existence</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter(int hunger = 0);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">static int GetTotal();    //static member function prototype</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">int Critter::s_Total = 0;      //static member variable initialization Critter::Critter(int hunger):</p><p class="s35" style="padding-top: 1pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Hunger(hunger)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;A critter has been born!&quot; &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">++s_Total;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::GetTotal()          //static member function definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return s_Total;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;The total number of critters is: &quot;; cout &lt;&lt; Critter::s_Total &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit1, crit2, crit3;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nThe total number of critters is: &quot;; cout &lt;&lt; Critter::GetTotal() &lt;&lt; &quot;\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark924">272 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark974">&zwnj;</a><a name="bookmark975">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="a320">Declaring and Initializing Static Data </a><h1 href="#bookmark11">Members</h1></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">static data member </span>is a single data member that exists for the entire class. In the class definition, I declare a static data member <span class="s35">s_Total </span>to store the number of <span class="s35">Critter  </span>objects that have been instantiated.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">static int s_Total;          //static member variable declaration</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can declare your own static data members just like I did, by starting the declaration with the <span class="s35">static </span>keyword. I prefixed the variable name with <span class="s35">s_ </span>so it would be instantly recognizable as a static data member.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark925">Outside of the class definition, I initialize the static data member to </a><span class="s35">0</span>.<a name="bookmark976">&zwnj;</a></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::s_Total = 0;      //static member variable initialization</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice  that  I  qualified  the  data  member  name  with  <span class="s35">Critter::</span>.  Outside  of  its class definition, you must qualify a static data member with its class name. After the  previous  line  of  code  executes,  there  is  a  single  value  associated  with  the <span class="s35">Critter  </span>class, stored in its static data member <span class="s35">s_Total  </span>with a value of <span class="s35">0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_323.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can declare a static variable in non-class functions, too. The static variable maintains its value between function calls.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_324.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a321"><h1 href="#bookmark11">Accessing Static Data Members</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can access a public static data member anywhere in your program. In <span class="s35">main()</span>, I access <span class="s35">Critter::s_Total  </span>with the following line, which displays <span class="s35">0</span>, the value of the static data member and the total number of <span class="s35">Critter  </span>objects that have been instantiated.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; Critter::s_Total &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_325.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can also access a static data member through any object of the class. Assuming that <span class="s35">crit1 </span>is a <span class="s35">Critter </span>object, I could display the total number of critters with the following line:</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; crit1.s_Total &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_326.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I also access this static data member in the <span class="s35">Critter </span>constructor with the following line, which increments <span class="s35">s_Total</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">++s_Total;</p><p class="s19" style="padding-top: 2pt;padding-left: 191pt;text-indent: 0pt;text-align: left;"><a name="bookmark926">Using Static Data Members and Member Functions 273</a><a name="bookmark977">&zwnj;</a><a name="bookmark978">&zwnj;</a><a name="bookmark979">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This means that every time a new object is instantiated, <span class="s35">s_Total </span>is incremented. Notice that I didn<span class="s12">’</span>t qualify <span class="s35">s_Total </span>with <span class="s35">Critter::</span>. Just as with non-static data members,  you  don<span class="s12">’</span>t  have  to  qualify  a  static  data  member  with  its  class  name inside its class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although I made my static data member public, you can make a static data member private<span class="s12">—</span>but then, like any other data member, you can only access it in a class member function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="bookmark927">Declaring and Defining Static Member </a><h1 href="#bookmark11">Functions</h1><a name="bookmark980">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">static member function </span>exists for the entire class. I declare a static member function in <span class="s35">Critter </span>with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">static int GetTotal();    //static member function prototype</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You can declare your own static member function like I did, by starting the declaration with the keyword <span class="s35">static</span>. Static member functions are often written to work with static data members.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I define the static member function <span class="s35">GetTotal() </span>that returns the value of the static data member <span class="s35">s_Total</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Critter::GetTotal()          //static member function definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return s_Total;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A static member function definition is much like the non-static member function definitions you<span class="s12">’</span>ve seen so far. The major difference is that a static member function cannot access non-static data members. This is because a static member function exists for the entire class and is not associated with any particular instance of the class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a322"><h1 href="#bookmark11">Calling Static Member Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After I instantiate three <span class="s35">Critter </span>objects in <span class="s35">main()</span>, I reveal the total number of critters again with the following line, which displays <span class="s35">3</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; Critter::GetTotal() &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To properly identify the static member function, I had to qualify it with <span class="s35">Critter::</span>. To call a static member function from outside of its class, you must qualify it with its class name.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark928">274 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark981">&zwnj;</a><a name="bookmark982">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_327.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can also access a static member function through any object of the class. Assuming that</p><p class="s35" style="padding-left: 59pt;text-indent: 0pt;text-align: left;">crit1 <span class="s19">is a </span>Critter <span class="s19">object, I could display the total number of critters with the following line:</span></p><p class="s35" style="padding-top: 6pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; crit1.GetTotal() &lt;&lt; &quot;\n\n&quot;;</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_328.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because static member functions exist for the entire class, you can call a static member function without any instances of the class in existence. And just as with private static data members, private static member functions can only be accessed by other member functions of the same class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s30" name="a323">Introducing the Critter Caretaker Game</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Critter Caretaker game puts the player in charge of his own virtual pet. The player is completely responsible for keeping the critter happy, which is no small task. He can feed and play with the critter to keep it in a good mood. He can also listen to the critter to learn how the critter is feeling, which can range from happy to mad. Figure 8.5 shows off the game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="295" alt="image" src="Image_329.gif"/></span></p><p class="s37" style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 8.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">If you fail to feed or entertain your critter, it will have a mood change for the worse. (But don’t worry— with the proper care, your critter can return to a sunny mood.)</p><p class="s19" style="padding-top: 2pt;padding-left: 244pt;text-indent: 0pt;text-align: left;"><a name="bookmark929">Introducing the Critter Caretaker Game 275</a><a name="bookmark983">&zwnj;</a><a name="bookmark984">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 8 folder; the filename is <span class="s35">critter_caretaker.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a324"><h1 href="#bookmark11">Planning the Game</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The core of the game is the critter itself. Therefore, I first plan my <span class="s35">Critter </span>class. Because I want the critter to have independent hunger and boredom levels, I know that the class will have private data members for those.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">m_Hunger</span></p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">m_Boredom</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The critter should also have a mood, directly based on its hunger and boredom levels. My first thought was to have a private data member, but a critter<span class="s12">’</span>s mood is really a calculated value based on its hunger and boredom. Instead, I decided to have a private member function that calculates a critter<span class="s12">’</span>s mood on the fly, based on its current hunger and boredom levels:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">GetMood()</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I think about public member functions. I want the critter to be able to tell the player how it<span class="s12">’</span>s feeling. I also want the player to be able to feed and play with the critter to reduce its hunger and boredom levels. I need three public member functions to accomplish each of these tasks.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;line-height: 178%;text-align: left;">n <span class="s35">Talk() </span>n <span class="s35">Eat() </span>n <span class="s35">Play()</span></p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Finally, I want another member function that simulates the passage of time, to make the critter a little more hungry and bored:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">PassTime()</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I see this member function as private because it will only be called by other member functions, such as <span class="s35">Talk()</span>, <span class="s35">Eat()</span>, or <span class="s35">Play()</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The class will also have a constructor to initialize data members. Take a look at Figure 8.6, which models the <span class="s35">Critter </span>class. I preface each data member and</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark985">276 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark986">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">member function with a symbol to indicate its access level; I use <span class="s35">+ </span>for public and</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">– <span class="p">for private.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="180" height="319" alt="image" src="Image_330.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark930">Figure 8.6</a><a name="bookmark987">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Model for the <span class="s35">Critter </span>class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a325"><h1 href="#bookmark11">Planning the Pseudocode</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The rest of the program will be pretty simple. It<span class="s12">’</span>ll basically be a game loop that asks the player whether he wants to listen to, feed, or play with the critter, or quit the game. Here<span class="s12">’</span>s the pseudocode I came up with:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Create a critter</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">While the player doesn’t want to quit the game Present a menu of choices to the player</p><p class="s35" style="padding-left: 82pt;text-indent: -20pt;line-height: 118%;text-align: left;">If the player wants to listen to the critter Make the critter talk</p><p class="s35" style="padding-left: 82pt;text-indent: -20pt;line-height: 118%;text-align: left;">If the player wants to feed the critter Make the critter eat</p><p class="s35" style="padding-left: 82pt;text-indent: -20pt;line-height: 118%;text-align: left;">If the player wants to play with the critter Make the critter play</p><p class="s19" style="padding-top: 2pt;padding-left: 244pt;text-indent: 0pt;text-align: left;"><a name="bookmark931">Introducing the Critter Caretaker Game 277</a><a name="bookmark988">&zwnj;</a><a name="bookmark989">&zwnj;</a><a name="bookmark990">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a326"><h1 href="#bookmark11">The Critter Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Critter </span>class is the blueprint for the object that represents the player<span class="s12">’</span>s critter. The class isn<span class="s12">’</span>t complicated, and most of it should look familiar, but it<span class="s12">’</span>s long enough that it makes sense to attack it in pieces.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Class Definition</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">After some initial comments and statements, I begin the <span class="s35">Critter </span>class.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Critter Caretaker</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Simulates caring for a virtual pet #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter(int hunger = 0, int boredom = 0); void Talk();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">void Eat(int food = 4); void Play(int fun = 4);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int m_Hunger; int m_Boredom;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int GetMood() const;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void PassTime(int time = 1);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">m_Hunger </span>is a private data member that represents the critter<span class="s12">’</span>s hunger level while <span class="s35">m_Boredom </span>is a private data member that represents its boredom level. I<span class="s12">’</span>ll go through each member function in its own section.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Class Constructor</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The constructor takes two arguments, <span class="s35">hunger </span>and <span class="s35">boredom</span>. The arguments each have a default value of zero, which I specified in the constructor prototype back</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark991">278 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">in the class definition. I use <span class="s35">hunger </span>to initialize <span class="s35">m_Hunger </span>and <span class="s35">boredom </span>to initialize <span class="s35">m_Boredom</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Critter::Critter(int hunger, int boredom): m_Hunger(hunger),</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">m_Boredom(boredom)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The GetMood() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, I define <span class="s35">GetMood()</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">inline int Critter::GetMood() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (m_Hunger + m_Boredom);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The return value of this inlined member function represents a critter<span class="s12">’</span>s mood. As the sum of a critter<span class="s12">’</span>s hunger and boredom levels, a critter<span class="s12">’</span>s mood gets worse as the number increases. I made this member function private because it should only be invoked by another member function of the class. I made it constant since it won<span class="s12">’</span>t result in any changes to data members.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The PassTime() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">PassTime() </span>is a private member function that increases a critter<span class="s12">’</span>s hunger and boredom levels. It<span class="s12">’</span>s invoked at the end of each member function where the critter does something (eats, plays, or talks) to simulate the passage of time. I made this member function private because it should only be invoked by another member function of the class.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::PassTime(int time)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">m_Hunger += time; m_Boredom += time;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can pass the member function the amount of time that has passed; otherwise, <span class="s35">time </span>gets the default argument value of <span class="s35">1</span>, which I specify in the member function prototype in the <span class="s35">Critter </span>class definition.</p><p class="s19" style="padding-top: 2pt;padding-left: 244pt;text-indent: 0pt;text-align: left;"><a name="bookmark992">Introducing the Critter Caretaker Game 279</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Talk() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Talk() </span>member function announces the critter<span class="s12">’</span>s mood, which can be happy, okay, frustrated, or mad. <span class="s35">Talk() </span>calls <span class="s35">GetMood() </span>and, based on the return value, displays the appropriate message to indicate the critter<span class="s12">’</span>s mood. Finally, <span class="s35">Talk() </span>calls <span class="s35">PassTime() </span>to simulate the passage of time.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Talk()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;I’m a critter and I feel &quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int mood = GetMood(); if (mood &gt; 15)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;mad.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (mood &gt; 10)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;frustrated.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else if (mood &gt; 5)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;okay.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;happy.\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Eat() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">Eat() </span>reduces a critter<span class="s12">’</span>s hunger level by the amount passed to the parameter <span class="s35">food</span>. If no value is passed, <span class="s35">food </span>gets the default argument value of <span class="s35">4</span>. The critter<span class="s12">’</span>s hunger level is kept in check and is not allowed to go below zero. Finally, <span class="s35">PassTime() </span>is called to simulate the passage of time.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Eat(int food)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Brruppp.\n&quot;; m_Hunger -= food;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark993">280 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_Hunger &lt; 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Hunger = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Play() Member Function</h3><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark932"><span class="s35">Play() </span></a>reduces a critter<span class="s12">’</span>s boredom level by the amount passed to the parameter <span class="s35">fun</span>. If no value is passed, <span class="s35">fun </span>gets the default argument value of <span class="s35">4</span>. The critter<span class="s12">’</span>s boredom level is kept in check and is not allowed to go below zero. Finally, <span class="s35">PassTime() </span>is called to simulate the passage of time.<a name="bookmark994">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Play(int fun)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Wheee!\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">m_Boredom -= fun; if (m_Boredom &lt; 0)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Boredom = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">PassTime();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a327"><h1 href="#bookmark11">The main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  <span class="s35">main()</span>,  I  instantiate  a  new  <span class="s35">Critter  </span>object.  Because  I  don<span class="s12">’</span>t  supply  values for  <span class="s35">m_Hunger  </span>or  <span class="s35">m_Boredom</span>,  the  data  members  start  out  at  <span class="s35">0</span>,  and  the  critter begins  life  happy  and  content.  Next,  I  create  a  menu  system.  If  the  player enters <span class="s35">0</span>, the program ends. If the player enters <span class="s35">1</span>, the program calls the object<span class="s12">’</span>s <span class="s35">Talk()  </span>member  function.  If  the  player  enters  <span class="s35">2</span>,  the  program  calls  the  object<span class="s12">’</span>s <span class="s35">Eat() </span>member function. If the player enters <span class="s35">3</span>, the program calls the object<span class="s12">’</span>s <span class="s35">Play() </span>member  function.  If  the  player  enters  anything  else,  he  is  told  that  the  choice is invalid.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter crit; crit.Talk();</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark995">Summary 281</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int choice; do</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nCritter Caretaker\n\n&quot;; cout &lt;&lt; &quot;0 - Quit\n&quot;;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;1 - Listen to your critter\n&quot;; cout &lt;&lt; &quot;2 - Feed your critter\n&quot;;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;3 - Play with your critter\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark933">cout &lt;&lt; &quot;Choice: &quot;; cin &gt;&gt; choice;</a><a name="bookmark996">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">switch (choice)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">case 0:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Good-bye.\n&quot;; break;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">case 1:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">crit.Talk(); break;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">case 2:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 118%;text-align: left;">crit.Eat(); break;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">case 3:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">crit.Play(); break;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">default:</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nSorry, but &quot; &lt;&lt; choice &lt;&lt; &quot; isn’t a valid choice.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">} while (choice != 0);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a328">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 10pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: justify;">n <span class="p">Object-oriented programming (OOP) is a way of thinking about programming in which you define different types of objects with relationships that interact with each other.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark997">282 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker<a name="bookmark998">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can create a new type by defining a class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A class is a blueprint for an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">In a class, you can declare data members and member functions.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>When you define a member function outside of a class definition, you need to qualify it with the class name and scope resolution operator (<span class="s35">::</span>).</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can inline a member function by defining it directly in the class definition.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n   </span>You can access data members and member functions of objects through the member selection operator (<span class="s35">.</span>).</p><p style="padding-top: 5pt;padding-left: 64pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>Every class has a constructor<span class="s12">—</span>a special member function that<span class="s12">’</span>s automatically called every time a new object is instantiated. Constructors are often used to initialize data members.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A default constructor requires no arguments. If you don<span class="s12">’</span>t provide a constructor definition in your class, the compiler will create a default constructor for you.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Member initializers provide shorthand to assign values to data members in a constructor.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>You can set member access levels in a class by using the keywords <span class="s35">public</span>, <span class="s35">private</span>, and <span class="s35">protected</span>. (You<span class="s12">’</span>ll learn about <span class="s35">protected </span>in Chapter 9, <span class="s12">“</span>Advanced Classes and Dynamic Memory: Game Lobby.<span class="s12">”</span>)</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A public member can be accessed by any part of your code through an object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A private member can only be accessed by a member function of that class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">An accessor member function allows indirect access to a data member.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A static data member exists for the entire class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">A static member function exists for the entire class.</span></p><p style="padding-top: 5pt;padding-left: 64pt;text-indent: -11pt;line-height: 106%;text-align: justify;"><span class="s29">n </span>Some game programmers prefix private data member names with <span class="s35">m_ </span>and static data member names with <span class="s35">s_ </span>so that they<span class="s12">’</span>re instantly recognizable.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark934">Questions and Answers 283</a><a name="bookmark999">&zwnj;</a><a name="bookmark1000">&zwnj;</a><a name="bookmark1001">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A constant member function can<span class="s12">’</span>t modify non-static data members or call non-constant member functions of its class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s30" name="a329">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is procedural programming?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: A paradigm where tasks are broken down into a series of smaller tasks and implemented in manageable chunks of code, such as functions. In procedural programming, functions and data are separate.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is an object?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: An entity that combines data and functions. Q: Why create objects?</p><p style="padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: Because the world<span class="s12">—</span>and especially game worlds<span class="s12">—</span>are full of objects. By creating your own types, you can represent objects and their relationships to other objects more directly and intuitively than you might be able to otherwise.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is object-oriented programming?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">A: A paradigm where work is accomplished through objects. It allows pro- grammers to define their own types of objects. The objects usually have relationships to each other and can interact.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">Q: Is C++ an object-oriented programming language or a procedural program- ming language?</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: justify;">A: C++ is a multi-paradigm programming language. It allows a game pro- grammer to write games in a procedural way or an object-oriented way<span class="s12">—</span>or through a combination of both (to name just a few options).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Should I always try to write object-oriented game programs?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Although object-oriented programming is used in almost every commercial game on the market, you don<span class="s12">’</span>t have to write games using this paradigm. C++ lets you use one of several programming paradigms. In general, though, large game projects will almost surely benefit from an object-oriented approach.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1002">284 Chapter 8 </a><span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why not make all class members public?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: Because it goes against the idea of encapsulation. Q: What is encapsulation?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: The quality of being self-contained. In the world of OOP, encapsulation prevents client code from directly accessing the internals of an object. Instead, it encourages client code to use a defined interface to the object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are the benefits of encapsulation?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: In the world of OOP, encapsulation protects the integrity of an object. For example, you might have a spaceship object with a fuel data member. By preventing direct access to this data member, you can guarantee that it never becomes an illegal value (such as a negative number).</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: justify;">Q: Should I provide access to data members through accessor member functions?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Some game programmers say you should never provide access to data members through accessor member functions because even though this kind of access is indirect, it goes against the idea of encapsulation. Instead, they say you should write classes with member functions that provide the client with all of the functionality it could need, eliminating the client<span class="s12">’</span>s need to access a specific data member.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What are mutable data members?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Data members that can be modified even by constant member functions. You create a mutable data member using the keyword <span class="s35">mutable</span>. You can also modify a mutable data member of a constant object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why is it useful to have a default constructor?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: Because there might be times when objects are automatically created without any argument values passed to a constructor<span class="s12">—</span>for example, when you create an array of objects.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: What is a structure?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A structure is very similar to a class. The only real difference is that the default access level for structures is public. You define a structure by using the keyword <span class="s35">struct</span>.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark935">Exercises 285</a><a name="bookmark1003">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">Q: Why does C++ have both structures and classes? A: So that C++ retains backward compatibly with C. Q: When should I use structures?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Some game programmers use structures to group only data together, without functions (because that<span class="s12">’</span>s how C structures work). But it<span class="s12">’</span>s probably best to avoid structures whenever possible and use classes instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a330">Discussion Questions</a></p><ol id="l19"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><a name="bookmark936">What are the advantages and disadvantages of procedural programming?</a><a name="bookmark1004">&zwnj;</a></p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">What are the advantages and disadvantages of object-oriented programming?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Are accessor member functions a sign of poor class design? Explain.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How are constant member functions helpful to a game programmer?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">When is it a good idea to calculate an object<span class="s12">’</span>s attribute on the fly rather than storing it as a data member?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a331">Exercises</a></p><ol id="l20"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Improve the Critter Caretaker program so that you can enter an unlisted menu choice that reveals the exact values of the critter<span class="s12">’</span>s hunger and boredom levels.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Change the Critter Caretaker program so that the critter is more expressive about its needs by hinting at how hungry and bored it is.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What design problem does the following program have?</p></li></ol><p class="s35" style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 66pt;text-indent: 0pt;text-align: left;">class Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 87pt;text-indent: 0pt;text-align: left;">int GetHunger() const {return m_Hunger;}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">286 Chapter 8 <span class="s32">n </span>Classes: Critter Caretaker</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">int m_Hunger;</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 67pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">Critter crit;</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; crit.GetHunger() &lt;&lt; endl; return 0;</p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s27" name="bookmark1005">chapter 9</a><a name="bookmark1037">&zwnj;</a><a name="bookmark1038">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_331.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s28" name="bookmark1006">Advanced Classes and Dynamic Memory: Game Lobby</a><a name="bookmark1039">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">C++ gives a game programmer a high degree of control over the computer. One of the most fundamental abilities is direct control over memory. In this chapter, you<span class="s12">’</span>ll learn about <span class="s11">dynamic memory</span><span class="s12">—</span>memory that you manage yourself. But with great power comes great responsibility, so you<span class="s12">’</span>ll also see the pitfalls of dynamic memory and how to avoid them. You<span class="s12">’</span>ll learn a few more things about classes, too. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Combine objects</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use friend functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Overload operators</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Dynamically allocate and free memory</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Avoid memory leaks</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Produce deep copies of objects</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s30" name="a332">Using Aggregation</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Game objects are often composed of other objects. For example, in a racing game, a drag racer could be seen as a single object composed of other individual objects, such as a body, four tires, and an engine. Other times, you might see an object as a collection of related objects. In a zookeeper simulation, you might see the zoo as a collection of an arbitrary number of animals. You can mimic these</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 9pt;text-indent: 0pt;text-align: right;">287</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1007">288 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1040">&zwnj;</a><a name="bookmark1041">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">kinds of relationships among objects in OOP using <span class="s11">aggregation</span><span class="s12">—</span>the combining of  objects  so  that  one  is  part  of  another.  For  example,  you  could  write  a <span class="s35">Drag_Racer  </span>class  that  has  an  <span class="s35">engine  </span>data  member  that<span class="s12">’</span>s  an  <span class="s35">Engine  </span>object.  Or, you could write a <span class="s35">Zoo </span>class that has an <span class="s35">animals </span>data member that is a collection of <span class="s35">Animal  </span>objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="a333">Introducing the Critter Farm </a><h1 href="#bookmark11">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Critter Farm program defines a new kind of critter with a name. After the program announces a new critter<span class="s12">’</span>s name, it creates a critter farm<span class="s12">—</span>a collection of critters. Finally, the program calls roll on the farm and each critter announces its name. Figure 9.1 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_332.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 9.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The critter farm is a collection of critters, each with a name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">critter_farm.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Critter Farm</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates object containment</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Using Aggregation 289</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; class Critter</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter(const string&amp; name = &quot;&quot;); string GetName() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Critter::Critter(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">inline string Critter::GetName() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Farm</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Farm(int spaces = 1);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">void Add(const Critter&amp; aCritter); void RollCall() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;Critter&gt; m_Critters;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Farm::Farm(int spaces)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Critters.reserve(spaces);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Farm::Add(const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Critters.push_back(aCritter);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1042">290 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Farm::RollCall() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: -26pt;line-height: 118%;text-align: left;">for (vector&lt;Critter&gt;::const_iterator iter = m_Critters.begin(); iter != m_Critters.end();</p><p class="s35" style="padding-left: 88pt;text-indent: 0pt;text-align: left;">++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; iter-&gt;GetName() &lt;&lt; &quot; here.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1008">int main()</a><a name="bookmark1043">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(&quot;Poochie&quot;);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;My critter’s name is &quot; &lt;&lt; crit.GetName() &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nCreating critter farm.\n&quot;; Farm myFarm(3);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nAdding three critters to the farm.\n&quot;; myFarm.Add(Critter(&quot;Moe&quot;)); myFarm.Add(Critter(&quot;Larry&quot;)); myFarm.Add(Critter(&quot;Curly&quot;));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nCalling Roll<span class="s56">.. .</span>\n&quot;; myFarm.RollCall();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a334"><h1 href="#bookmark11">Using Object Data Members</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One way to use aggregation when you<span class="s12">’</span>re defining a class is to declare a data member that can hold another object. That<span class="s12">’</span>s what I did in <span class="s35">Critter </span>with the following line, which declares the data member <span class="s35">m_Name </span>to hold a <span class="s35">string </span>object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Generally, you use aggregation when an object has another object. In this case, a critter has a name. These kinds of relationships are called <span class="s11">has-a </span>relationships.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1044">Using Aggregation 291</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">I put the declaration for the critter<span class="s12">’</span>s name to use when I instantiate a new object with:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(&quot;Poochie&quot;);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">which calls the <span class="s35">Critter </span>constructor:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Critter::Critter(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1009">By passing the string literal </a><span class="s35">&quot;Poochie&quot;</span>, the constructor is called and a <span class="s35">string </span>object for the name is instantiated, which the constructor assigns to <span class="s35">m_Name</span>. A new critter named Poochie is born.<a name="bookmark1045">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, I display the critter<span class="s12">’</span>s name with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;My critter’s name is &quot; &lt;&lt; crit.GetName() &lt;&lt; endl;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The code <span class="s35">crit.GetName() </span>returns a copy of the <span class="s35">string </span>object for the name of the critter, which is then sent to <span class="s35">cout </span>and displayed on the screen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a335"><h1 href="#bookmark11">Using Container Data Members</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can also use containers as data members for your objects. That<span class="s12">’</span>s what I do when I define <span class="s35">Farm</span>. The single data member I declare for the class is simply a vector that holds <span class="s35">Critter </span>objects called <span class="s35">m_Critter</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;Critter&gt; m_Critters;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When I instantiate a new <span class="s35">Farm </span>object with:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Farm myFarm(3);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">it calls the constructor:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Farm::Farm(int spaces)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Critters.reserve(spaces);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">which allocates memory for three <span class="s35">Critter </span>objects in the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">m_Critter</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">vector.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">Next, I add three critters to the farm by calling the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">Add() </span>member function.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1046">292 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">myFarm.Add(Critter(&quot;Moe&quot;)); myFarm.Add(Critter(&quot;Larry&quot;)); myFarm.Add(Critter(&quot;Curly&quot;));</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The following member function accepts a constant reference to a <span class="s35">Critter </span>object and adds a copy of the object to the <span class="s35">m_Critters </span>vector.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Farm::Add(const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark1010">m_Critters.push_back(aCritter);</a><a name="bookmark1047">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1011">Tra p</a><a name="bookmark1048">&zwnj;</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_333.png"/></span></p><p class="s35" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">push_back() <span class="s19">adds a copy of an object to a vector—this means that I create an extra copy of each </span>Critter <span class="s19">object every time I call </span>Add()<span class="s19">. This is no big deal in the Critter Farm program, but if I were adding many large objects, it could become a performance issue. You can reduce this overhead by using, say, a vector of pointers to objects. You’ll see how to work with pointers to objects later in this chapter.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_334.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, I take roll through the <span class="s35">Farm </span>object<span class="s12">’</span>s <span class="s35">RollCall() </span>member function.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">myFarm.RollCall();</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This iterates through the vector, calling each <span class="s35">Critter </span>object<span class="s12">’</span>s <span class="s35">GetName() </span>member function and getting each critter to speak up and say its name.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a336">Using Friend Functions and Operator Overloading</a></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Friend functions and operator overloading are two advanced concepts related to classes. <span class="s11">Friend functions </span>have complete access to any member of a class. <span class="s11">Operator overloading </span>allows you to define new meanings for built-in operators as they relate to objects of your own classes. As you<span class="s12">’</span>ll see, you can use these two concepts together.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="h1" name="a337">Introducing the Friend Critter </a><h1 href="#bookmark11">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Friend Critter program creates a critter object. It then uses a friend function, which is able to directly access the private data member that stores the critter<span class="s12">’</span>s name to display the critter<span class="s12">’</span>s name. Finally, the program displays the critter object by sending the object to the standard output. This is accomplished</p><p class="s19" style="padding-top: 2pt;padding-left: 195pt;text-indent: 0pt;text-align: left;">Using Friend Functions and Operator Overloading 293</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">through a friend function and operator overloading. Figure 9.2 displays the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_335.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 9.2</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The name of the critter is displayed through a friend function, and the <span class="s35">critter </span>object is displayed by sending it to the standard output.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">friend_critter.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">//Friend Critter</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates friend functions and operator overloading</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; class Critter</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//make following global functions friends of the Critter class friend void Peek(const Critter&amp; aCritter);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter);</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1049">294 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter(const string&amp; name = &quot;&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Critter::Critter(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Peek(const Critter&amp; aCritter);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit(&quot;Poochie&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Calling Peek() to access crit’s private data member, m_Name: \n&quot;; Peek(crit);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nSending crit object to cout with the &lt;&lt; operator:\n&quot;; cout &lt;&lt; crit;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//global friend function which can access all of a Critter object’s members void Peek(const Critter&amp; aCritter)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; aCritter.m_Name &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//global friend function which can access all of Critter object’s members</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">//overloads the &lt;&lt; operator so you can send a Critter object to cout ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;Critter Object - &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">os &lt;&lt; &quot;m_Name: &quot; &lt;&lt; aCritter.m_Name; return os;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 195pt;text-indent: 0pt;text-align: left;"><a name="bookmark1012">Using Friend Functions and Operator Overloading 295</a><a name="bookmark1050">&zwnj;</a><a name="bookmark1051">&zwnj;</a><a name="bookmark1052">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a338"><h1 href="#bookmark11">Creating Friend Functions</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A friend function can access any member of a class of which it<span class="s12">’</span>s a friend. You specify that a function is a friend of a class by listing the function prototype preceded by the keyword <span class="s35">friend </span>inside the class definition. That<span class="s12">’</span>s what I do inside the <span class="s35">Critter </span>definition with the following line, which says that the global function <span class="s35">Peek() </span>is a friend of <span class="s35">Critter</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend void Peek(const Critter&amp; aCritter);</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1013">This means </a><span class="s35">Peek() </span>can access any member of <span class="s35">Critter </span>even though it<span class="s12">’</span>s not a member function of the class. <span class="s35">Peek() </span>takes advantage of this relationship by accessing the private data member <span class="s35">m_Name </span>to display the name of a critter passed to the function.<a name="bookmark1053">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Peek(const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; aCritter.m_Name &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">When I call <span class="s35">Peek() </span>in <span class="s35">main() </span>with the following line, the private data member</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">m_Name <span class="p">of </span>crit <span class="p">is displayed and </span>Poochie <span class="p">appears on the screen.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Peek(crit);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a339"><h1 href="#bookmark11">Overloading Operators</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Overloading operators might sound like something you want to avoid at all costs<span class="s12">—</span>as in, <span class="s12">“</span>Look out, that operator is overloaded and she<span class="s12">’</span>s about to blow!<span class="s12">”— </span>but it<span class="s12">’</span>s not. Operator overloading lets you give meaning to built-in operators used with new types that you define. For example, you could overload the <span class="s35">* </span>operator so that when it is used with two 3D matrices (objects instantiated from some class that you<span class="s12">’</span>ve defined), the result is the multiplication of the matrices.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To overload an operator, define a function called <span class="s35">operatorX</span>, where <span class="s35">X </span>is the operator you want to overload. That<span class="s12">’</span>s what I do when I overload the <span class="s35">&lt;&lt; </span>operator; I define a function named <span class="s35">operator&lt;&lt;</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;Critter Object - &quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">os &lt;&lt; &quot;m_Name: &quot; &lt;&lt; aCritter.m_Name; return os;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1054">296 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1055">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function overloads the <span class="s35">&lt;&lt; </span>operator so that when I send a <span class="s35">Critter </span>object with the <span class="s35">&lt;&lt; </span>to <span class="s35">cout</span>, the data member <span class="s35">m_Name </span>is displayed. Essentially, the function allows me to easily display <span class="s35">Critter </span>objects. The function can directly access the private data member <span class="s35">m_Name </span>of a <span class="s35">Critter </span>object because I made the function a friend of the <span class="s35">Critter </span>class with the following line in <span class="s35">Critter</span>:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Critter&amp; aCritter);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This means I can simply display a <span class="s35">Critter </span>object by sending it to <span class="s35">cout </span>with the</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1014">&lt;&lt; </a><span class="p">operator, which is what I do in </span>main() <span class="p">with the following line, which displays the text </span>Critter Object – m_Name: Poochie<span class="p">.</span><a name="bookmark1056">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; crit;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_336.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">With all the tools and debugging options available to game programmers, sometimes simply displaying the values of variables is the best way to understand what’s happening in your programs. Overloading the <span class="s35">&lt;&lt; </span>operator can help you do that.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_337.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This function works because <span class="s35">cout </span>is of the type <span class="s35">ostream</span>, which already overloads the <span class="s35">&lt;&lt; </span>operator so that you can send built-in types to <span class="s35">cout</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark11" class="s30" name="a340">Dynamically Allocating Memory</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">So far, whenever you<span class="s12">’</span>ve declared a variable, C++ has allocated the necessary memory for it. When the function that the variable was created in ended, C++ freed the memory. This memory, which is used for local variables, is called the <span class="s11">stack</span>. But there<span class="s12">’</span>s another kind of memory that persists independent of the functions in a program. You, the programmer, are in charge of allocating and freeing this memory, collectively called the <span class="s11">heap </span>(or <span class="s11">free store</span>).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point, you might be thinking, <span class="s12">“</span>Why bother with another type of memory? The stack works just fine, thank you.<span class="s12">” </span>Using the dynamic memory of the heap offers great benefits that can be summed up in one word: efficiency. By using the heap, you can use only the amount of memory you need at any given time. If you have a game with a level that has 100 enemies, you can allocate the memory for the enemies at the beginning of the level and free the memory at the end. The heap also allows you to create an object in one function that you can access even after that function ends (without having to return a copy of the</p><p class="s19" style="padding-top: 2pt;padding-left: 282pt;text-indent: 0pt;text-align: left;"><a name="bookmark1015">Dynamically Allocating Memory 297</a><a name="bookmark1057">&zwnj;</a><a name="bookmark1058">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">object). You might create a screen object in one function and return access to it. You<span class="s12">’</span>ll find that dynamic memory is an important tool in writing any significant game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a341"><h1 href="#bookmark11">Introducing the Heap Program</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The Heap program demonstrates dynamic memory. The program dynamically allocates memory on the heap for an integer variable, assigns it a value, and then displays it. Next, the program calls a function that dynamically allocates memory on the heap for another integer variable, assigns it a value, and returns a pointer to it. The program takes the returned pointer, uses it to display the value, and then frees the allocated memory on the heap. Finally, the program contains two functions that demonstrate the misuse of dynamic memory. I don<span class="s12">’</span>t call these functions, but I use them to illustrate what <span class="s11">not </span>to do with dynamic memory. Figure 9.3 shows the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_338.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 9.3</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The two <span class="s35">int </span>values are stored on the heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">heap.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Heap</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">// Demonstrates dynamically allocating memory</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">298 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">int* intOnHeap(); //returns an int on the heap void leak1(); //creates a memory leak</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">void leak2(); //creates another memory leak</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* pHeap = new int;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">*pHeap = 10;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pHeap: &quot; &lt;&lt; *pHeap &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">int* pHeap2 = intOnHeap();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pHeap2: &quot; &lt;&lt; *pHeap2 &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Freeing memory pointed to by pHeap.\n\n&quot;; delete pHeap;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Freeing memory pointed to by pHeap2.\n\n&quot;; delete pHeap2;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//get rid of dangling pointers pHeap = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">pHeap2 = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* intOnHeap()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int* pTemp = new int(20); return pTemp;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void leak1()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* drip1 = new int(30);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 282pt;text-indent: 0pt;text-align: left;"><a name="bookmark1016">Dynamically Allocating Memory 299</a><a name="bookmark1059">&zwnj;</a><a name="bookmark1060">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void leak2()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int* drip2 = new int(50); drip2 = new int(100); delete drip2;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a342"><h1 href="#bookmark11">Using the new Operator</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">new </span>operator allocates memory on the heap and returns its address. You use <span class="s35">new </span>followed by the type of value you want to reserve space for. That<span class="s12">’</span>s what I do in the first line of <span class="s35">main()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap = new int;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">new int </span>part of the statement allocates enough memory on the heap for one <span class="s35">int </span>and returns the address on the heap for that chunk of memory. The other part of the statement, <span class="s35">int* pHeap</span>, declares a local pointer, <span class="s35">pHeap</span>, which points to the newly allocated chunk of memory on the heap.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By using <span class="s35">pHeap</span>, I can manipulate the chunk of memory on the heap reserved for an integer. That<span class="s12">’</span>s what I do next; I assign <span class="s35">10 </span>to the chunk of memory and then I display that value stored on the heap, using <span class="s35">pHeap</span>, as I would any other pointer to <span class="s35">int</span>. The only difference is that <span class="s35">pHeap </span>points to a piece of memory on the heap, not the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_339.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can initialize memory on the heap at the same time you allocate it by placing a value, surrounded by parentheses, after the type. This is even easier than it sounds. For example, the following line allocates a chunk of memory on the heap for an <span class="s35">int </span>variable and assigns <span class="s35">10 </span>to it. The statement then assigns the address of that chunk of memory to <span class="s35">pHeap</span>.</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap = new int(10);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_340.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One of the major advantages of memory on the heap is that it can persist beyond the function in which it was allocated, meaning that you can create an object on the heap in one function and return a pointer or reference to it. That<span class="s12">’</span>s what I demonstrate with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: justify;">int* pHeap2 = intOnHeap();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1061">300 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The statement calls the function <span class="s35">intOnHeap()</span>, which allocates a chunk of memory on the heap for an <span class="s35">int </span>and assigns <span class="s35">20 </span>to it.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int* intOnHeap()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">int* pTemp = new int(20); return pTemp;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1017">Then, the function returns a pointer to this chunk of memory. Back in </a><span class="s35">main()</span>, the assignment statement assigns the address of the chunk of memory on the heap to <span class="s35">pHeap2</span>. Next, I use the returned pointer to display the value.<a name="bookmark1062">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;*pHeap2: &quot; &lt;&lt; *pHeap2 &lt;&lt; &quot;\n\n&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_341.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Up until now, if you wanted to return a value created in a function, you had to return a copy of the value. But by using dynamic memory, you can create an object on the heap in a function and return a pointer to the new object.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_342.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a343"><h1 href="#bookmark11">Using the delete Operator</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Unlike storage for local variables on the stack, memory that you<span class="s12">’</span>ve allocated on the heap must be explicitly freed. When you<span class="s12">’</span>re finished with memory that you<span class="s12">’</span>ve allocated with <span class="s35">new</span>, you should free it with <span class="s35">delete</span>. That<span class="s12">’</span>s what I do with the following line, which frees the memory on the heap that stored <span class="s35">10</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pHeap;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That memory is returned to the heap for future use. The data that was stored in it is no longer available. Next, I free some more memory, which frees the memory on the heap that stored <span class="s35">20</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pHeap2;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">That memory is returned to the heap for future use, and the data that was stored in it is no longer available. Notice that there<span class="s12">’</span>s no difference, as far as <span class="s35">delete </span>is concerned, regarding where in the program I allocated the memory on the heap that I<span class="s12">’</span>m deleting.</p><p class="s24" style="padding-top: 11pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 40pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_343.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Because you need to free memory that you’ve allocated once you’re finished with it, a good rule of thumb is that every <span class="s35">new </span>should have a corresponding <span class="s35">delete</span>. In fact, some programmers write the <span class="s35">delete </span>statement just after writing the <span class="s35">new </span>statement whenever possible, so they don’t forget it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_344.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 282pt;text-indent: 0pt;text-align: left;"><a name="bookmark1063">Dynamically Allocating Memory 301</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1018">An important point to understand here is that the two previous statements free the memory on the heap, but they do not directly affect the local variables </a><span class="s35">pHeap </span>and <span class="s35">pHeap2</span>. This creates a potential problem because <span class="s35">pHeap </span>and <span class="s35">pHeap2 </span>now point to memory that has been returned to the heap, meaning that they point to memory that the computer can use in some other way at any given time. Pointers like this are called <span class="s11">dangling pointers </span>and they are quite dangerous. You should never attempt to dereference a dangling pointer. One way to deal with dangling pointers is to assign <span class="s35">0 </span>to them, and that<span class="s12">’</span>s what I do with the following lines, which reassign both dangling pointers so they no longer point to some memory to which they should not point.<a name="bookmark1064">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">pHeap = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pHeap2 = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Another good way to deal with a dangling pointer is to assign a valid memory address to it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_345.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Using <span class="s35">delete </span>on a dangling pointer can cause your program to crash. Be sure to set a dangling pointer to <span class="s35">0 </span>or reassign it to point to a new, valid chunk of memory.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_346.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a344"><h1 href="#bookmark11">Avoiding Memory Leaks</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">One problem with allowing a programmer to allocate and free memory is that he might allocate memory and lose any way to get at it, thus losing any way to ever free it. When memory is lost like this, it<span class="s12">’</span>s called a <span class="s11">memory leak</span>. Given a large enough leak, a program might run out of memory and crash. As a game programmer, it<span class="s12">’</span>s your responsibility to avoid memory leaks.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I<span class="s12">’</span>ve written two functions in the Heap program that purposely create memory leaks in order to show you what <span class="s11">not </span>to do when using dynamic memory. The first function is <span class="s35">leak1()</span>, which simply allocates a chunk of memory on the heap for an <span class="s35">int </span>value and then ends.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void leak1()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* drip1 = new int(30);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">302 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If I were to call this function, memory would be lost forever. (Okay, it would be lost until the program ended.) The problem is that <span class="s35">drip1</span>, which is the only connection to the newly acquired chunk of memory on the heap, is a local variable and ceases to exist when the function <span class="s35">leak1() </span>ends. So, there<span class="s12">’</span>s no way to free the allocated memory. Take a look at Figure 9.4 for a visual representa- tion of how the leak occurs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><span><img width="27" height="12" alt="image" src="Image_347.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="221" height="40" alt="image" src="Image_348.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 9.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The memory that stores <span class="s35">30 </span>can no longer be accessed to be freed, so it has leaked out of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">To avoid this memory leak, I could do one of two things. I could use <span class="s35">delete </span>to free the memory in <span class="s35">leak1()</span>, or I could return a copy of the pointer <span class="s35">drip1</span>. If I choose the second option, I have to make sure to free this memory in some other part of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The second function that creates a memory leak is <span class="s35">leak2()</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void leak2()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">int* drip2 = new int(50); drip2 = new int(100); delete drip2;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">This memory leak is a little more subtle, but there is still a leak. The first line in the function body, <span class="s35">int* drip2 = new int(50);</span>, allocates a new piece of memory on the heap, assigns <span class="s35">50 </span>to it, and has <span class="s35">drip2 </span>point to that piece memory. So far, so good. The second line, <span class="s35">drip2 = new int(100);</span>, points <span class="s35">drip2 </span>to a new piece of memory on the heap, which stores the <span class="s35">100</span>. The problem is that the memory on the heap that stores <span class="s35">50 </span>now has nothing pointing to it, so there is no way for the program to free that memory. As a result, that piece of memory has essentially leaked out of the system. Check out Figure 9.5 for a visual representation of how the leak occurs.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The last statement of the function, <span class="s35">delete drip2;</span>, frees the memory that stores</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s35">100</span>, so this won<span class="s12">’</span>t be the source of another memory leak. But remember, the</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><a name="bookmark1019">Working with Data Members and the Heap 303</a><a name="bookmark1065">&zwnj;</a><a name="bookmark1066">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="29" height="12" alt="image" src="Image_349.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="220" height="115" alt="image" src="Image_350.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 9.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">By changing <span class="s35">drip2 </span>so that it points to the memory that stores <span class="s35">100</span>, the memory that stores <span class="s35">50 </span>is no longer accessible and has leaked out of the system.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1020">memory on the heap that stores </a><span class="s35">50 </span>has still leaked out of the system. Also, I don<span class="s12">’</span>t worry about <span class="s35">drip2</span>, which technically has become a dangling pointer, because it will cease to exist when the function ends.<a name="bookmark1067">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="s30" name="a345">Working with Data Members and the Heap</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">You<span class="s12">’</span>ve seen how you can use aggregation to declare data members that store objects, but you can also declare data members that are pointers to values on the heap. You might use a data member that points to a value on the heap for some of the same reasons you would use pointers in other situations. For example, you might want to declare a data member for a large 3D scene; however, you might only have access to the 3D scene through a pointer. Unfortunately, problems can arise when you use a data member that points to a value on the heap because of the way that some default object behaviors work. But you can avoid these issues by writing member functions to change these default behaviors.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark11" class="h1" name="a346">Introducing the Heap Data Member </a><h1 href="#bookmark11">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Heap Data Member program defines a new type of critter with a data member that is a pointer, which points to an object stored on the heap. The class defines a few new member functions to handle situations in which an object is destroyed, copied, or assigned to another object. The program destroys, copies, and assigns objects to show that the objects behave as you<span class="s12">’</span>d expect, even with data members pointing to values on the heap. Figure 9.6 shows the results of the Heap Data Member program.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">304 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_351.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 9.6</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Objects, each with a data member that points to a value on the heap, are instantiated, destroyed, and copied.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">heap_data_member.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Heap Data Member</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates an object with a dynamically allocated data member</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt;</p><p class="s35" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">using namespace std; class Critter</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter(const string&amp; name = &quot;&quot;, int age = 0);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">~Critter(); //destructor prototype Critter(const Critter&amp; c); //copy constructor prototype</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter&amp; Critter::operator=(const Critter&amp; c); //overloaded assignment</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">op</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void Greet() const;</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;">Working with Data Members and the Heap 305</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">string* m_pName; int m_Age;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::Critter(const string&amp; name, int age)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Constructor called\n&quot;; m_pName = new string(name); m_Age = age;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::~Critter() //destructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Destructor called\n&quot;; delete m_pName;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::Critter(const Critter&amp; c) //copy constructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">cout &lt;&lt; &quot;Copy Constructor called\n&quot;; m_pName = new string(*(c.m_pName)); m_Age = c.m_Age;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter&amp; Critter::operator=(const Critter&amp; c)    //overloaded assignment op def</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Overloaded Assignment Operator called\n&quot;; if (this != &amp;c)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">delete m_pName;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">m_pName = new string(*(c.m_pName)); m_Age = c.m_Age;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return *this;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Critter::Greet() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">306 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 67pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;I’m &quot; &lt;&lt; *m_pName &lt;&lt; &quot; and I’m &quot; &lt;&lt; m_Age &lt;&lt; &quot; years old.\n&quot;; cout &lt;&lt; &quot;&amp;m_pName: &quot; &lt;&lt; cout &lt;&lt; &amp;m_pName &lt;&lt; endl;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void testDestructor();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">void testCopyConstructor(Critter aCopy); void testAssignmentOp();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">testDestructor(); cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Critter crit(&quot;Poochie&quot;, 5); crit.Greet(); testCopyConstructor(crit); crit.Greet();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">cout &lt;&lt; endl; testAssignmentOp();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void testDestructor()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter toDestroy(&quot;Rover&quot;, 3); toDestroy.Greet();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void testCopyConstructor(Critter aCopy)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">aCopy.Greet();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void testAssignmentOp()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit1(&quot;crit1&quot;, 7);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Critter crit2(&quot;crit2&quot;, 9); crit1 = crit2;</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><a name="bookmark1021">Working with Data Members and the Heap 307</a><a name="bookmark1068">&zwnj;</a><a name="bookmark1069">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">crit1.Greet(); crit2.Greet(); cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Critter crit3(&quot;crit&quot;, 11); crit3 = crit3; crit3.Greet();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a347"><h1 href="#bookmark11">Declaring Data Members that Point to Values on the Heap</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To declare a data member that points to a value on the heap, you first need to declare a data member that<span class="s12">’</span>s a pointer. That<span class="s12">’</span>s just what I do in <span class="s35">Critter </span>with the following line, which declares <span class="s35">m_pName </span>as a pointer to a <span class="s35">string </span>object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string* m_pName;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In the class constructor, you can allocate memory on the heap, assign a value to the memory, and then point a pointer data member to the memory. That<span class="s12">’</span>s what I do in the constructor definition with the following line, which allocates memory for a <span class="s35">string </span>object, assigns <span class="s35">name </span>to it, and points <span class="s35">m_pName </span>to that chunk of memory on the heap.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pName = new string(name);</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I also declare a data member that is not a pointer:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Age;</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This data member gets its value in the constructor the way you<span class="s12">’</span>ve seen before, with a simple assignment statement:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Age = age;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You<span class="s12">’</span>ll see how each of these data members is treated differently as <span class="s35">Critter</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">objects are destroyed, copied, and assigned to each other.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Now, the first object with a data member on the heap is created when <span class="s35">main() </span>calls <span class="s35">testDestructor()</span>. The object, <span class="s35">toDestroy</span>, has an <span class="s35">m_pName </span>data member that points to a <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>that<span class="s12">’</span>s stored on the heap. Figure 9.7 provides a visual representation of the <span class="s35">Critter </span>object. Note that the image is abstract because the name of the critter is actually stored as a <span class="s35">string </span>object, not a string literal.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1022">308 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1070">&zwnj;</a><a name="bookmark1071">&zwnj;</a><a name="bookmark1072">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="48" height="10" alt="image" src="Image_352.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="59" height="12" alt="image" src="Image_353.png"/></span> <span><img width="217" height="40" alt="image" src="Image_354.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A representation of a <span class="s35">Critter </span>object. The <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>is stored on the heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a348"><h1 href="#bookmark12">Declaring and Defining Destructors</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">One problem that can occur when a data member of an object points to a value on the heap is a memory leak. That<span class="s12">’</span>s because when the object is deleted, the pointer to the heap value disappears along with it. If the heap value remains, it produces a memory leak. To avoid a memory leak, the object should clean up after itself before it is destroyed by deleting its associated heap value. Fortu- nately, there<span class="s12">’</span>s a member function, the <span class="s11">destructor</span>, that<span class="s12">’</span>s called just before an object is destroyed, which can be used to perform the necessary cleanup.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">A default destructor, which is created for you by the compiler if you don<span class="s12">’</span>t write your own, doesn<span class="s12">’</span>t attempt to free any memory on the heap that a data member might point to. This behavior is usually fine for simple classes, but when you have a class with data members that point to values on the heap, you should write your own destructor so you can free the memory on the heap associated with an object before the object disappears, avoiding a memory leak. That<span class="s12">’</span>s what I do in the <span class="s35">Critter </span>class. First, inside the class definition, I declare the destructor. Notice that a destructor has the name of the class preceded by <span class="s35">~ </span>(the tilde character) and does not have any parameters or return a value.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::~Critter() //destructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Destructor called\n&quot;; delete m_pName;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  <span class="s35">main()</span>,  I  put  the  destructor  to  the  test  when  I  call  <span class="s35">testDestructor()</span>.  The function  creates  a <span class="s35">Critter  </span>object,  <span class="s35">toDestroy</span>, and  invokes  its  <span class="s35">Greet()  </span>method, which displays <span class="s35">I’m Rover and I’m 3 years old. &amp;m_pName: 73F2ED48003AF644</span>. The message provides a way to see the values of the object<span class="s12">’</span>s <span class="s35">m_Age </span>data member and the string pointed to by its <span class="s35">m_pName </span>data member. But it also displays the address of the string on the heap stored in the pointer <span class="s35">m_pName</span>. The important thing to</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><a name="bookmark1023">Working with Data Members and the Heap 309</a><a name="bookmark1073">&zwnj;</a><a name="bookmark1074">&zwnj;</a><a name="bookmark1075">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">note  is  that  after  the  <span class="s35">Greet()  </span>message  is  displayed,  the  function  ends  and <span class="s35">toDestroy   </span>is  ready  to  be  destroyed.  Fortunately,  <span class="s35">toDestroy</span><span class="s12">’</span>s   destructor  is automatically called just before this happens. The destructor displays <span class="s35">Destructor called </span>and deletes the <span class="s35">string </span>object equal to <span class="s35">&quot;Rover&quot; </span>that<span class="s12">’</span>s on the heap, cleaning up after itself and leaking no memory. The destructor doesn<span class="s12">’</span>t do anything with the <span class="s35">m_Age  </span>data member. That<span class="s12">’</span>s perfectly fine since <span class="s35">m_Age  </span>isn<span class="s12">’</span>t on the heap, but part of <span class="s35">toDestroy </span>and will be properly disposed of right along with the rest of the <span class="s35">Critter  </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_355.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you have a class that allocates memory on the heap, you should write a destructor that cleans up and frees that memory.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_356.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="h1" name="a349">Declaring and Defining Copy </a><h1 href="#bookmark12">Constructors</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Sometimes an object is copied automatically for you. This occurs when an object is:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-top: 2pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Passed by value to a function</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Returned from a function</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Initialized to another object through an initializer</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>Provided as a single argument to the object<span class="s12">’</span>s constructor</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The copying is done by a special member function called the <span class="s11">copy constructor</span>. Like constructors and destructors, a default copy constructor is supplied for you if you don<span class="s12">’</span>t write one of your own. The default copy constructor simply copies the value of each data member to data members of the same name in the new object<span class="s12">—</span>a <span class="s11">member-wise copy</span>.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">For simple classes, the default copy constructor is usually fine. However, when you have a class with a data member that points to a value on the heap, you should consider writing your own copy constructor. Why? Imagine a <span class="s35">Critter </span>object that has a data member that<span class="s12">’</span>s a pointer to a <span class="s35">string </span>object on the heap. With only a default copy constructor, the automatic copying of the object would result in a new object that points to the same single <span class="s35">string </span>on the heap because the pointer of the new object would simply get a copy of the address stored in</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1076">310 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">the pointer of the original object. This member-wise copying produces a <span class="s11">shallow copy</span>, in which the pointer data members of the copy point to the same chunks of memory as the pointer data members in the original object.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Let me give you a specific example. If I hadn<span class="s12">’</span>t written my own copy constructor in the Heap Data Member program, when I passed a <span class="s35">Critter </span>object by value with the following function call, the program would have automatically made a shallow copy of <span class="s35">crit </span>called <span class="s35">aCopy </span>that existed in <span class="s35">testCopyConstructor()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">testCopyConstructor(crit);</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">aCopy<span class="s12">’</span><span class="p">s </span>m_pName <span class="p">data member would point to the exact same </span>string <span class="p">object on the heap as </span>crit<span class="s12">’</span><span class="p">s </span>m_pName <span class="p">data member does. Figure 9.8 shows you what I mean. Note that the image is abstract since the name of the critter is actually stored as a </span>string <span class="p">object, not a string literal.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="17" height="10" alt="image" src="Image_357.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="284" height="114" alt="image" src="Image_358.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 9.8</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">If a shallow copy of <span class="s35">crit </span>were made, both <span class="s35">aCopy </span>and <span class="s35">crit </span>would have a data member that points to the same chunk of memory on the heap.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Why is this a problem? Once <span class="s35">testCopyConstructor() </span>ends, <span class="s35">aCopy</span><span class="s12">’</span>s destructor is called, freeing the memory on the heap pointed to by <span class="s35">aCopy</span><span class="s12">’</span>s <span class="s35">m_pName </span>data member. Because of this, <span class="s35">crit</span><span class="s12">’</span>s <span class="s35">m_pName </span>data member would point to memory that has been freed, which would mean that <span class="s35">crit</span><span class="s12">’</span>s <span class="s35">m_pName </span>data member would be a dangling pointer! Figure 9.9 provides you with a visual representation of this. Note that the image is abstract since the name of the critter is actually stored as a <span class="s35">string </span>object, not a string literal.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">What you really need is a copy constructor that produces a new object with its own chunk of memory on the heap for each data member that points to a heap object<span class="s12">—</span>a <span class="s11">deep copy</span>. That<span class="s12">’</span>s what I do when I define a copy constructor for the</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;">Working with Data Members and the Heap 311</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 89pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="17" height="10" alt="image" src="Image_359.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 39pt;text-indent: 0pt;text-align: left;"><span><img width="285" height="115" alt="image" src="Image_360.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">Figure 9.9</p><p class="s19" style="padding-left: 39pt;text-indent: 0pt;text-align: left;">If the shallow copy of the <span class="s35">Critter </span>object were destroyed, the memory on the heap that it shared with the original object would be freed. As a result, the original object would have a dangling pointer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">class, which replaces the default one provided by the compiler. First, inside the class definition, I declare the copy constructor:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter(const Critter&amp; c); //copy constructor prototype</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, outside the class definition, I define the copy constructor:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter::Critter(const Critter&amp; c) //copy constructor definition</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: justify;">cout &lt;&lt; &quot;Copy Constructor called\n&quot;; m_pName = new string(*(c.m_pName)); m_Age = c.m_Age;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Just like this one, a copy constructor must have the same name as the class. It returns no value, but accepts a reference to an object of the class<span class="s12">—</span>the object that needs to be copied. The reference should be made a constant reference to protect the original object from being changed during the copy process.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The job of a copy constructor is to copy any data members from the original object to the copy object. If a data member of the original object is a pointer to a value on the heap, the copy constructor should request memory from the heap, copy the original heap value to this new chunk of memory, and then point the appropriate copy object data member to this new memory.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When I call <span class="s35">testCopyConstructor() </span>by passing <span class="s35">crit </span>to the function by value, the copy constructor  I wrote  is  automatically called.  You  can  tell  this  because  the text  <span class="s35">Copy  Constructor  called.  </span>appears  on  the  screen.  My  copy  constructor creates a new <span class="s35">Critter </span>object (the copy) and accepts a reference to the original in <span class="s35">c</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">312 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">With the line <span class="s35">m_pName = new string(*(c.m_pName));</span>, my copy constructor allocates a new chunk of memory on the heap, gets a copy of the <span class="s35">string </span>pointed to by the original object, copies it to the new memory, and points the <span class="s35">m_pName </span>data member of the copy to this memory. The next line, <span class="s35">m_Age = c.m_Age; </span>simply copies the value of the original<span class="s12">’</span>s <span class="s35">m_Age </span>to the copy<span class="s12">’</span>s <span class="s35">m_Age </span>data member. As a result, a deep copy of <span class="s35">crit </span>is made, and that<span class="s12">’</span>s what gets used in <span class="s35">testCopyConstructor() </span>as <span class="s35">aCopy</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You  can  see  that  the  copy  constructor  worked  when  I  called  <span class="s35">aCopy</span><span class="s12">’</span>s  <span class="s35">Greet() </span>member function. In my sample run, the member function displayed a message, part  of  which  was  <span class="s35">I’m  Poochie and  I’m  5  years old.  </span>This  part  of  the  message shows that <span class="s35">aCopy </span>correctly got a copy of the values of the data members from the object <span class="s35">crit</span>. The second part of the message, <span class="s35">&amp;m_pName: 73F2ED48003AF660</span>, shows that the string object pointed to by the data member <span class="s35">m_pName </span>of <span class="s35">aCopy </span>is stored in a different chunk of memory than the string pointed to by the data member <span class="s35">m_pName </span>of <span class="s35">crit</span>, which is stored at memory location <span class="s35">73F2ED48003AF78C</span>, proving that a deep copy was made. Remember that the memory addresses displayed in my sample run may be different from the ones displayed when the program is run again. However, the key here is that the addresses stored in <span class="s35">crit</span><span class="s12">’</span>s <span class="s35">m_pName </span>and <span class="s35">aCopy</span><span class="s12">’</span>s <span class="s35">m_pName  </span>are different from each other.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When <span class="s35">testCopyConstructor() </span>ends, the copy of the <span class="s35">Critter </span>object used in the function, stored in the variable <span class="s35">aCopy</span>, is destroyed. The destructor frees the chunk of memory on the heap associated with the copy, leaving the original <span class="s35">Critter </span>object, <span class="s35">crit</span>, created in <span class="s35">main()</span>, unaffected. Figure 9.10 shows the results. Note that the image is abstract since the name of the critter is actually stored as a <span class="s35">string </span>object, not a string literal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 7pt;text-align: left;"><span><img width="17" height="10" alt="image" src="Image_361.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="59" height="12" alt="image" src="Image_362.png"/></span> <span><img width="217" height="40" alt="image" src="Image_363.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="286" height="58" alt="image" src="Image_364.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 9.10</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">With a proper copy constructor, the original and the copy each point to their own chunk of memory on the heap. Then, when the copy is destroyed, the original is unaffected.</p><p class="s19" style="padding-top: 2pt;padding-left: 225pt;text-indent: 0pt;text-align: left;"><a name="bookmark1024">Working with Data Members and the Heap 313</a><a name="bookmark1077">&zwnj;</a><a name="bookmark1078">&zwnj;</a><a name="bookmark1079">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_365.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you have a class with data members that point to memory on the heap, you should consider writing a copy constructor that allocates memory for a new object and creates a deep copy.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_366.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a350"><h1 href="#bookmark12">Overloading the Assignment Operator</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When both sides of an assignment statement are objects of the same class, the class<span class="s12">’ </span>assignment operator member function is called. Like a default copy constructor, a default assignment operator member function is supplied for you if you don<span class="s12">’</span>t write one of your own. Also like the default copy constructor, the default assignment operator provides only member-wise duplication.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">For simple classes, the default assignment operator is usually fine. However, when you have a class with a data member that points to a value on the heap, you should consider writing an overloaded assignment operator of your own. If you don<span class="s12">’</span>t, you<span class="s12">’</span>ll end up with shallow copies of objects when you assign one object to another. To avoid this problem, I overloaded the assignment operator for <span class="s35">Critter</span>. First, inside the class definition, I write the declaration:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter&amp; Critter::operator=(const Critter&amp; c); //overloaded assignment</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">op</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Next, outside the class definition, I write the member function definition:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Critter&amp; Critter::operator=(const Critter&amp; c)    //overloaded assignment op def</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Overloaded Assignment Operator called\n&quot;; if (this != &amp;c)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">delete m_pName;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">m_pName = new string(*(c.m_pName)); m_Age = c.m_Age;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return *this;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Notice that the member function returns a reference to a <span class="s35">Critter </span>object. For robust assignment operation, return a reference from the overloaded assignment operator member function.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">314 Chapter 9 <span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In <span class="s35">main()</span>, I call a function that tests the overloaded assignment operator for this class.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">testAssignmentOp();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">testAssignmentOp() </span>creates two objects and assigns one to the other.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Critter crit1(&quot;crit1&quot;, 7);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Critter crit2(&quot;crit2&quot;, 9); crit1 = crit2;</p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding assignment statement, <span class="s35">crit1 = crit2;</span>, calls the assignment operator member function<span class="s12">—</span><span class="s35">operator=()</span><span class="s12">—</span>for <span class="s35">crit1</span>. In the <span class="s35">operator=() </span>func- tion, <span class="s35">c </span>is a constant reference to <span class="s35">crit2</span>. The goal of the member function is to assign the values of all of the data members of <span class="s35">crit2 </span>to <span class="s35">crit1 </span>while making sure each <span class="s35">Critter </span>object has its own chunks of memory on the heap for any pointer data members.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After <span class="s35">operator=() </span>displays a message that the overloaded assignment operator has been called, it uses the <span class="s35">this </span>pointer. What<span class="s12">’</span>s the <span class="s35">this </span>pointer? It<span class="s12">’</span>s a pointer that all non-static member functions automatically have, which points to the object that was used to call the function. In this case, <span class="s35">this </span>points to <span class="s35">crit1</span>, the object being assigned to.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The next line, <span class="s35">if (this != &amp;c)</span>, checks to see whether the address of <span class="s35">crit1 </span>is not equal to the address of <span class="s35">crit2</span><span class="s12">—</span>that is, it tests if the object isn<span class="s12">’</span>t being assigned to itself. Because it<span class="s12">’</span>s not, the block associated with the <span class="s35">if  </span>statement executes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Inside the <span class="s35">if </span>block, <span class="s35">delete m_pName; </span>frees the memory on the heap that <span class="s35">crit1</span><span class="s12">’</span>s <span class="s35">m_pName  </span>data member pointed to. The line <span class="s35">m_pName = new string(*(c.m_pName)); </span>allocates a new chunk of memory on the heap, gets a copy of the <span class="s35">string </span>pointed to by the <span class="s35">m_pName  </span>data member of <span class="s35">crit2</span>, copies the <span class="s35">string  </span>object to the new heap memory,  and  points  the  <span class="s35">m_pName  </span>data  member  of  <span class="s35">crit1  </span>to  this  memory.  You should follow this logic for all data members that point to memory on the heap.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The last line in the block, <span class="s35">m_Age = c.m_Age; </span>simply copies the value of the <span class="s35">crit2</span><span class="s12">’</span>s <span class="s35">m_Age  </span>to  <span class="s35">crit1</span><span class="s12">’</span>s  <span class="s35">m_Age  </span>data  member.  You  should  follow  this  simple  member- wise copying for all data members that are not pointers to memory on the heap.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Finally, the member function returns a copy of the new <span class="s35">crit1 </span>by returning</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">*this<span class="p">. You should do the same for any overloaded assignment operator member function you write.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;"><a name="bookmark1080">Introducing the Game Lobby Program 315</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Back  in  <span class="s35">testAssignmentOp()</span>,  I  prove  that  the  assignment  worked  by  calling <span class="s35">crit1.Greet() </span>and <span class="s35">crit2.Greet()</span>. <span class="s35">crit1 </span>displays the message <span class="s35">I’m crit2 and I’m 9 years old. &amp;m_pName: 73F2ED48003AF644  </span>while <span class="s35">crit2  </span>displays the message <span class="s35">I’m crit2 and I’m 9 years old. &amp;m_pName: 73F2ED48003AF634</span>. The  first part  of  each message, <span class="s35">I’m crit2 and I’m 9 years old.</span>, is the same and shows that the copying of values worked. The second part of each message is different and shows that each object points to different chunks of memory on the heap, which demon- strates that I avoided shallow copies and have truly independent objects after the assignment.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1025">In the last test of the overloaded assignment operator, I demonstrate what happens when you assign an object to itself. That</a><span class="s12">’</span>s what I do next in the function with the following lines:<a name="bookmark1081">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Critter crit3(&quot;crit&quot;, 11); crit3 = crit3;</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The preceding assignment statement, <span class="s35">crit3 = crit3;</span>, calls the assignment operator member function<span class="s12">—</span><span class="s35">operator=()</span><span class="s12">—</span>for <span class="s35">crit3</span>. The <span class="s35">if </span>statement checks to see whether <span class="s35">crit3 </span>is being assigned to itself. Because it is, the member function simply returns a reference to the object through <span class="s35">return *this</span>. You should follow this logic in your own overloaded assignment operator because of potential problems that can arise from only one object being involved in an assignment.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_367.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">When you have a class with a data member that points to memory on the heap, you should consider overloading the assignment operator for the class.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_368.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a351">Introducing the Game Lobby Program</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Game Lobby program simulates a game lobby<span class="s12">—</span>a waiting area for players, usually in an online game. The program doesn<span class="s12">’</span>t actually involve an online component. It creates a single line in which players can wait. The user of the program runs the simulation and has four choices. He can add a person to the lobby, remove a person from the lobby (the first person in line is the first to leave), clear out the lobby, or quit the simulation. Figure 9.11 shows the program in action.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1082">316 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_369.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1026">Figure 9.11</a><a name="bookmark1083">&zwnj;</a></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The lobby holds players who are removed in the order in which they were added.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a352"><h1 href="#bookmark12">The Player Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first thing I do is create a <span class="s35">Player </span>class to represent the players who are waiting in the game lobby. Because I don<span class="s12">’</span>t know how many players I<span class="s12">’</span>ll have in my lobby at one time, it makes sense to use a dynamic data structure. Normally, I<span class="s12">’</span>d go to my toolbox of containers from the STL. But I decided to take a different approach in this program and create my own kind of container using dynamically allocated memory that I manage. I didn<span class="s12">’</span>t do this because it<span class="s12">’</span>s a better programming choice<span class="s12">—</span>always see whether you can leverage good work done by other programmers, like the STL<span class="s12">—</span>but because it makes for a better game programming example. It<span class="s12">’</span>s a great way to really see dynamic memory in action.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website </a>(www.courseptr.com/downloads). The program is in the Chapter 9 folder; the filename is <span class="s35">game_lobby.cpp</span>. Here<span class="s12">’</span>s the beginning of the program, which includes the <span class="s35">Player </span>class:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Game Lobby</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Simulates a game lobby where players wait #include &lt;iostream&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">Introducing the Game Lobby Program 317</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 26pt;text-align: left;">#include &lt;string&gt; using namespace std; class Player</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Player(const string&amp; name = &quot;&quot;); string GetName() const;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Player* GetNext() const; void SetNext(Player* next);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* m_pNext;    //Pointer to next player in list</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Player::Player(const string&amp; name): m_Name(name),</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pNext(0)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">string Player::GetName() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Player* Player::GetNext() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return m_pNext;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Player::SetNext(Player* next)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pNext = next;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">m_Name </span>data member holds the name of a player. That<span class="s12">’</span>s pretty straightfor- ward, but you might be wondering about the other data member, <span class="s35">m_pNext</span>. It<span class="s12">’</span>s a pointer to a <span class="s35">Player </span>object, which means that each <span class="s35">Player </span>object can hold a name and point to another <span class="s35">Player </span>object. You<span class="s12">’</span>ll get the point of all this when I talk</p><p style="text-indent: 0pt;text-align: left;"><span><img width="52" height="11" alt="image" src="Image_370.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1084">318 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="51" height="12" alt="image" src="Image_371.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="33" height="10" alt="image" src="Image_372.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="136" height="78" alt="image" src="Image_373.png"/></span></p><p class="s37" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.12</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">A <span class="s35">Player </span>object can hold a name and point to another <span class="s35">Player </span>object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">about the <span class="s35">Lobby </span>class. Figure 9.12 provides a visual representation of a <span class="s35">Player</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1027">object.</a><a name="bookmark1085">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The class has a get accessor method for <span class="s35">m_Name </span>and get and set accessor member functions  for  <span class="s35">m_pNext</span>.  Finally,  the  constructor  is  pretty  simple.  It  initializes <span class="s35">m_Name </span>to a <span class="s35">string </span>object based on what<span class="s12">’</span>s passed to the constructor. It also sets <span class="s35">m_pNext  </span>to <span class="s35">0</span>, making it a null pointer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a353"><h1 href="#bookmark12">The Lobby Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Lobby </span>class represents the lobby or line in which players wait. Here<span class="s12">’</span>s the class definition:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Lobby</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator (ostream&amp; os, const Lobby&amp; aLobby);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Lobby();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">~Lobby();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">void AddPlayer(); void RemovePlayer(); void Clear();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* m_pHead;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The data member <span class="s35">m_pHead </span>is a pointer that points to a <span class="s35">Player </span>object, which represents the first person in line. <span class="s35">m_pHead </span>represents the head of the line.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Because each <span class="s35">Player </span>object has an <span class="s35">m_pNext </span>data member, you can link a bunch of  <span class="s35">Player  </span>objects  in  a  <span class="s11">linked  list</span>.  Individual  elements  of  linked  lists  are  often</p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;"><a name="bookmark1086">Introducing the Game Lobby Program 319</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_374.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="158" height="68" alt="image" src="Image_375.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="28" height="9" alt="image" src="Image_376.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="111" height="68" alt="image" src="Image_377.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_378.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="158" height="147" alt="image" src="Image_379.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="44" height="11" alt="image" src="Image_380.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="45" height="10" alt="image" src="Image_381.png"/></span></p><p class="s37" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 9.13</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Each node holds a name and a pointer to the next player in the list. The first player in line is at the head.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">called <span class="s11">nodes</span>. Figure 9.13 provides a visual representation of a game lobby<span class="s12">—</span>a series of player nodes linked with one player at the head of the line.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One way to think about the player nodes is as a group of train cars that carry cargo and are connected. In this case, the train cars carry a name as cargo and are linked through a pointer data member, <span class="s35">m_pNext</span>. The <span class="s35">Lobby </span>class allocates memory on the heap for each <span class="s35">Player </span>object in the list. The <span class="s35">Lobby </span>data member <span class="s35">m_pHead </span>provides access to the first <span class="s35">Player </span>object at the head of the list.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The constructor is very simple. It simply initializes the data member <span class="s35">m_pHead </span>to</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">0<span class="p">, making it a null pointer.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Lobby::Lobby(): m_pHead(0)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The destructor simply calls <span class="s35">Clear()</span>, which removes all the <span class="s35">Player </span>objects from the list, freeing the allocated memory.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Lobby::~Lobby()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">AddPlayer() <span class="p">instantiates a </span>Player <span class="p">object on the heap and adds it to the end of the list. </span>RemovePlayer() <span class="p">removes the first </span>Player <span class="p">object in the list, freeing the allocated memory.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I declare the function <span class="s35">operator&lt;&lt;() </span>a friend of <span class="s35">Lobby </span>so that I can send a <span class="s35">Lobby</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to <span class="s35">cout </span>using the <span class="s35">&lt;&lt; </span>operator.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1028">320 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1087">&zwnj;</a><a name="bookmark1088">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_382.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Lobby </span>class has a data member, <span class="s35">m_pHead</span>, which points to <span class="s35">Player </span>objects on the heap. Because of this, I included a destructor that frees all of the memory occupied by the <span class="s35">Player </span>objects on the heap instantiated by a <span class="s35">Lobby </span>object to avoid any memory leaks when a <span class="s35">Lobby </span>object is destroyed. However, I didn’t define a copy constructor or overload the assignment operator in the class. For the Game Lobby program, this isn’t necessary. But if I wanted a more robust <span class="s35">Lobby </span>class, I would have defined these member functions.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_383.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a354"><h1 href="#bookmark12">The Lobby::AddPlayer() Member Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;">The <span class="s35">Lobby::AddPlayer() </span>member function adds a player to the end of the line in the lobby.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Lobby::AddPlayer()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//create a new player node</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Please enter the name of the new player: &quot;; string name;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">cin &gt;&gt; name;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* pNewPlayer = new Player(name);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//if list is empty, make head of list this new player if (m_pHead == 0)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_pHead = pNewPlayer;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//otherwise find the end of the list and add the player there else</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">Player* pIter = m_pHead; while (pIter-&gt;GetNext() != 0)</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">pIter = pIter-&gt;GetNext();</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">pIter-&gt;SetNext(pNewPlayer);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The first thing the function does is gets the new player<span class="s12">’</span>s name from the user and use it to instantiate a new <span class="s35">Player </span>object on the heap. Then it sets the object<span class="s12">’</span>s pointer data member to the null pointer.</p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;">Introducing the Game Lobby Program 321</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, the function checks to see whether the lobby is empty. If the <span class="s35">Lobby </span>object<span class="s12">’</span>s data member <span class="s35">m_pHead </span>is <span class="s35">0</span>, then there<span class="s12">’</span>s no one in line. If so, the new <span class="s35">Player </span>object becomes the head of the line and <span class="s35">m_pHead </span>is set to point to a new <span class="s35">Player </span>object on the heap.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="10" alt="image" src="Image_384.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="9" alt="image" src="Image_385.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="45" alt="image" src="Image_386.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="105" height="126" alt="image" src="Image_387.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="27" height="8" alt="image" src="Image_388.png"/></span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If the lobby isn<span class="s12">’</span>t empty, the player is added to the end of the line. The function accomplishes this by moving through the list one node at a time, using <span class="s35">pIter</span><span class="s12">’</span>s <span class="s35">GetNext() </span>member function, until it reaches a <span class="s35">Player </span>object whose <span class="s35">GetNext() </span>returns <span class="s35">0</span>, meaning that it<span class="s12">’</span>s the last node in the list. Then, the function makes that node point to the new <span class="s35">Player </span>object on the heap, which has the effect of adding the new object to the end of the list. Figure 9.14 illustrates this process.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="227" height="131" alt="image" src="Image_389.png"/></span> <span class="s59">	</span><span><img width="104" height="64" alt="image" src="Image_390.png"/></span><span class="s60"> </span><span><img width="27" height="8" alt="image" src="Image_391.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="514" height="1" alt="image" src="Image_392.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="43" height="9" alt="image" src="Image_393.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="103" height="64" alt="image" src="Image_394.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="102" alt="image" src="Image_395.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="226" height="131" alt="image" src="Image_396.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="27" height="8" alt="image" src="Image_397.png"/></span></p><p class="s37" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 9.14</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The list of players just before and just after a new player node is added.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1029">322 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1089">&zwnj;</a><a name="bookmark1090">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_398.png"/></span></p><p class="s35" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Lobby::AddPlayer() <span class="s19">marches through the entire list of </span>Player <span class="s19">objects every time it’s called. For small lists this isn’t a problem, but with large lists this inefficient process can become unwieldy. There are more efficient ways to do what this function does. In one of the chapter exercises, your job will be to implement one of these more efficient methods.</span></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_399.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a355"><h1 href="#bookmark12">The Lobby::RemovePlayer() Member Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: left;"><a name="bookmark1030">The </a><span class="s35">Lobby:: RemovePlayer() </span>member function removes the player at the head of the line.<a name="bookmark1091">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Lobby::RemovePlayer()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_pHead == 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The game lobby is empty.    No one to remove!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">Player* pTemp = m_pHead; m_pHead = m_pHead-&gt;GetNext(); delete pTemp;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function tests <span class="s35">m_pHead</span>. If it<span class="s12">’</span>s <span class="s35">0</span>, then the lobby is empty and the function displays a message that says so. Otherwise, the first player object in the list is removed. The function accomplishes this by creating a pointer, <span class="s35">pTemp</span>, and pointing it to the first <span class="s35">Player </span>object in the list. Then the function sets <span class="s35">m_pHead </span>to the next thing in the list<span class="s12">—</span>either the next <span class="s35">Player </span>object or <span class="s35">0</span>. Finally, the function destroys the <span class="s35">Player </span>object pointed to by <span class="s35">pTemp</span>. Check out Figure 9.15 for a visual representation of how this works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a356"><h1 href="#bookmark12">The Lobby::Clear() Member Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Lobby::Clear() </span>member function removes all of the players from the lobby.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Lobby::Clear()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while (m_pHead != 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="64" alt="image" src="Image_400.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="9" alt="image" src="Image_401.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 252pt;text-indent: 0pt;text-align: left;"><a name="bookmark1092">Introducing the Game Lobby Program 323</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="229" height="185" alt="image" src="Image_402.png"/></span> <span class="s61">	</span><span><img width="104" height="64" alt="image" src="Image_403.png"/></span><span class="s60"> </span><span><img width="27" height="8" alt="image" src="Image_404.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="514" height="1" alt="image" src="Image_405.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="41" height="10" alt="image" src="Image_406.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="148" height="64" alt="image" src="Image_407.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="42" height="9" alt="image" src="Image_408.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="64" alt="image" src="Image_409.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="227" height="98" alt="image" src="Image_410.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="27" height="8" alt="image" src="Image_411.png"/></span></p><p class="s37" style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><a name="bookmark1031">Figure 9.15</a><a name="bookmark1093">&zwnj;</a></p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">The list of players just before and just after a player node is removed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">RemovePlayer();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">If the list is empty, the loop isn<span class="s12">’</span>t entered and the function ends. Otherwise, the loop is entered and the function keeps removing the first <span class="s35">Player </span>object in the list by calling <span class="s35">RemovePlayer() </span>until there are no more <span class="s35">Player </span>objects.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a357"><h1 href="#bookmark12">The operator&lt;&lt;() Member Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">operator&lt;&lt;() </span>member function overloads the <span class="s35">&lt;&lt; </span>operator so I can display a</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Lobby <span class="p">object by sending it to </span>cout<span class="p">.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const Lobby&amp; aLobby)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Player* pIter = aLobby.m_pHead;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1094">324 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">os &lt;&lt; &quot;\nHere’s who’s in the game lobby:\n&quot;; if (pIter == 0)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;The lobby is empty.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">while (pIter != 0)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark1032">os &lt;&lt; pIter-&gt;GetName() &lt;&lt; endl; pIter = pIter-&gt;GetNext();</a><a name="bookmark1095">&zwnj;</a></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return os;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">If the lobby is empty, the appropriate message is sent to the output stream. Otherwise, the function cycles through all of the players in the list, sending their names to the output stream, using <span class="s35">pIter </span>to move through the list.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a358"><h1 href="#bookmark12">The main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">main() </span>function displays the players in the lobby, presents the user with a menu of choices, and performs the requested action.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Lobby myLobby; int choice;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">do</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; myLobby;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;\nGAME LOBBY\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;0 - Exit the program.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;1 - Add a player to the lobby.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;2 - Remove a player from the lobby.\n&quot;; cout &lt;&lt; &quot;3 - Clear the lobby.\n&quot;;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; endl &lt;&lt; &quot;Enter choice: &quot;; cin &gt;&gt; choice;</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1096">Summary 325</a><a name="bookmark1097">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">switch (choice)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;line-height: 119%;text-align: left;">case 0: cout &lt;&lt; &quot;Good-bye.\n&quot;; break; case 1: myLobby.AddPlayer(); break; case 2: myLobby.RemovePlayer(); break; case 3: myLobby.Clear(); break;</p><p class="s35" style="padding-left: 103pt;text-indent: 0pt;line-height: 11pt;text-align: left;">default: cout &lt;&lt; &quot;That was not a valid choice.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while (choice != 0);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark1033">return 0;</a><a name="bookmark1098">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The function first instantiates a new <span class="s35">Lobby </span>object, and then it enters a loop that presents a menu and gets the user<span class="s12">’</span>s choice. Then it calls the corresponding <span class="s35">Lobby </span>object<span class="s12">’</span>s member function. If the user enters an invalid choice, he or she is told so. The loop continues until the user enters <span class="s35">0</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a359">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Aggregation is the combining of objects so that one is part of another.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Friend functions have complete access to any member of a class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Operator overloading allows you to define new meanings for built-in operators as they relate to objects of your own classes.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">The stack is an area of memory that is automatically managed for you and is used for local variables.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">The heap (or free store) is an area of memory that you, the programmer, can use to allocate and free memory.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span>The <span class="s35">new </span>operator allocates memory on the heap and returns its address.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>The <span class="s35">delete </span>operator frees memory on the heap that was previously allocated.</p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A dangling pointer points to an invalid memory location. Dereferencing or deleting a dangling pointer can cause your program to crash.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1099">326 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">A memory leak is an error in which memory that has been allocated becomes inaccessible and can no longer be freed. Given a large enough leak, a program might run out of memory and crash.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A destructor is a member function that<span class="s12">’</span>s called just before an object is destroyed. If you don<span class="s12">’</span>t write a destructor of your own, the complier will supply a default destructor for you.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><a name="bookmark1034"><span class="s29">n </span></a>The copy constructor is a member function that<span class="s12">’</span>s invoked when an automatic copy of an object is made. A default copy constructor is supplied for a class if you don<span class="s12">’</span>t write one of your own.<a name="bookmark1100">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">The default copy constructor simply copies the value of each data member to data members with the same names in the copy, producing a member-wise copy.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">Member-wise copying can produce a shallow copy of an object, in which the pointer data members of the copy point to the same chunks of memory as the pointers in the original object.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A deep copy is a copy of an object that has no chunks of memory in common with the original.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span>A default assignment operator member function, which provides only member-wise duplication, is supplied for you if you don<span class="s12">’</span>t write one of your own.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><span class="s29">n </span>The <span class="s35">this </span>pointer is a pointer that all non-static member functions automatically have; it points to the object that was used to call the function.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="s30" name="a360">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Why should you use aggregation?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: To create more complex objects from other objects. Q: What is composition?</p><p style="padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: A form of aggregation in which the composite object is responsible for the creation and destruction of its object parts. Composition is often called a <span class="s12">“</span>uses a<span class="s12">” </span>relationship.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Questions and Answers 327</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When should I use a friend function?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: When you need a function to have access to the non-public members of a class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What is a friend member function?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: A member function of one class that can access all of the members of another class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What is a friend class?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A class that can access all of the members of another class. Q: Can<span class="s12">’</span>t operator overloading become confusing?</p><p style="padding-left: 57pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Yes. Giving too many meanings or unintuitive meanings to operators can lead to code that<span class="s12">’</span>s difficult to understand.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What happens when I instantiate a new object on the heap?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: All of the data members will occupy memory on the heap and not on the stack.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can I access an object through a constant pointer?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Sure. But you can only access constant member functions through a constant pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s wrong with shallow copies?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">A: Because shallow copies share references to the same chunks of memory, a change to one object will be reflected in another object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What is a linked list?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">A: A dynamic data structure that consists of a sequence of linked nodes. Q: How is a linked list different from a vector?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Linked lists permit insertion and removal of nodes at any point in the list but do not allow random access, like vectors. However, the insertion and deletion of nodes in the middle of the list can be more efficient than the insertion and deletion of elements in the middle of vectors.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1035">328 Chapter 9 </a><span class="s32">n </span>Advanced Classes and Dynamic Memory: Game Lobby<a name="bookmark1101">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">Q: Is there a container class from the STL that serves as a linked list? A: Yes, the <span class="s35">list </span>class.</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">Q: Is the data structure used in the Game Lobby program a linked list? A: It shares similarities to a linked list, but it is really a queue.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What<span class="s12">’</span>s a queue?</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: A data structure in which elements are removed in the same order in which they were entered. This process is often called first in, first out (FIFO).</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;"><a name="bookmark1036">Q: Is there a kind of container from the STL that serves as a queue? A: Yes, the </a><span class="s35">queue </span>container adaptor.<a name="bookmark1102">&zwnj;</a></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a361">Discussion Questions</a></p><ol id="l21"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What types of game entities could you create with aggregation?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Do friend functions undermine encapsulation in OOP?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What advantages does dynamic memory offer to game programs?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Why are memory leaks difficult errors to track down?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Should objects that allocate memory on the heap always be required to free it?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a362">Exercises</a></p><ol id="l22"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Improve the <span class="s35">Lobby </span>class from the Game Lobby program by writing a friend function of the <span class="s35">Player </span>class that allows a <span class="s35">Player </span>object to be sent to <span class="s35">cout</span>. Next, update the function that allows a <span class="s35">Lobby </span>object to be sent to <span class="s35">cout </span>so that it uses your new function for sending a <span class="s35">Player </span>object to <span class="s35">cout</span>.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">The <span class="s35">Lobby::AddPlayer()  </span>member function from the Game Lobby pro- gram is inefficient because it iterates through all of the player nodes to add a new player to the end of the line. Add an <span class="s35">m_pTail  </span>pointer data member to the <span class="s35">Lobby  </span>class that always points to the last player node in the line and use it to more efficiently add a player.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Exercises 329</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">What<span class="s12">’</span>s wrong with the following code?</p></li></ol><p class="s35" style="padding-top: 5pt;padding-left: 64pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 64pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">int* pScore = new int;</p><p class="s35" style="padding-top: 2pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">*pScore = 500;</p><p class="s35" style="padding-top: 2pt;padding-left: 84pt;text-indent: 0pt;line-height: 119%;text-align: left;">pScore = new int(1000); delete pScore;</p><p class="s35" style="padding-left: 84pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pScore = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 84pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 64pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">This page intentionally left blank</p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s27" name="bookmark1103">chapter 10</a><a name="bookmark1144">&zwnj;</a><a name="bookmark1145">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_412.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s28" name="bookmark1104">Inheritance and Polymorphism: Blackjack</a><a name="bookmark1146">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Classes give you the perfect way to represent game entities that have attributes and behaviors. But game entities are often related. In this chapter, you<span class="s12">’</span>ll learn about inheritance and polymorphism, which give you ways to express those connections and can make defining and using classes even simpler and more intuitive. Specifically, you<span class="s12">’</span>ll learn to:</p><p class="s29" style="padding-top: 9pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Derive one class from another</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Use inherited data members and member functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Override base class member functions</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Define virtual functions to enable polymorphism</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Declare pure virtual functions to define abstract classes</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="s30" name="a363">Introducing Inheritance</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">One of the key elements of OOP is <span class="s11">inheritance</span>, which allows you to <span class="s11">derive </span>a new class from an existing one. When you do so, the new class automatically <span class="s11">inherits </span>(or gets) the data members and member functions of an existing class. It<span class="s12">’</span>s like getting the work that went into the existing class for free!</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Inheritance is especially useful when you want to create a more specialized version of an existing class because you can add data members and member functions to the new class to extend it. For example, imagine you have a class <span class="s35">Enemy </span>that defines an enemy in a game with a member function <span class="s35">Attack() </span>and a</p><p class="s19" style="padding-top: 10pt;text-indent: 0pt;text-align: right;">331</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1147">332 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">data member <span class="s35">m_Damage</span>. You can derive a new class <span class="s35">Boss </span>from <span class="s35">Enemy </span>for a boss. This means that <span class="s35">Boss </span>could automatically have <span class="s35">Attack() </span>and <span class="s35">m_Damage </span>without you having to write any code for them at all. Then, to make a boss tough, you could add a member function <span class="s35">SpecialAttack() </span>and a data member <span class="s35">DamageMultiplier </span>to the <span class="s35">Boss  </span>class. Take a look at Figure 10.1, which shows the relationship between the <span class="s35">Enemy </span>and <span class="s35">Boss  </span>classes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="116" height="349" alt="image" src="Image_413.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 10.1</p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">Boss <span class="s19">inherits </span>Attack() <span class="s19">and </span>m_Damage <span class="s19">from </span>Enemy <span class="s19">while defining </span>SpecialAttack() <span class="s19">and</span></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">m_DamageMultiplier<span class="s19">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">One of the many advantages of inheritance is that you can reuse classes you<span class="s12">’</span>ve already written. This reusability produces benefits that include:</p><p style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><span class="s29">n </span><b>Less work</b>. There<span class="s12">’</span>s no need to redefine functionality you already have.</p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">Once you have a class that provides the base functionality for other classes, you don<span class="s12">’</span>t have to write that code again.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>Fewer errors</b>. Once you<span class="s12">’</span>ve got a bug-free class, you can reuse it without errors cropping up in it.</p><p class="s19" style="padding-top: 2pt;padding-left: 321pt;text-indent: 0pt;text-align: left;"><a name="bookmark1105">Introducing Inheritance 333</a><a name="bookmark1148">&zwnj;</a><a name="bookmark1149">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;"><span class="s29">n </span><b>Cleaner code</b>. Because the functionality of base classes exist only once in a program, you don<span class="s12">’</span>t have to wade through the same code repeatedly, which makes programs easier to understand and modify.</p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Most related game entities cry out for inheritance. Whether it<span class="s12">’</span>s the series of enemies that a player faces, squadrons of military vehicles that a player commands, or an inventory of weapons that a player wields, you can use inheritance to define these groups of game entities in terms of each other, which results in faster and easier programming.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a364">Introducing the Simple Boss </a><h1 href="#bookmark12">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Simple Boss program demonstrates inheritance. In it, I define a class for lowly enemies,  <span class="s35">Enemy</span>.  From  this  class,  I  derive  a  new  class  for  tough  bosses  that  the player has to face, <span class="s35">Boss</span>. Then, I instantiate an <span class="s35">Enemy  </span>object and call its <span class="s35">Attack() </span>member function. Next, I instantiate a <span class="s35">Boss </span>object. I<span class="s12">’</span>m able to call <span class="s35">Attack() </span>for the <span class="s35">Boss </span>object because it inherits the member function from <span class="s35">Enemy</span>. Finally, I call the <span class="s35">Boss  </span>object<span class="s12">’</span>s  <span class="s35">SpecialAttack()  </span>member  function,  which  I  defined  in  <span class="s35">Boss</span>,  for  a special  attack.  Since  I  define  <span class="s35">SpecialAttack()  </span>in  <span class="s35">Boss</span>,  only  <span class="s35">Boss  </span>objects  have access to it. <span class="s35">Enemy </span>objects don<span class="s12">’</span>t have this special attack at their disposal. Figure 10.2 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_414.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 10.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Boss </span>class inherits the <span class="s35">Attack() </span>member function and then defines its own <span class="s35">SpecialAttack()</span></p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">member function.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">334 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">simple_boss.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Simple Boss</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates inheritance</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Damage;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Enemy();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void Attack() const;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Enemy::Enemy(): m_Damage(10)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Attack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Attack inflicts &quot; &lt;&lt; m_Damage &lt;&lt; &quot; damage points!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_DamageMultiplier;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Boss();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void SpecialAttack() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss::Boss():</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_DamageMultiplier(3)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p class="s19" style="padding-top: 2pt;padding-left: 321pt;text-indent: 0pt;text-align: left;"><a name="bookmark1150">Introducing Inheritance 335</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::SpecialAttack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Special Attack inflicts &quot; &lt;&lt; (m_DamageMultiplier * m_Damage); cout &lt;&lt; &quot; damage points!\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;Creating an enemy.\n&quot;; Enemy enemy1;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;"><a name="bookmark1106">enemy1.Attack();</a><a name="bookmark1151">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nCreating a boss.\n&quot;; Boss boss1;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">boss1.Attack(); boss1.SpecialAttack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a365">Deriving from a Base </a><h1 href="#bookmark12">Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I derive the <span class="s35">Boss </span>class from <span class="s35">Enemy </span>when I define <span class="s35">Boss </span>with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><span class="s35">Boss </span>is based on <span class="s35">Enemy</span>. In fact, <span class="s35">Enemy </span>is called the <span class="s11">base class </span>(or <span class="s11">superclass</span>) and <span class="s35">Boss </span>the <span class="s11">derived class </span>(or <span class="s11">subclass</span>). This means that <span class="s35">Boss </span>inherits <span class="s35">Enemy</span><span class="s12">’</span>s data members and member functions, subject to access controls. In this case, <span class="s35">Boss </span>inherits and can directly access <span class="s35">m_Damage </span>and <span class="s35">Attack()</span>. It<span class="s12">’</span>s as if I defined both <span class="s35">m_Damage </span>and <span class="s35">Attack() </span>in <span class="s35">Boss</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_415.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You  might  have  noticed  that I  made all  of  the members  of  the  classes  pubic,  including  their data members. I did this because it makes for the simplest first example of a base and derived class.  You  also  might  have  noticed  that  I  used  the  keyword  <span class="s35">public  </span>when  deriving  <span class="s35">Boss </span>from  <span class="s35">Enemy</span>.  For  now,  don’t  worry  about  this.  I’ll  cover  it  all  in  the  next  example  program, Simple Boss 2.0.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_416.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1152">336 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To derive classes of your own, follow my example. After the class name in a class definition, put a colon followed by an access modifier (such as <span class="s35">public</span>), followed by the name of the base class. It<span class="s12">’</span>s perfectly acceptable to derive a new class from a derived class, and sometimes it makes perfect sense to do so. However, to keep things simple, I<span class="s12">’</span>m only going to deal with one level of inheritance in this example.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">There are actually a few base class member functions that are not inherited by derived classes. They are as follows:</p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;"><a name="bookmark1107">n </a><span class="p">Constructors</span><a name="bookmark1153">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Copy constructors</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Destructors</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Overloaded assignment operators</span></p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">You have to write your own versions of these in the derived class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a366">Instantiating Objects from a Derived </a><h1 href="#bookmark12">Class</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In <span class="s35">main()</span>, I instantiate an <span class="s35">Enemy </span>object and then call its <span class="s35">Attack() </span>member function. This works just as you<span class="s12">’</span>d expect. The interesting part of the program begins next, when I instantiate a <span class="s35">Boss </span>object.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Boss boss1;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After this line of code, I have a <span class="s35">Boss </span>object with an <span class="s35">m_Damage </span>data member equal to <span class="s35">10 </span>and an <span class="s35">m_DamageMultiplier </span>data member equal to <span class="s35">3</span>. How did this happen? Although constructors and destructors are not inherited from a base class, they are called when an instance is created or destroyed. In fact, a base class constructor is called before the derived class constructor to create its part of the final object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In this case, when a <span class="s35">Boss </span>object is instantiated, the default <span class="s35">Enemy </span>constructor is automatically called and the object gets an <span class="s35">m_Damage </span>data member with a value of <span class="s35">10 </span>(just like any <span class="s35">Enemy </span>object would). Then, the <span class="s35">Boss </span>constructor is called and finishes off the object by giving it an <span class="s35">m_DamageMultiplier </span>data member with a value of <span class="s35">3</span>. The reverse happens when a <span class="s35">Boss </span>object is destroyed at the end of the program. First, the <span class="s35">Boss </span>class destructor is called for the object, and then the</p><p class="s19" style="padding-top: 2pt;padding-left: 258pt;text-indent: 0pt;text-align: left;"><a name="bookmark1108">Controlling Access under Inheritance 337</a><a name="bookmark1154">&zwnj;</a><a name="bookmark1155">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">Enemy </span>class destructor is called. Because I didn<span class="s12">’</span>t define destructors in this program, nothing special happens before the <span class="s35">Boss </span>object ceases to exist.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_417.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The fact that base class destructors are called for objects of derived classes ensures that each class gets its chance to clean up any part of the object that needs to be taken care of, such as memory on the heap.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_418.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a367"><h1 href="#bookmark12">Using Inherited Members</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1109">Next, I call an inherited member function of the </a><span class="s35">Boss </span>object, which displays the exact same message as <span class="s35">enemy1.Attack()</span>.<a name="bookmark1156">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">boss1.Attack();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">That makes perfect sense because the same code is being executed and both objects have an <span class="s35">m_Damage </span>data member equal to <span class="s35">10</span>. Notice that the function call looks the same as it did for <span class="s35">enemy1</span>. The fact that <span class="s35">Boss </span>inherited the member function from <span class="s35">Enemy </span>makes no difference in how the function is called.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 123%;text-align: justify;">Next, I get <span class="s35">Boss </span>to pull out its special attack, which displays the message <span class="s35">Special Attack inflicts 30 damage points!</span></p><p class="s35" style="padding-top: 4pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">boss1.SpecialAttack();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The thing to notice about this is that <span class="s35">SpecialAttack()</span>, declared as a part of <span class="s35">Boss</span>, uses the data member <span class="s35">m_Damage</span>, declared in <span class="s35">Enemy</span>. That<span class="s12">’</span>s perfectly fine. <span class="s35">Boss </span>inherits <span class="s35">m_Damage </span>from <span class="s35">Enemy </span>and, in this example, the data member works like any other data member in the <span class="s35">Boss </span>class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a368">Controlling Access under Inheritance</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you derive one class from another, you can control how much access the derived class has to the base class<span class="s12">’ </span>members. For the same reasons that you want to provide only as much access as is necessary to a class<span class="s12">’ </span>members to the rest of your program, you want to provide only as much access as is necessary to a class<span class="s12">’ </span>members to a derived class. Not coincidentally, you use the same access modifiers that you<span class="s12">’</span>ve seen before<span class="s12">—</span><span class="s35">public</span>, <span class="s35">protected</span>, and <span class="s35">private</span>. (Okay, you haven<span class="s12">’</span>t seen <span class="s35">protected </span>before, but I<span class="s12">’</span>ll explain that modifier in the <span class="s12">“</span>Using Access Modifiers with Class Members<span class="s12">” </span>section.)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1110">338 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1157">&zwnj;</a><a name="bookmark1158">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a369">Introducing the Simple Boss 2.0 </a><h1 href="#bookmark12">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The Simple Boss 2.0 program is another version of the Simple Boss program from earlier in this chapter. The new version, Simple Boss 2.0, looks exactly the same to the user, but the code is a little different because I put some restrictions on base class members. If you want to see what the program does, take a look back at Figure 10.2.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">simple_boss2.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Simple Boss 2.0</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates access control under inheritance</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Enemy();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void Attack() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Damage;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Enemy::Enemy(): m_Damage(10)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Attack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Attack inflicts &quot; &lt;&lt; m_Damage &lt;&lt; &quot; damage points!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Boss();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void SpecialAttack() const;</p><p class="s19" style="padding-top: 2pt;padding-left: 258pt;text-indent: 0pt;text-align: left;"><a name="bookmark1159">Controlling Access under Inheritance 339</a><a name="bookmark1160">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_DamageMultiplier;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss::Boss():</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_DamageMultiplier(3)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::SpecialAttack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark1111">cout &lt;&lt; &quot;Special Attack inflicts &quot; &lt;&lt; (m_DamageMultiplier * m_Damage); cout &lt;&lt; &quot; damage points!\n&quot;;</a><a name="bookmark1161">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Creating an enemy.\n&quot;; Enemy enemy1;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">enemy1.Attack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\nCreating a boss.\n&quot;; Boss boss1;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">boss1.Attack(); boss1.SpecialAttack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a370">Using Access Modifiers with Class </a><h1 href="#bookmark12">Members</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>ve seen the access modifiers <span class="s35">public </span>and <span class="s35">private </span>used with class members before, but there<span class="s12">’</span>s a third modifier you can use with members of a class<span class="s12">— </span><span class="s35">protected</span>. That<span class="s12">’</span>s what I use with the data member of <span class="s35">Enemy</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Damage;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Members that are specified as <span class="s35">protected </span>are not accessible outside of the class, except in some cases of inheritance. As a refresher, here are the three levels of member access:</p><p class="s29" style="padding-top: 8pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="s35">public </span><span class="p">members are accessible to all code in a program.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1112">340 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1162">&zwnj;</a><a name="bookmark1163">&zwnj;</a><a name="bookmark1164">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="s35">protected </span><span class="p">members are accessible only in their own class and certain derived classes, depending upon the access level used in inheritance.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="s35">private </span><span class="p">members are only accessible in their own class, which means they are not directly accessible in any derived class.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="h1" name="a371">Using Access Modifiers When Deriving </a><h1 href="#bookmark12">Classes</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you derive a class from an existing one, you can use an access modifier, such as <span class="s35">public</span>, which I used in deriving <span class="s35">Boss</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1113">class Boss : public Enemy</a><a name="bookmark1165">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Using public derivation means that public members in the base class become public members in the derived class, protected members in the base class become protected members in the derived class, and private members in the base class are inaccessible in the derived class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_419.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Even if base data members are private, you can still use them indirectly through base class member functions. You can even get and set their values if the base class has accessor member functions.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_420.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Because <span class="s35">Boss </span>inherits from <span class="s35">Enemy </span>using the keyword <span class="s35">public</span>, <span class="s35">Boss </span>inherits <span class="s35">Enemy</span><span class="s12">’</span>s public member functions as public member functions. It also means that <span class="s35">Boss </span>inherits <span class="s35">m_Damage </span>as a protected data member. The class essentially acts as if I simply copied and pasted the code for these two <span class="s35">Enemy </span>class members right into the <span class="s35">Boss </span>definition. But through the beauty of inheritance, I didn<span class="s12">’</span>t have to do this. The upshot is that the <span class="s35">Boss </span>class can access <span class="s35">Attack() </span>and <span class="s35">m_Damage()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_421.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">You can derive a new class with the <span class="s35">protected </span>and <span class="s35">private </span>keywords, but they’re rarely used and are beyond the scope of this book.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_422.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a372">Calling and Overriding Base Class Member Functions</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You<span class="s12">’</span>re not stuck with every base class member function you inherit in a derived class as is. You have options that allow you to customize how those inherited member functions work in your derived class. You can override them by giving</p><p class="s19" style="padding-top: 2pt;padding-left: 183pt;text-indent: 0pt;text-align: left;"><a name="bookmark1114">Calling and Overriding Base Class Member Functions 341</a><a name="bookmark1166">&zwnj;</a><a name="bookmark1167">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">them new definitions in your derived class. You can also explicitly call a base class member function from any member function of your derived class.</p><p style="padding-top: 9pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a373">Introducing the Overriding Boss </a><h1 href="#bookmark12">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Overriding Boss program demonstrates calling and overriding base class member functions in a derived class. The program creates an enemy that taunts the player and then attacks him. Next, the program creates a boss from a derived class. The boss also taunts the player and attacks him, but the interesting thing is that the inherited behaviors of taunting and attacking are changed for the boss (who is a bit cockier than the enemy). These changes are accomplished through function overriding and calling a base class member function. Figure 10.3 shows the results of the program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_423.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Figure 10.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The <span class="s35">Boss </span>class inherits and overrides the base class member functions <span class="s35">Taunt() </span>and <span class="s35">Attack()</span>, creating new behaviors for the functions in <span class="s35">Boss</span>.</p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">overriding_boss.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Overriding Boss</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 206%;text-align: left;">//Demonstrates calling and overriding base member functions #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">342 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Enemy(int damage = 10); void virtual Taunt() const;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Attack() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 7pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">//made virtual to be overridden</p><p class="s35" style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">//made virtual to be overridden</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Damage;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Enemy::Enemy(int damage): m_Damage(damage)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Taunt() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The enemy says he will fight you.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Attack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Attack! Inflicts &quot; &lt;&lt; m_Damage &lt;&lt; &quot; damage points.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Boss(int damage = 30);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">void virtual Taunt() const;            //optional use of keyword virtual void virtual Attack() const;          //optional use of keyword virtual</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss::Boss(int damage):</p><p class="s35" style="padding-top: 2pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">Enemy(damage)                        //call base class constructor with argument</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::Taunt() const          //override base class member function</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The boss says he will end your pitiful existence.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 183pt;text-indent: 0pt;text-align: left;"><a name="bookmark1168">Calling and Overriding Base Class Member Functions 343</a><a name="bookmark1169">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::Attack() const        //override base class member function</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">Enemy::Attack();                  //call base class member function cout &lt;&lt; &quot; And laughs heartily at you.\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark1115">cout &lt;&lt; &quot;Enemy object:\n&quot;; Enemy anEnemy; anEnemy.Taunt(); anEnemy.Attack();</a><a name="bookmark1170">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;\n\nBoss object:\n&quot;; Boss aBoss;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">aBoss.Taunt(); aBoss.Attack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a374"><h1 href="#bookmark12">Calling Base Class Constructors</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">As you<span class="s12">’</span>ve seen, the constructor for a base class is automatically called when an object of a derived class is instantiated, but you can also explicitly call a base class constructor from a derived class constructor. The syntax for this is a lot like the syntax for a member initialization list. To call a base class constructor from a derived class constructor, after the derived constructor<span class="s12">’</span>s parameter list, type a colon followed by the name of the base class, followed by a set of parentheses containing whatever parameters the base class constructor you<span class="s12">’</span>re calling needs. I do this in the <span class="s35">Boss </span>constructor, which says to explicitly call the <span class="s35">Enemy </span>constructor and pass it <span class="s35">damage</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Boss::Boss(int damage):</p><p class="s35" style="padding-top: 2pt;padding-left: 52pt;text-indent: 0pt;text-align: center;">Enemy(damage)                        //call base class constructor with argument</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">This allows me to pass the <span class="s35">Enemy </span>constructor the value that gets assigned to</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">m_Damage<span class="p">, rather than just accepting its default value.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When I first instantiate <span class="s35">aBoss </span>in <span class="s35">main()</span>, the <span class="s35">Enemy </span>constructor is called and passed the value <span class="s35">30</span>, which gets assigned to <span class="s35">m_Damage</span>. Then, the <span class="s35">Boss </span>constructor runs (which doesn<span class="s12">’</span>t do much of anything) and the object is completed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1116">344 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1171">&zwnj;</a><a name="bookmark1172">&zwnj;</a><a name="bookmark1173">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_424.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Being able to call a base class constructor is useful when you want to pass specific values to it.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_425.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="h1" name="a375">Declaring Virtual Base Class Member </a><h1 href="#bookmark12">Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1117">Any inherited base class member function that you expect to be overridden in a derived class should be declared as virtual, using the keyword </a><span class="s35">virtual</span>. When you declare a member function virtual, you provide a way for overridden versions of the member function to work as expected with pointers and references to objects. Since I know that I<span class="s12">’</span>ll override <span class="s35">Taunt() </span>in the derived class, <span class="s35">Boss</span>, I declare <span class="s35">Taunt() </span>virtual in my base class, <span class="s35">Enemy</span>.<a name="bookmark1174">&zwnj;</a></p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Taunt() const;          //made virtual to be overridden</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_426.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Although you can override non-virtual member functions, this can lead to behavior you might not expect. A good rule of thumb is to declare any base class member function to be overridden as virtual.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_427.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Outside the <span class="s35">Enemy </span>class definition, I define <span class="s35">Taunt()</span>:</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Taunt() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The enemy says he will fight you.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Notice that I didn<span class="s12">’</span>t use the keyword <span class="s35">virtual </span>in the definition. You don<span class="s12">’</span>t use</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">virtual <span class="p">in the definition of a member function, only in its declaration.</span></p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Once a member function has been declared as virtual, it<span class="s12">’</span>s virtual in any derived class. This means you don<span class="s12">’</span>t have to use the keyword <span class="s35">virtual </span>in a declaration when you override a virtual member function, but you should use it anyway because it will remind you that the function is indeed virtual. So, when I override <span class="s35">Taunt() </span>in <span class="s35">Boss</span>, I explicitly declare it as virtual, even though I don<span class="s12">’</span>t have to:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Taunt() const;            //optional use of keyword virtual</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a376">Overriding Virtual Base Class Member </a><h1 href="#bookmark12">Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The next step in overriding is to give the member function a new definition in the derived class. That<span class="s12">’</span>s what I do for the <span class="s35">Boss </span>class with:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">void Boss::Taunt() const          //override base class member function</p><p class="s19" style="padding-top: 2pt;padding-left: 183pt;text-indent: 0pt;text-align: left;"><a name="bookmark1175">Calling and Overriding Base Class Member Functions 345</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The boss says he will end your pitiful existence.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">This new definition is executed when I call the member function through any <span class="s35">Boss </span>object. It replaces the definition of <span class="s35">Taunt() </span>inherited from <span class="s35">Enemy </span>for all <span class="s35">Boss </span>objects. When I call the member function in <span class="s35">main() </span>with the following line, the message <span class="s35">The boss says he will end your pitiful existence. </span>is displayed.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">aBoss.Taunt();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1118">Overriding member functions is useful when you want to change or extend the behavior of base class member functions in derived classes.</a><a name="bookmark1176">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_428.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">Don’t confuse override with overload. When you override a member function, you provide a new definition of it in a derived class. When you overload a function, you create multiple versions of it with different signatures.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_429.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_430.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">When you override an overloaded base class member function, you hide all of the other overloaded versions of the base class member function—meaning that the only way to access the other versions of the member function is to explicitly call the base class member function. So if you override an overloaded member function, it’s a good idea to override every version of the overloaded function.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_431.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="h1" name="a377">Calling Base Class Member </a><h1 href="#bookmark12">Functions</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You can directly call a base class member function from any function in a derived class. All you have to do is prefix the class name to the member function name with the scope resolution operator. That<span class="s12">’</span>s what I do when I define the overridden version of <span class="s35">Attack() </span>for the <span class="s35">Boss </span>class.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::Attack() const         //override base class member function</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Enemy::Attack();                  //call base class member function cout &lt;&lt; &quot; And laughs heartily at you.\n&quot;;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The code <span class="s35">Enemy::Attack(); </span>explicitly calls the <span class="s35">Attack() </span>member function of</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s35">Enemy</span>. Because the <span class="s35">Attack() </span>definition in <span class="s35">Boss </span>overrides the class<span class="s12">’ </span>inherited</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1177">346 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">version, it<span class="s12">’</span>s as if I<span class="s12">’</span>ve extended the definition of what it means for a boss to attack. What I<span class="s12">’</span>m essentially saying is that when a boss attacks, the boss does exactly what an enemy does and then laughs. When I call the member function for a <span class="s35">Boss </span>object in <span class="s35">main() </span>with the following line, <span class="s35">Boss</span><span class="s12">’ </span><span class="s35">Attack() </span>member function is called because I<span class="s12">’</span>ve overloaded <span class="s35">Attack()</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">aBoss.Attack();</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1119"><span class="p">The  first  thing  that  </span></a>Boss<span class="s12">’  </span>Attack()  <span class="p">member  function  does  is  explicitly  call </span>Enemy<span class="s12">’</span><span class="p">s   </span>Attack()   <span class="p">member   function,   which   displays   the   message   </span>Attack! Inflicts  30  damage  points.  <span class="p">Then,  </span>Boss<span class="s12">’  </span>Attack()  <span class="p">member  function  displays the message </span>And laughs heartily at you.<a name="bookmark1178">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_432.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">You can extend the way a member function of a base class works in a derived class by overriding the base class method and then explicitly calling the base class member function from this new definition in the derived class and adding some functionality.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="492" height="3" alt="image" src="Image_433.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a378">Using Overloaded Assignment Operators and Copy Constructors in Derived Classes</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You already know how to write an overloaded assignment operator and a copy constructor for a class. However, writing them for a derived class requires a little bit more work because they aren<span class="s12">’</span>t inherited from a base class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">When you overload the assignment operator in a derived class, you usually want to call the assignment operator member function from the base class, which you can explicitly call using the base class name as a prefix. If <span class="s35">Boss </span>is derived from <span class="s35">Enemy</span>, the overloaded assignment operator member function defined in <span class="s35">Boss </span>could start:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss&amp; operator=(const Boss&amp; b)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Enemy::operator=(b);        //handles the data members inherited from Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//now take care of data members defined in Boss</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The explicit call to <span class="s35">Enemy</span><span class="s12">’</span>s assignment operator member function handles the data members inherited from <span class="s35">Enemy</span>. The rest of the member function would take care of the data members defined in <span class="s35">Boss</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 308pt;text-indent: 0pt;text-align: left;"><a name="bookmark1120">Introducing Polymorphism 347</a><a name="bookmark1179">&zwnj;</a><a name="bookmark1180">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">For the copy constructor, you also usually want to call the copy constructor from a base class, which you can call just like any base class constructor. If <span class="s35">Boss </span>is derived from <span class="s35">Enemy</span>, the copy constructor defined in <span class="s35">Boss </span>could start:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss (const Boss&amp; b): Enemy(b)    //handles the data members inherited from Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//now take care of data members defined in Boss</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">By calling <span class="s35">Enemy</span><span class="s12">’</span>s copy constructor with <span class="s35">Enemy(b)</span>, you copy that <span class="s35">Enemy</span><span class="s12">’</span>s data members into the new <span class="s35">Boss </span>object. In the remainder of <span class="s35">Boss</span><span class="s12">’ </span>copy constructor, you can take care of copying the data members declared in <span class="s35">Boss </span>into the new object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="s30" name="bookmark1121">Introducing Polymorphism</a><a name="bookmark1181">&zwnj;</a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">One of the pillars of OOP is <span class="s11">polymorphism</span>, which means that a member function will produce different results depending on the type of object for which it is being called. For example, suppose you have a group of bad guys that the player is facing, and the group is made of objects of different types that are related through inheritance, such as enemies and bosses. Through the magic of polymorphism, you could call the same member function for each bad guy in the group, say to attack the player, and the type of each object would determine the exact results. The call for the enemy objects could produce one result, such as a weak attack, while the call for bosses could produce a different result, such as a powerful attack. This might sound a lot like overriding, but polymorphism is different because the effect of the function call is dynamic and is determined at run time, depending on the object type. But the best way to understand this isn<span class="s12">’</span>t through theoretical discussion; it is through a concrete example.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark12" class="h1" name="a379">Introducing the Polymorphic Bad Guy </a><h1 href="#bookmark12">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Polymorphic Bad Guy program demonstrates how to achieve polymorphic behavior. It shows what happens when you use a pointer to a base class to call inherited virtual member functions. It also shows how using virtual destructors ensures that the correct destructors are called for objects pointed to by pointers to a base class. Figure 10.4 shows the results of the program.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">polymorphic_bad_guy.cpp</span>.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">348 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_434.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 10.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Through polymorphism the correct member functions and destructors are called for objects pointed to by pointers to a base class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">//Polymorphic Bad Guy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">//Demonstrates calling member functions dynamically #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Enemy(int damage = 10); virtual ~Enemy();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Attack() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* m_pDamage;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Enemy::Enemy(int damage)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pDamage = new int(damage);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 308pt;text-indent: 0pt;text-align: left;">Introducing Polymorphism 349</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Enemy::~Enemy()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;In Enemy destructor, deleting m_pDamage.\n&quot;; delete m_pDamage;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">m_pDamage = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Enemy::Attack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;An enemy attacks and inflicts &quot; &lt;&lt; *m_pDamage &lt;&lt; &quot; damage points.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Boss : public Enemy</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Boss(int multiplier = 3); virtual ~Boss();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">void virtual Attack() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int* m_pMultiplier;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss::Boss(int multiplier)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pMultiplier = new int(multiplier);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Boss::~Boss()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;In Boss destructor, deleting m_pMultiplier.\n&quot;; delete m_pMultiplier;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">m_pMultiplier = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Boss::Attack() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;A boss attacks and inflicts &quot; &lt;&lt; (*m_pDamage) * (*m_pMultiplier)</p><p class="s35" style="padding-top: 2pt;padding-left: 88pt;text-indent: 0pt;text-align: left;">&lt;&lt; &quot; damage points.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1122">350 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1182">&zwnj;</a><a name="bookmark1183">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Calling Attack() on Boss object through pointer to Enemy:\n&quot;; Enemy* pBadGuy = new Boss();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">pBadGuy-&gt;Attack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\n\nDeleting pointer to Enemy:\n&quot;; delete pBadGuy;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">pBadGuy = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a380"><h1 href="#bookmark12">Using Base Class Pointers to Derived Class Objects</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">An object of a derived class is also a member of the base class. For example, in the Polymorphic Bad Guy program, a <span class="s35">Boss </span>object is an <span class="s35">Enemy </span>object, too. That makes sense because a boss is really only a specialized kind of enemy. It also makes sense because a <span class="s35">Boss </span>object has all of the members of an <span class="s35">Enemy </span>object. Okay, so what? Well, because an object of a derived class is also a member of the base class, you can use a pointer to the base class to point to an object of the derived class. That<span class="s12">’</span>s what I do in <span class="s35">main() </span>with the following line, which instantiates a <span class="s35">Boss </span>object on the heap and creates a pointer to <span class="s35">Enemy</span>, <span class="s35">pBadGuy</span>, that points to the <span class="s35">Boss </span>object.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Enemy* pBadGuy = new Boss();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Why in the world would you want to do this? It<span class="s12">’</span>s useful because it allows you to deal with objects without requiring that you know their exact type. For example, you could have a function that accepts a pointer to <span class="s35">Enemy </span>that could work with either an <span class="s35">Enemy </span>or a <span class="s35">Boss </span>object. The function wouldn<span class="s12">’</span>t have to know the exact type of object being passed to it; it could work with the object to produce different results depending on the object<span class="s12">’</span>s type, as long as derived member functions were declared virtual. Because <span class="s35">Attack() </span>is virtual, the correct version of the member function will be called (based on the type of object) and will not be fixed by the type of pointer.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I prove that the behavior will be polymorphic in <span class="s35">main(). </span>Remember that <span class="s35">pBadGuy </span>is a pointer to <span class="s35">Enemy </span>that points to a <span class="s35">Boss </span>object. So, the following line calls the <span class="s35">Attack() </span>member function of a <span class="s35">Boss </span>object through a pointer to <span class="s35">Enemy</span>, which correctly results in the <span class="s35">Attack() </span>member function defined in <span class="s35">Boss </span>being</p><p class="s19" style="padding-top: 2pt;padding-left: 308pt;text-indent: 0pt;text-align: left;"><a name="bookmark1184">Introducing Polymorphism 351</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">called and the text <span class="s35">A boss attacks and inflicts 30 damage points. </span>being displayed on the screen.</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pBadGuy-&gt;Attack();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_435.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">Virtual functions produce polymorphic behavior through references as well as through pointers.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_436.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="519" height="1" alt="image" src="Image_437.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1123">If you override a non-virtual member function in a derived class and call that member function on a derived class object through a pointer to a base class, you’ll get the results of the base class member function and not the derived class member function definition. This is easier to understand with an example. If in the Polymorphic Bad Guy program I hadn’t declared </a><span class="s35">Attack() </span>as virtual, then when I invoked the member function through a pointer to <span class="s35">Enemy </span>on a <span class="s35">Boss </span>object with <span class="s35">pBadGuy-&gt;Attack();</span>, I would have gotten the message <span class="s35">An enemy attacks and inflicts 10 damage points. </span>This would have happened as a result of <i>early binding</i>, in which the exact member function is bound based on the pointer type—in this case, <span class="s35">Enemy</span>. But because <span class="s35">Attack() </span>is declared as virtual, the member function call is based on the type of object being pointed to at run time, <span class="s35">Boss </span>in this case, not fixed by pointer type. I achieve this polymorphic behavior as the result of <i>late binding </i>because <span class="s35">Attack() </span>is virtual. The moral of the story is that you should only override virtual member functions.<a name="bookmark1185">&zwnj;</a></p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_438.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_439.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The benefits of virtual functions aren’t free; there is a performance cost associated with the overhead. Therefore, you should use virtual functions only when you need them.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_440.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a381"><h1 href="#bookmark12">Defining Virtual Destructors</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you use a pointer to a base class to point to an object of a derived class, you have a potential problem. When you delete the pointer, only the base class<span class="s12">’ </span>destructor will be called for the object. This could lead to disastrous results because the derived class<span class="s12">’ </span>destructor might need to free memory (as the destructor for <span class="s35">Boss </span>does). The solution, as you might have guessed, is to make the base class<span class="s12">’ </span>destructor virtual. That way, the derived class<span class="s12">’ </span>destructor is called, which (as always) leads to the calling the base class<span class="s12">’ </span>destructor, giving every class the chance to clean up after itself.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I put this theory into action when I declare <span class="s35">Enemy</span><span class="s12">’</span>s destructor virtual.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual ~Enemy();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1186">352 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In  <span class="s35">main()</span>,  when  I  delete  the  pointer  pointing  to  the  <span class="s35">Boss  </span>object  with  the following line, the <span class="s35">Boss </span>object<span class="s12">’</span>s destructor is called, which frees the memory on the heap that <span class="s35">m_pDamageMultiplier  </span>points to and displays the message <span class="s35">In Boss</span></p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">destructor, deleting m_pMultiplier.</p><p class="s35" style="padding-top: 7pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">delete pBadGuy;</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;"><a name="bookmark1124">Then,  </a><span class="s35">Enemy</span><span class="s12">’</span>s  destructor  is  called,  which  frees  the  memory  on  the  heap  that <span class="s35">m_pDamage  </span>points  to  and  displays  the  message  <span class="s35">In  Enemy  destructor,  deleting m_pDamage. </span>The object is destroyed, and all memory associated with the object is freed.<a name="bookmark1125">&zwnj;</a><a name="bookmark1187">&zwnj;</a><a name="bookmark1188">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Tric k</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_441.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">A good rule of thumb is that if you have any virtual member functions in a class, you should make the destructor virtual, too.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_442.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="s30" name="a382">Using Abstract Classes</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">At times you might want to define a class to act as a base for other classes, but it doesn<span class="s12">’</span>t make sense to instantiate objects from this class because it<span class="s12">’</span>s so generic. For example, suppose you have a game with a bunch of types of creatures running around in it. Although you have a wide variety of creatures, they all have two things in common: They have a health value and they can offer a greeting. So, you could define a class, <span class="s35">Creature</span>, as a base from which to derive other classes, such as <span class="s35">Pixie</span>, <span class="s35">Dragon</span>, <span class="s35">Orc</span>, and so on. Although <span class="s35">Creature </span>is helpful, it doesn<span class="s12">’</span>t really make sense to instantiate a <span class="s35">Creature </span>object. It would be great if there were a way to indicate that <span class="s35">Creature </span>is a base class only, and not meant for instantiating objects. Well, C++ lets you define a kind of class just like this, called an <span class="s11">abstract class</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark12" class="h1" name="a383">Introducing the Abstract Creature </a><h1 href="#bookmark12">Program</h1></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The Abstract Creature program demonstrates abstract classes. In the program, I define an abstract class, <span class="s35">Creature</span>, which can be used as a base class for specific creature classes. I define one such class, <span class="s35">Orc</span>. Then, I instantiate an <span class="s35">Orc </span>object and call a member function to get the orc to grunt hello and another member function to display the orc<span class="s12">’</span>s health. Figure 10.5 shows the results of the program.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">Using Abstract Classes 353</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_443.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure 10.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The orc is an object instantiated from a class derived from an abstract class for all creatures.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">abstract_creature.cpp</span>.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Abstract Creature</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Demonstrates abstract classes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">#include &lt;iostream&gt; using namespace std;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">class Creature //abstract class</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Creature(int health = 100);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">virtual void Greet() const = 0;      //pure virtual member function virtual void DisplayHealth() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">int m_Health;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">Creature::Creature(int health): m_Health(health)</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1189">354 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Creature::DisplayHealth() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Health: &quot; &lt;&lt; m_Health &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Orc : public Creature</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;"><a name="bookmark1126">Orc(int health = 120); virtual void Greet() const;</a><a name="bookmark1190">&zwnj;</a></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Orc::Orc(int health): Creature(health)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Orc::Greet() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The orc grunts hello.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Creature* pCreature = new Orc(); pCreature-&gt;Greet();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">pCreature-&gt;DisplayHealth();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a384"><h1 href="#bookmark13">Declaring Pure Virtual Functions</h1></a></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">A <span class="s11">pure virtual function </span>is one to which you don<span class="s12">’</span>t need to give a definition. The logic behind this is that there might not be a good definition in the class for the member function. For example, I don<span class="s12">’</span>t think it makes sense to define the <span class="s35">Greet() </span>function in my <span class="s35">Creature </span>class because a greeting really depends on the specific type of creature<span class="s12">—</span>a pixie twinkles, a dragon blows a puff of smoke, and an orc grunts.</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1127">Using Abstract Classes 355</a><a name="bookmark1191">&zwnj;</a><a name="bookmark1192">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">You specify a pure virtual function by placing an equal sign and a zero at the end of the function header. That<span class="s12">’</span>s what I did in <span class="s35">Creature </span>with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual void Greet() const = 0;      //pure virtual member function</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When a class contains at least one pure virtual function, it<span class="s12">’</span>s an abstract class. Therefore, <span class="s35">Creature </span>is an abstract class. I can use it as the base class for other classes, but I can<span class="s12">’</span>t instantiate objects from it.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">An abstract class can have data members and virtual functions that are not pure virtual. In <span class="s35">Creature</span>, I declare a data member <span class="s35">m_Health </span>and a virtual member function <span class="s35">DisplayHealth()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a385"><h1 href="#bookmark13">Deriving a Class from an Abstract Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">When you derive a new class from an abstract class, you can override its pure virtual functions. If you override all of its pure virtual functions, then the new class is not abstract and you can instantiate objects from it. When I derive <span class="s35">Orc </span>from <span class="s35">Creature</span>, I override <span class="s35">Creature</span><span class="s12">’</span>s one pure virtual function with the following lines:</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Orc::Greet() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;The orc grunts hello.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This means I can instantiate an object from <span class="s35">Orc</span>, which is what I do in <span class="s35">main()</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">with the following line:</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Creature* pCreature = new Orc();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The code instantiates a new <span class="s35">Orc </span>object on the heap and assigns the memory location of the object to <span class="s35">pCreature</span>, a pointer to <span class="s35">Creature</span>. Even though I can<span class="s12">’</span>t instantiate an object from <span class="s35">Creature</span>, it<span class="s12">’</span>s perfectly fine to declare a pointer using the class. Like all base class pointers, a pointer to <span class="s35">Creature </span>can point to any object of a class derived from <span class="s35">Creature</span>, like <span class="s35">Orc</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I call <span class="s35">Greet()</span>, the pure virtual function that I override in <span class="s35">Orc </span>with the following line:</p><p class="s35" style="padding-top: 5pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pCreature-&gt;Greet();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The correct greeting, <span class="s35">The orc grunts hello.</span>, is displayed.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1128">356 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1193">&zwnj;</a><a name="bookmark1194">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Finally, I call <span class="s35">DisplayHealth()</span>, which I define in <span class="s35">Creature</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">pCreature-&gt;DisplayHealth();</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">It also displays the proper message, <span class="s35">Health: 120</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30" name="a386">Introducing the Blackjack Game</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1129">The final project for this chapter is a simplified version of the casino card game Blackjack (tacky green felt not included). The game works like this: Players are dealt cards with point values. Each player tries to reach a total of 21 without exceeding that amount. Numbered cards count as their face value. An ace counts as either 1 or 11 (whichever is best for the player), and any jack, queen, or king counts as 10.</a><a name="bookmark1195">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The computer is the house (the casino) and it competes against one to seven players. At the beginning of the round, all participants (including the house) are dealt two cards. Players can see all of their cards, along with their total. However, one of house<span class="s12">’</span>s cards is hidden for the time being.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Next, each player gets the chance to take one additional card at a time for as long as he likes. If a player<span class="s12">’</span>s total exceeds 21 (known as <span class="s11">busting</span>), the player loses. After all players have had the chance to take additional cards, the house reveals its hidden card. The house must then take additional cards as long as its total is 16 or less. If the house busts, all players who have not busted win. Otherwise, each remaining player<span class="s12">’</span>s total is compared to the house<span class="s12">’</span>s total. If the player<span class="s12">’</span>s total is greater than the house<span class="s12">’</span>s, he wins. If the player<span class="s12">’</span>s total is less than the house<span class="s12">’</span>s, he loses. If the two totals are the same, the player ties the house (also known as <span class="s11">pushing</span>). Figure 10.6 shows the game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 8pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a387"><h1 href="#bookmark13">Designing the Classes</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Before you start coding a project with multiple classes, it is helpful to map them out on paper. You might make a list and include a brief description of each class. Table 10.1 shows my first pass at such a list for the Blackjack game.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To keep things simple, all member functions will be public and all data members will be protected. Also, I<span class="s12">’</span>ll use only public inheritance, which means that each derived class will inherit all of its base class members.</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1196">Introducing the Blackjack Game 357</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="482" height="254" alt="image" src="Image_444.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">Figure 10.6</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">One player wins; the other is not so lucky.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="525" height="242" alt="image" src="Image_445.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A Blackjack game.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">None</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">GenericPlayer <span class="s41">A human Blackjack player.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">GenericPlayer <span class="s41">The computer player, the house.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Player</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">House Game</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A Blackjack playing card.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">A Blackjack hand. A collection of <span class="s57">Card </span>objects.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">A Blackjack deck. Has extra functionality that <span class="s57">Hand </span>doesn’t, such as shuffling and dealing.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">A generic Blackjack player. Not a full player, but the common elements of a human player and the computer player.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">GenericPlayer Hand</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">None</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">None</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">Hand</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Card</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Hand Deck</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.1 <span class="s44">Blackjack Classes</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Class Base Class Description</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">In addition to describing your classes in words, it helps to draw a family tree of sorts to visualize how your classes are related. That<span class="s12">’</span>s what I did in Figure 10.7.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, it<span class="s12">’</span>s a good idea to get more specific. Ask yourself about the classes. What exactly will they represent? What will they be able to do? How will they work with the other classes?</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">358 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span><img width="341" height="194" alt="image" src="Image_446.png"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 40pt;text-indent: 0pt;text-align: justify;">Figure 10.7</p><p class="s19" style="padding-left: 40pt;text-indent: 0pt;text-align: justify;">Inheritance hierarchy of classes for the Blackjack game. <span class="s35">GenericPlayer </span>is shaded because it turns out to be an abstract class.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I see <span class="s35">Card </span>objects as real-life cards. You don<span class="s12">’</span>t copy a card when you deal it from the deck to a hand; you move it. For me, that means <span class="s35">Hand </span>will have a data member that is a vector of pointers to <span class="s35">Card </span>objects, which will exist on the heap. When a card moves from one <span class="s35">Hand </span>to another, it<span class="s12">’</span>s really pointers that are being copied and destroyed.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I see players (the human players and the computer) as Blackjack hands with names. That<span class="s12">’</span>s why I derive <span class="s35">Player </span>and <span class="s35">House </span>(indirectly) from <span class="s35">Hand</span>. (Another equally valid view is that players have a hand. If I had gone this route, <span class="s35">Player </span>and <span class="s35">House </span>would have had <span class="s35">Hand </span>data members instead of being derived from <span class="s35">Hand</span>.)</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I define <span class="s35">GenericPlayer </span>to house the functionality that <span class="s35">Player </span>and <span class="s35">House </span>share, as opposed to duplicating this functionality in both classes.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Also, I see the deck as separate from the house. The deck will deal cards to the human players and the computer-controlled house in the same way. This means that <span class="s35">Deck </span>will have a member function to deal cards that is polymorphic and will work with either a <span class="s35">Player </span>or a <span class="s35">House </span>object.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">To really flesh things out, you can list the data members and member functions that you think the classes will have, along with a brief description of each. That<span class="s12">’</span>s what I do next in Tables 10.2 through 10.8. For each class, I list only the members I define in it. Several classes will, of course, be inherited members from base classes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="194" alt="image" src="Image_447.png"/></span></p><p class="s43" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 10.2 <span class="s44">Card Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">rank m_Rank <span class="s41">Rank of the card (ace, 2, 3, and so on). </span>rank <span class="s41">is an enumeration for all 13 ranks.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 91pt;text-indent: -79pt;line-height: 106%;text-align: left;">suit m_Suit <span class="s41">Suit of the card (clubs, diamonds, hearts, or spades). </span>suit <span class="s41">is an enumeration for the four possible suits.</span></p><p class="s57" style="padding-top: 1pt;padding-left: 91pt;text-indent: -79pt;line-height: 106%;text-align: left;">bool m_IsFaceUp <span class="s41">Indicates whether the card is face up. Affects how the card is displayed and the value it has.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">int GetValue() <span class="s41">Returns the value of the card.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">void Flip() <span class="s41">Flips a card. Face up becomes face down, and face down becomes face up.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1197">Introducing the Blackjack Game 359</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="444" height="160" alt="image" src="Image_448.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="161" alt="image" src="Image_449.png"/></span></p><p class="s43" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Table 10.3 <span class="s44">Hand Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">vector&lt;Card*&gt; m_Cards <span class="s41">Collection of cards. Stores pointers to </span>Card <span class="s41">objects.</span></p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;line-height: 125%;text-align: left;">void Add(Card* pCard) <span class="s41">Adds a card to the hand. Adds a pointer to </span>Card <span class="s41">to the vector </span>m_Cards<span class="s41">. </span>void Clear() <span class="s41">Clears all cards from the hand. Removes all pointers in the vector </span>m_Cards<span class="s41">,</span></p><p class="s41" style="padding-left: 121pt;text-indent: 0pt;line-height: 8pt;text-align: left;">deleting all associated <span class="s57">Card </span>objects on the heap.</p><p class="s57" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">int GetTotal() const <span class="s41">Returns the total value of the hand.</span></p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="160" alt="image" src="Image_450.png"/></span></p><p class="s57" style="text-indent: 0pt;text-align: left;">string m_Name <span class="s41">Generic player’s name.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">virtual bool IsHitting() const = 0 <span class="s41">Indicates whether the generic player wants another hit. Pure</span></p><p class="s41" style="padding-left: 163pt;text-indent: 0pt;text-align: left;">virtual function.</p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">bool IsBusted() const <span class="s41">Indicates whether the generic player is busted.</span></p><p class="s57" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">void Bust() const <span class="s41">Announces that the generic player busts.</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.4 <span class="s44">GenericPlayer Class (Abstract)</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="padding-top: 10pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">Table 10.5 <span class="s44">Player Class</span></p><p class="s37" style="padding-top: 7pt;padding-left: 52pt;text-indent: 0pt;text-align: left;">Member Description</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s57" style="padding-top: 4pt;padding-left: 52pt;text-indent: 0pt;line-height: 133%;text-align: left;">virtual bool IsHitting() const void Win() const</p><p class="s57" style="padding-left: 52pt;text-indent: 0pt;line-height: 132%;text-align: left;">void Lose() const void Push() const</p><p class="s41" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;line-height: 125%;text-align: left;">Indicates whether the player wants another hit. Announces that the player wins.</p><p class="s41" style="padding-left: 8pt;text-indent: 0pt;line-height: 125%;text-align: left;">Announces that the player loses. Announces that the player pushes.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="522" height="126" alt="image" src="Image_451.png"/></span></p><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.6 <span class="s44">House Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">virtual bool IsHitting() const</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void FlipFirstCard()</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Indicates whether the house is taking another hit.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Flips over the first card.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="524" height="175" alt="image" src="Image_452.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Creates a standard deck of 52 cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Shuffles cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">Deals one card to a hand.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 106%;text-align: left;">Gives additional cards to a generic player for as long as the generic player can and wants to hit.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">void Populate()</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void Shuffle()</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;text-align: left;">void Deal(Hand&amp; aHand)</p><p class="s57" style="padding-top: 3pt;text-indent: 0pt;line-height: 112%;text-align: left;">void AdditionalCards(GenericPlayer&amp; aGenericPlayer)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.7 <span class="s44">Deck Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1198">360 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="475" height="161" alt="image" src="Image_453.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">A deck of cards.</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">The casino’s hand, the house.</p><p class="s41" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Collection of human players. A vector of <span class="s57">Player </span>objects. Plays a round of Blackjack.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s57" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Deck m_Deck</p><p class="s57" style="text-indent: 0pt;line-height: 13pt;text-align: left;">House m_House vector&lt;Player&gt; m_Players void Play()</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s43" style="text-indent: 0pt;line-height: 12pt;text-align: left;">Table 10.8 <span class="s44">Game Class</span></p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Member</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 10pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="bookmark1130"><h1 href="#bookmark13">Planning the Game Logic</h1></a><a name="bookmark1199">&zwnj;</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The last part of my planning is to map out the basic flow of one round of the game. I wrote some pseudocode for the <span class="s35">Game </span>class<span class="s12">’ </span><span class="s35">Play() </span>member function. Here<span class="s12">’</span>s what I came up with:</p><p class="s50" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">Deal players and the house two initial cards Hide the house’s first card</p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">Display players’ and house’s hands Deal additional cards to players</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1200">Introducing the Blackjack Game 361</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Reveal house’s first card</p><p class="s50" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 118%;text-align: left;">Deal additional cards to house If house is busted</p><p class="s50" style="padding-left: 41pt;text-indent: 10pt;line-height: 118%;text-align: left;">Everyone who is not busted wins Otherwise</p><p class="s50" style="padding-left: 51pt;text-indent: 0pt;text-align: left;">For each player</p><p class="s50" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">If player isn’t busted</p><p class="s50" style="padding-top: 2pt;padding-left: 82pt;text-indent: -10pt;line-height: 119%;text-align: left;">If player’s total is greater than the house’s total Player wins</p><p class="s50" style="padding-left: 82pt;text-indent: -10pt;line-height: 119%;text-align: left;"><a name="bookmark1131">Otherwise if player’s total is less than house’s total Player loses</a><a name="bookmark1201">&zwnj;</a></p><p class="s50" style="padding-left: 82pt;text-indent: -10pt;line-height: 119%;text-align: left;">Otherwise Player pushes</p><p class="s50" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Remove everyone’s cards</p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">At this point you know a lot about the Blackjack program and you haven<span class="s12">’</span>t even seen a single line of code yet! But that<span class="s12">’</span>s a good thing. Planning can be as important as coding (if not more so). Because I<span class="s12">’</span>ve spent so much time describing the classes, I won<span class="s12">’</span>t describe every part of the code. I<span class="s12">’</span><a href="http://www.courseptr.com/downloads" class="s15" target="_blank">ll just point out significant or new ideas. You can download the code for this program from the Course Technology website (</a>www.courseptr.com/downloads). The program is in the Chapter 10 folder; the filename is <span class="s35">blackjack.cpp</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_454.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The <span class="s35">blackjack.cpp </span>file contains seven classes. In C++ programming, it’s common to break up files like this into multiple files, based on individual classes. However, the topic of writing a single program using multiple files is beyond the scope of this book.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_455.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a388"><h1 href="#bookmark13">The Card Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">After some initial statements, I define the <span class="s35">Card </span>class for an individual playing card.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Blackjack</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//Plays a simple version of the casino game of blackjack; for 1 - 7 players</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt;</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">362 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">#include &lt;ctime&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">using namespace std; class Card</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 119pt;text-indent: -57pt;line-height: 118%;text-align: left;">enum rank {ACE = 1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING};</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">enum suit {CLUBS, DIAMONDS, HEARTS, SPADES};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//overloading &lt;&lt; operator so can send Card object to standard output friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const Card&amp; aCard);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">Card(rank r = ACE, suit s = SPADES, bool ifu = true);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//returns the value of a card, 1 - 11 int GetValue() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//flips a card; if face up, becomes face down and vice versa void Flip();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">rank m_Rank; suit m_Suit; bool m_IsFaceUp;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Card::Card(rank r, suit s, bool ifu):    m_Rank(r), m_Suit(s), m_IsFaceUp(ifu)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int Card::GetValue() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//if a cards is face down, its value is 0 int value = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_IsFaceUp)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//value is number showing on card value = m_Rank;</p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//value is 10 for face cards if (value &gt; 10)</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1202">Introducing the Blackjack Game 363</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">value = 10;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return value;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Card::Flip()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_IsFaceUp = !(m_IsFaceUp);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1132">}</a><a name="bookmark1203">&zwnj;</a></p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">I define two enumerations, <span class="s35">rank  </span>and <span class="s35">suit</span>, to use as the types for the rank and suit data members of the class, <span class="s35">m_Rank </span>and <span class="s35">m_Suit</span>. This has two benefits. First, it makes the code more readable. A suit data member will have a value like <span class="s35">CLUBS </span>or  <span class="s35">HEARTS  </span>instead  of  <span class="s35">0  </span>or  <span class="s35">2</span>.  Second,  it  limits  the  values  that  these  two  data members can have. <span class="s35">m_Suit </span>can only store a value from <span class="s35">suit</span>, and <span class="s35">m_Rank </span>can only store a value from <span class="s35">rank</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Next, I make the overloaded <span class="s35">operator&lt;&lt;() </span>function a friend of the class so I can display a card object on the screen.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">GetValue() <span class="p">returns a value for a </span>Card <span class="p">object, which can be between </span>0 <span class="p">and </span>11<span class="p">. Aces are valued at </span>11<span class="p">. (I deal with potentially counting them as </span>1 <span class="p">in the </span>Hand <span class="p">class, based on the other cards in the hand.) A face-down card has a value of </span>0<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a389"><h1 href="#bookmark13">The Hand Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">I define the <span class="s35">Hand </span>class for a collection of cards.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Hand</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Hand();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual ~Hand();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//adds a card to the hand void Add(Card* pCard);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//clears hand of all cards void Clear();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">364 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//gets hand total value, intelligently treats aces as 1 or 11 int GetTotal() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;Card*&gt; m_Cards;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hand::Hand()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Cards.reserve(7);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hand::~Hand()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Hand::Add(Card* pCard)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_Cards.push_back(pCard);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Hand::Clear()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//iterate through vector, freeing all memory on the heap vector&lt;Card*&gt;::iterator iter = m_Cards.begin();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = m_Cards.begin(); iter != m_Cards.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">delete *iter;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">*iter = 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//clear vector of pointers m_Cards.clear();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">int Hand::GetTotal() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//if no cards in hand, return 0 if (m_Cards.empty())</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1204">Introducing the Blackjack Game 365</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//if a first card has value of 0, then card is face down; return 0 if (m_Cards[0]-&gt;GetValue() = = 0)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//add up card values, treat each ace as 1 int total = 0; vector&lt;Card*&gt;::const_iterator iter;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = m_Cards.begin(); iter != m_Cards.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">total += (*iter)-&gt;GetValue();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//determine if hand contains an ace bool containsAce = false;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (iter = m_Cards.begin(); iter != m_Cards.end(); ++iter)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if ((*iter)-&gt;GetValue() = = Card::ACE)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">containsAce = true;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//if hand contains ace and total is low enough, treat ace as 11 if (containsAce &amp;&amp; total &lt;= 11)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">//add only 10 since we’ve already added 1 for the ace total += 10;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return total;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Tra p</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="522" height="1" alt="image" src="Image_456.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;">The destructor of the class is virtual, but notice that I don’t use the keyword <span class="s35">virtual </span>outside of the class when I actually define the destructor. You only use the keyword inside the class definition. Don’t worry; the destructor is still virtual.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_457.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1205">366 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Although I<span class="s12">’</span>ve already covered this, I want to point it out again. All of the <span class="s35">Card </span>objects will exist on the heap. Any collection of cards, such as a <span class="s35">Hand </span>object, will have a vector of pointers to a group of those objects on the heap.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">Clear() </span>member function has an important responsibly. It not only removes all of the pointers from the vector <span class="s35">m_Cards</span>, but it destroys the associated <span class="s35">Card </span>objects and frees the memory on the heap that they occupied. This is just like a real-world Blackjack game in which cards are discarded when a round is over. The virtual class destructor calls <span class="s35">Clear()</span>.</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1133">The </a><span class="s35">GetTotal() </span>member function returns the point total of the hand. If a hand contains an ace, it counts it as a <span class="s35">1 </span>or an <span class="s35">11</span>, whichever is best for the player. The program accomplishes this by checking to see whether the hand has at least one ace. If it does, it checks to see whether treating the ace as <span class="s35">11 </span>will put the hand<span class="s12">’</span>s point total over <span class="s35">21</span>. If it won<span class="s12">’</span>t, then the ace is treated as an <span class="s35">11</span>. Otherwise, it<span class="s12">’</span>s treated as a <span class="s35">1</span>.<a name="bookmark1206">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a390"><h1 href="#bookmark13">The GenericPlayer Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I define the <span class="s35">GenericPlaye</span>r class for a generic Blackjack player. It doesn<span class="s12">’</span>t represent a full player. Instead, it represents the common element of a human player and the computer player.</p><p class="s35" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class GenericPlayer : public Hand</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">friend ostream&amp; operator&lt;&lt;(ostream&amp; os,</p><p class="s35" style="padding-top: 2pt;padding-left: 198pt;text-indent: 0pt;text-align: left;">const GenericPlayer&amp; aGenericPlayer);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">GenericPlayer(const string&amp; name = &quot;&quot;); virtual ~GenericPlayer();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//indicates whether or not generic player wants to keep hitting virtual bool IsHitting() const = 0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//returns whether generic player has busted - has a total greater than 21 bool IsBusted() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//announces that the generic player busts void Bust() const;</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1207">Introducing the Blackjack Game 367</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">string m_Name;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">GenericPlayer::GenericPlayer(const string&amp; name): m_Name(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">GenericPlayer::~GenericPlayer()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">bool GenericPlayer::IsBusted() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (GetTotal() &gt; 21);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void GenericPlayer::Bust() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot; busts.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">I make the overloaded <span class="s35">operator&lt;&lt;() </span>function a friend of the class so I can display <span class="s35">GenericPlayer  </span>objects  on  the  screen.  It  accepts  a  reference  to  a  <span class="s35">GenericPlayer </span>object, which means that it can accept a reference to a <span class="s35">Player </span>or <span class="s35">House </span>object, too.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The constructor accepts a <span class="s35">string </span>object for the name of the generic player. The destructor is automatically virtual because it inherits this trait from <span class="s35">Hand</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">IsHitting() </span>member function indicates whether a generic player wants another card. Because this member function doesn<span class="s12">’</span>t have a real meaning for a generic player, I made it a pure virtual function. Therefore, <span class="s35">GenericPlayer </span>becomes an abstract class. This also means that both <span class="s35">Player </span>and <span class="s35">House </span>need to implement their own versions of this member function.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">IsBusted() </span>member function indicates whether a generic player has busted. Because players and the house bust the same way<span class="s12">—</span>by having a total greater than 21<span class="s12">—</span>I put the definition in this class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Bust</span>() member function announces that the generic player busts. Because busting is announced the same way for players and the house, I put the definition of the member function in this class.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1134">368 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1208">&zwnj;</a><a name="bookmark1209">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a391"><h1 href="#bookmark13">The Player Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">The <span class="s35">Player </span>class represents a human player. It<span class="s12">’</span>s derived from <span class="s35">GenericPlayer</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Player : public GenericPlayer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">Player(const string&amp; name = &quot;&quot;); virtual ~Player();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//returns whether or not the player wants another hit virtual bool IsHitting() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//announces that the player wins void Win() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//announces that the player loses void Lose() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//announces that the player pushes void Push() const;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: -20pt;line-height: 118%;text-align: left;">Player::Player(const string&amp; name): GenericPlayer(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Player::~Player()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">bool Player::IsHitting() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot;, do you want a hit? (Y/N): &quot;; char response;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">cin &gt;&gt; response;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 9pt;text-align: left;">return (response = = ’y’ || response = = ’Y’);</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Player::Win() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot; wins.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1210">Introducing the Blackjack Game 369</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Player::Lose() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot; loses.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Player::Push() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_Name &lt;&lt; &quot; pushes.\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1135">The class implements the </a><span class="s35">IsHitting() </span>member function that it inherits from <span class="s35">GenericPlayer</span>. Therefore, <span class="s35">Player </span>isn<span class="s12">’</span>t abstract. The class implements the member function by asking the human whether he wants to keep hitting. If the human enters <span class="s35">y  </span>or <span class="s35">Y  </span>in response to the question, the member function returns <span class="s35">true</span>, indicating that the player is still hitting. If the human enters a different character, the member function  returns <span class="s35">false</span>, indicating  that the player is no longer hitting.<a name="bookmark1211">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The <span class="s35">Win()</span>, <span class="s35">Lose()</span>, and <span class="s35">Push() </span>member functions simply announce that a player has won, lost, or pushed, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a392"><h1 href="#bookmark13">The House Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">House </span>class represents the house. It<span class="s12">’</span>s derived from <span class="s35">GenericPlayer</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class House : public GenericPlayer</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 237%;text-align: left;">House(const string&amp; name = &quot;House&quot;); virtual ~House();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//indicates whether house is hitting - will always hit on 16 or less virtual bool IsHitting() const;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//flips over first card void FlipFirstCard();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1212">370 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: -20pt;line-height: 119%;text-align: left;">House::House(const string&amp; name): GenericPlayer(name)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">House::~House()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">bool House::IsHitting() const</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return (GetTotal() &lt;= 16);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1136">}</a><a name="bookmark1213">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void House::FlipFirstCard()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (!(m_Cards.empty()))</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Cards[0]-&gt;Flip();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;No card to flip!\n&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The  class  implements  the  <span class="s35">IsHitting()  </span>member  function  that  it  inherits  from <span class="s35">GenericPlayer</span>. Therefore, <span class="s35">House </span>isn<span class="s12">’</span>t abstract. The class implements the member function by calling <span class="s35">GetTotal()</span>. If the returned total value is less than or equal to <span class="s35">16</span>,  the  member  function  returns  <span class="s35">true</span>,  indicating  that  the  house  is  still  hitting. Otherwise, it returns <span class="s35">false</span>, indicating that the house is no longer hitting.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">FlipFirstCard() </span>flips the house<span class="s12">’</span>s first card. This member function is necessary because the house hides its first card at the beginning of the round and then reveals it after all of the players have taken all of their additional cards.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a393"><h1 href="#bookmark13">The Deck Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Deck </span>class represents a deck of cards. It<span class="s12">’</span>s derived from <span class="s35">Hand</span>.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Deck : public Hand</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">Introducing the Blackjack Game 371</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Deck();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">virtual ~Deck();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//create a standard deck of 52 cards void Populate();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//shuffle cards void Shuffle();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//deal one card to a hand void Deal(Hand&amp; aHand);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//give additional cards to a generic player</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">void AdditionalCards(GenericPlayer&amp; aGenericPlayer);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck::Deck()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">m_Cards.reserve(52); Populate();</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck::~Deck()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Deck::Populate()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//create standard deck</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (int s = Card::CLUBS; s &lt;= Card::SPADES; ++s)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (int r = Card::ACE; r &lt;= Card::KING; ++r)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">Add(new Card(static_cast&lt;Card::rank&gt;(r),</p><p class="s35" style="padding-top: 2pt;padding-left: 170pt;text-indent: 0pt;text-align: left;">static_cast&lt;Card::suit&gt;(s)));</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 61pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Deck::Shuffle()</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1214">372 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">random_shuffle(m_Cards.begin(), m_Cards.end());</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Deck::Deal(Hand&amp; aHand)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">if (!m_Cards.empty())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">aHand.Add(m_Cards.back()); m_Cards.pop_back();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;Out of cards. Unable to deal.&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">void Deck::AdditionalCards(GenericPlayer&amp; aGenericPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//continue to deal a card as long as generic player isn’t busted and</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//wants another hit</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">while ( !(aGenericPlayer.IsBusted()) &amp;&amp; aGenericPlayer.IsHitting() )</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">Deal(aGenericPlayer);</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; aGenericPlayer &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">if (aGenericPlayer.IsBusted())</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">aGenericPlayer.Bust();</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_458.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-left: 59pt;text-indent: 0pt;text-align: justify;"><i>Type casting </i>is a way of converting a value of one type to a value of another type. One way to do type casting is to use <span class="s35">static_cast</span>. You use <span class="s35">static_cast </span>to return a value of a new type from a value of another type by specifying the new type you want between <span class="s35">&lt; </span>and <span class="s35">&gt;</span>, followed by the value from which you want to get a new value between parentheses. Here’s an example that returns the double value 5.0.</p><p class="s35" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">static_cast&lt;double&gt;(5);</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_459.png"/></span></p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1215">Introducing the Blackjack Game 373</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">Populate() <span class="p">creates a standard deck of 52 cards. The member function loops through all of the possible combinations of </span>Card::suit <span class="p">and </span>Card::rank <span class="p">values. It uses </span>static_cast <span class="p">to cast the </span>int <span class="p">loop variables to the proper enumerated types defined in </span>Card<span class="p">.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">Shuffle() <span class="p">shuffles the cards in the deck. It randomly rearranges the pointers in </span>m_Cards <span class="p">with </span>random_shuffle() <span class="p">from the Standard Template Library. This is the reason I include the </span>&lt;algorithm&gt; <span class="p">header file.</span></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><a name="bookmark1137"><span class="s35">Deal() </span></a>deals one card from the deck to a hand. It adds a copy of the pointer to the back of <span class="s35">m_Cards </span>to the object through the object<span class="s12">’</span>s <span class="s35">Add() </span>member function. Then, it removes the pointer at the back of <span class="s35">m_Cards</span>, effectively transferring the card. The powerful thing about <span class="s35">Deal() </span>is that it accepts a reference to a <span class="s35">Hand </span>object, which means it can work equally well with a <span class="s35">Player </span>or a <span class="s35">House </span>object. And through the magic of polymorphism, <span class="s35">Deal() </span>can call the object<span class="s12">’</span>s <span class="s35">Add() </span>member function without knowing the exact object type.<a name="bookmark1216">&zwnj;</a></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;"><span class="s35">AdditionalCards() </span>gives additional cards to a generic player until the generic player either stops hitting or busts. The member function accepts reference to a <span class="s35">GenericPlayer </span>object so you can pass a <span class="s35">Player </span>or <span class="s35">House </span>object to it. Again, through the magic of polymorphism, <span class="s35">AdditionalCards() </span>doesn<span class="s12">’</span>t have to know whether it<span class="s12">’</span>s working with a <span class="s35">Player </span>or a <span class="s35">House </span>object. It can call the <span class="s35">IsBusted() </span>and <span class="s35">IsHitting() </span>member functions for the object without knowing the object<span class="s12">’</span>s type, and the correct code will be executed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a394"><h1 href="#bookmark13">The Game Class</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The <span class="s35">Game </span>class represents a game of Blackjack.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">class Game</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">public:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">Game(const vector&lt;string&gt;&amp; names);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">~Game();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//plays the game of blackjack void Play();</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">374 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">private:</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">Deck m_Deck; House m_House;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">vector&lt;Player&gt; m_Players;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Game::Game(const vector&lt;string&gt;&amp; names)</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//create a vector of players from a vector of names vector&lt;string&gt;::const_iterator pName;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">for (pName = names.begin(); pName != names.end(); ++pName)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Players.push_back(Player(*pName));</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//seed the random number generator srand(static_cast&lt;unsigned int&gt;(time(0))); m_Deck.Populate();</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">m_Deck.Shuffle();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Game::~Game()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Game::Play()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//deal initial 2 cards to everyone vector&lt;Player&gt;::iterator pPlayer; for (int i = 0; i &lt; 2; ++i)</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end();</p><p class="s35" style="padding-top: 2pt;padding-left: 107pt;text-indent: 0pt;text-align: left;">++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">m_Deck.Deal(*pPlayer);</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Deck.Deal(m_House);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//hide house’s first card m_House.FlipFirstCard();</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;">Introducing the Blackjack Game 375</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">//display everyone’s hand</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end(); ++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; *pPlayer &lt;&lt; endl;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; m_House &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">//deal additional cards to players</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end(); ++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">m_Deck.AdditionalCards(*pPlayer);</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//reveal house’s first card m_House.FlipFirstCard(); cout &lt;&lt; endl &lt;&lt; m_House;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">//deal additional cards to house m_Deck.AdditionalCards(m_House);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (m_House.IsBusted())</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">//everyone still playing wins</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end();</p><p class="s35" style="padding-top: 2pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">if ( !(pPlayer-&gt;IsBusted()) )</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">pPlayer-&gt;Win();</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-left: 88pt;text-indent: 0pt;line-height: 10pt;text-align: left;">//compare each player still playing to house</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end();</p><p class="s35" style="padding-top: 2pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">if ( !(pPlayer-&gt;IsBusted()) )</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">if (pPlayer-&gt;GetTotal() &gt; m_House.GetTotal())</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1217">376 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 145pt;text-indent: 0pt;text-align: left;">pPlayer-&gt;Win();</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">else if (pPlayer-&gt;GetTotal() &lt; m_House.GetTotal())</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 124pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 124pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 124pt;text-indent: 0pt;text-align: left;"><a name="bookmark1138">}</a><a name="bookmark1218">&zwnj;</a></p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">pPlayer-&gt;Lose();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 6pt;text-indent: 0pt;text-align: left;">pPlayer-&gt;Push();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">//remove everyone’s cards</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">for (pPlayer = m_Players.begin(); pPlayer != m_Players.end(); ++pPlayer)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">pPlayer-&gt;Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">m_House.Clear();</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The class constructor accepts a reference to a vector of <span class="s35">string </span>objects, which represent the names of the human players. The constructor instantiates a <span class="s35">Player </span>object with each name. Next, it seeds the random number generator, and then it populates and shuffles the deck.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">Play() </span>member function faithfully implements the pseudocode I wrote earlier about how a round of play should be implemented.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a395"><h1 href="#bookmark13">The main() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">After declaring the overloaded <span class="s35">operator () </span>functions, I write the program<span class="s12">’</span>s</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">main() <span class="p">function.</span></p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">//function prototypes</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const Card&amp; aCard);</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">ostream&amp; operator&lt;&lt;(ostream&amp; os, const GenericPlayer&amp; aGenericPlayer);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s19" style="padding-top: 2pt;padding-left: 281pt;text-indent: 0pt;text-align: left;"><a name="bookmark1219">Introducing the Blackjack Game 377</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 26pt;text-align: left;">cout &lt;&lt; &quot;\t\tWelcome to Blackjack!\n\n&quot;; int numPlayers = 0;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 10pt;text-align: left;">while (numPlayers &lt; 1 || numPlayers &gt; 7)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;How many players? (1 - 7): &quot;; cin &gt;&gt; numPlayers;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;"><a name="bookmark1139">vector&lt;string&gt; names; string name;</a><a name="bookmark1220">&zwnj;</a></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">for (int i = 0; i &lt; numPlayers; ++i)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 119%;text-align: left;">cout &lt;&lt; &quot;Enter player name: &quot;; cin &gt;&gt; name; names.push_back(name);</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; endl;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 119%;text-align: left;">//the game loop Game aGame(names); char again = ’y’;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 11pt;text-align: left;">while (again != ’n’ &amp;&amp; again != ’N’)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">aGame.Play();</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;line-height: 118%;text-align: left;">cout &lt;&lt; &quot;\nDo you want to play again? (Y/N): &quot;; cin &gt;&gt; again;</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return 0;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The <span class="s35">main() </span>function gets the names of all the players and puts them into a vector of <span class="s35">string </span>objects, and then instantiates a <span class="s35">Game </span>object, passing a reference to the vector. The <span class="s35">main() </span>function keeps calling the <span class="s35">Game </span>object<span class="s12">’</span>s <span class="s35">Play() </span>member function until the players indicate that they don<span class="s12">’</span>t want to play anymore.</p><p style="padding-top: 13pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;"><a name="a396"><h1 href="#bookmark13">Overloading the operator&lt;&lt;() Function</h1></a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The following function definition overloads the <span class="s35">&lt;&lt; </span>operator so I can send a <span class="s35">Card</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to the standard output.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">378 Chapter 10 <span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//overloads &lt;&lt; operator so Card object can be sent to cout ostream&amp; operator&lt;&lt;(ostream&amp; os, const Card&amp; aCard)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 187pt;text-indent: -125pt;line-height: 118%;text-align: left;">const string RANKS[] = {&quot;0&quot;, &quot;A&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;J&quot;, &quot;Q&quot;, &quot;K&quot;};</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">const string SUITS[] = {&quot;c&quot;, &quot;d&quot;, &quot;h&quot;, &quot;s&quot;};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">if (aCard.m_IsFaceUp)</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; RANKS[aCard.m_Rank] &lt;&lt; SUITS[aCard.m_Suit];</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;XX&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return os;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The function uses the rank and suit values of the object as array indices. I begin the array <span class="s35">RANKS </span>with <span class="s35">&quot;0&quot; </span>to compensate for the fact that the value for the <span class="s35">rank </span>enumeration defined in <span class="s35">Card </span>begins at <span class="s35">1</span>.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">The last function definition overloads the <span class="s35">&lt;&lt; </span>operator so I can send a <span class="s35">GenericPlayer</span></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">object to the standard output.</p><p class="s35" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 119%;text-align: left;">//overloads &lt;&lt; operator so a GenericPlayer object can be sent to cout ostream&amp; operator&lt;&lt;(ostream&amp; os, const GenericPlayer&amp; aGenericPlayer)</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">os &lt;&lt; aGenericPlayer.m_Name &lt;&lt; &quot;:\t&quot;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;line-height: 118%;text-align: left;">vector&lt;Card*&gt;::const_iterator pCard; if (!aGenericPlayer.m_Cards.empty())</p><p class="s35" style="padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 108pt;text-indent: -26pt;line-height: 118%;text-align: left;">for (pCard = aGenericPlayer.m_Cards.begin(); pCard != aGenericPlayer.m_Cards.end();</p><p class="s35" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">++pCard)</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 103pt;text-indent: 0pt;text-align: left;">os &lt;&lt; *(*pCard) &lt;&lt; &quot;\t&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-top: 3pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">if (aGenericPlayer.GetTotal() != 0)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1140">Summary 379</a><a name="bookmark1221">&zwnj;</a><a name="bookmark1222">&zwnj;</a><a name="bookmark1223">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 82pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">else</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">cout &lt;&lt; &quot;(&quot; &lt;&lt; aGenericPlayer.GetTotal() &lt;&lt; &quot;)&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 82pt;text-indent: 0pt;text-align: left;">os &lt;&lt; &quot;&lt;empty&gt;&quot;;</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">}</p><p class="s35" style="padding-top: 2pt;padding-left: 62pt;text-indent: 0pt;text-align: left;">return os;</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">The function displays the generic player<span class="s12">’</span>s name and cards, along with the total value of the cards.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30" name="a397">Summary</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">In this chapter, you should have learned the following concepts:</p><p class="s29" style="padding-top: 9pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;">n <span class="p">One of the key elements of OOP is inheritance, which allows you to derive a new class from an existing one. The new class automatically inherits data members and member functions from the existing class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">n <span class="p">A derived class does not inherit constructors, copy constructors, destruc- tors, or an overloaded assignment operator.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Base class constructors are automatically called before the derived class constructor when a derived class object is instantiated.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Base class destructors are automatically called after the derived class destructor when a derived class object is destroyed.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Protected members are accessible only in their own class and certain derived classes, depending upon the derivation access level.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Using public derivation means that public members in the base class become public members in the derived class, protected members in the base class become protected members in the derived class, and private members are (as always) inaccessible.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can override base class member functions by giving them new defi- nitions in a derived class.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">You can explicitly call a base class member function from a derived class.</span></p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1224">380 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s29" style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">You can explicitly call the base class constructor from a derived class instructor.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">n <span class="p">Polymorphism is the quality whereby a member function will produce different results depending on the type of object for which it is called.</span></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: left;">n <span class="p">Virtual functions allow for polymorphic behavior.</span></p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><span class="s29">n </span>Once a member function is defined as virtual, it<span class="s12">’</span>s virtual in any derived class.</p><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: justify;"><a name="bookmark1141"><span class="s29">n </span></a>A pure virtual function is a function to which you don<span class="s12">’</span>t need to give a definition. You specify a pure virtual function by placing an equal sign and a zero at the end of the function header.<a name="bookmark1225">&zwnj;</a></p><p class="s29" style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;">n <span class="p">An abstract class has at least one pure virtual member function.</span></p><p style="padding-top: 5pt;padding-left: 53pt;text-indent: 0pt;text-align: justify;"><span class="s29">n </span>An abstract class can<span class="s12">’</span>t be used to instantiate an object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30" name="a398">Questions and Answers</a></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How many levels of inheritance can you have?</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: Theoretically, as many as you want. But as a beginning programmer, you should keep things simple and try not to go beyond a few levels.</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: Is friendship inherited? That is, if a function is a friend of a base class, is it automatically a friend of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: No.</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Can a class have more than one direct base class?</p><p style="padding-top: 5pt;padding-left: 55pt;text-indent: -14pt;text-align: left;">A: Yes. This is called <span class="s11">multiple inheritance</span>. It<span class="s12">’</span>s powerful, but creates its own set of thorny issues.</p><p style="padding-top: 7pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">Q: Why would you want to call a base class constructor from a derived class constructor?</p><p style="padding-top: 6pt;padding-left: 57pt;text-indent: -16pt;line-height: 106%;text-align: left;">A: So you can control exactly how the base class constructor is called. For example, you might want to pass specific values to the base class constructor.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: Are there any dangers in overriding a base class function?</p><p style="padding-top: 7pt;padding-left: 59pt;text-indent: -17pt;line-height: 106%;text-align: left;">A: Yes. By overriding a base class member function, you hide all of the overloaded version  of the function in the base  class.  However, you  can</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;"><a name="bookmark1226">Questions and Answers 381</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 58pt;text-indent: 0pt;line-height: 106%;text-align: left;">still call a hidden base class member function explicitly by using the base class name and the scope resolution operator.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: How can I solve this problem of hiding base class functions?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: One way is to override all of the overloaded version of the base class function.</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: Why do you usually want to call the assignment operator member function of the base class from the assignment operator member function of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: So that any base class data members can be properly assigned.</p><p style="padding-top: 7pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">Q: Why do you usually want to call the copy constructor of a base class from the copy constructor of a derived class?</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">A: So that any base class data members can be properly copied.</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: left;">Q: Why can you lose access to an object<span class="s12">’</span>s member functions when you point to it with a base class member?</p><p style="padding-top: 6pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: left;">A: Because non-virtual functions are called based on the pointer type and the object type.</p><p style="padding-top: 6pt;padding-left: 58pt;text-indent: -17pt;line-height: 106%;text-align: left;">Q: Why not make all member functions virtual, just in case you ever need polymorphic behavior from them?</p><p style="padding-top: 6pt;padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: left;">A: Because there<span class="s12">’</span>s a performance cost associated with making member functions virtual.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: left;">Q: So when should you make member functions virtual? A: Whenever they may be inherited from a base class.</p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: When should you make a destructor virtual?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 106%;text-align: justify;">A: If you have any virtual member functions in a class, you should make the destructor virtual, too. However, some programmers say that to be safe, you should always make a destructor virtual.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: justify;">Q: Can constructors be virtual?</p><p style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;line-height: 152%;text-align: justify;">A: No. This also means that copy constructors can<span class="s12">’</span>t be declared as virtual either. Q: In OOP, what is slicing?</p><p style="padding-left: 55pt;text-indent: -14pt;line-height: 106%;text-align: justify;">A: Slicing is cutting off part of an object. Assigning an object of a derived class to a variable of a base class is legal, but you slice the object, losing the data</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1142">382 Chapter 10 </a><span class="s32">n </span>Inheritance and Polymorphism: Blackjack<a name="bookmark1227">&zwnj;</a><a name="bookmark1228">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 55pt;text-indent: 0pt;line-height: 106%;text-align: left;">members declared in the derived class and losing access to member functions of the derived class.</p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Q: What good are abstract classes if you can<span class="s12">’</span>t instantiate any objects from them?</p><p style="padding-top: 7pt;padding-left: 56pt;text-indent: -15pt;line-height: 107%;text-align: justify;">A: Abstract classes can be very useful. They can contain many common class members that other classes will inherit, which saves you the effort of defining those members over and over again.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30" name="a399">Discussion Questions</a></p><ol id="l23"><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;"><a name="bookmark1143">What benefits does inheritance bring to game programming?</a><a name="bookmark1229">&zwnj;</a></p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">How does polymorphism expand the power of inheritance?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What kinds of game entities might it make sense to model through inheritance?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">What kinds of game-related classes would be best implemented as abstract?</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Why is it advantageous to be able to point to a derived class object with a base class pointer?</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s30" name="a400">Exercises</a></p><ol id="l24"><li><p style="padding-top: 2pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Improve the Simple Boss 2.0 program by adding a new class, <span class="s35">FinalBoss</span>, that is derived from the <span class="s35">Boss </span>class. The <span class="s35">FinalBoss </span>class should define a new method, <span class="s35">MegaAttack()</span>, that inflicts 10 times the amount of damage as the <span class="s35">SpecialAttack() </span>method does.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Improve the Blackjack game program by forcing the deck to repopulate before a round if the number of cards is running low.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">Improve the Abstract Creature program by adding a new class, <span class="s35">OrcBoss</span>, that is derived from <span class="s35">Orc</span>. An <span class="s35">OrcBoss </span>object should start off with 180 for its <span class="s35">health </span>data member. You should also override the virtual <span class="s35">Greet() </span>member function so that it displays: <span class="s35">The orc boss growls hello</span>.</p></li></ol><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s27" name="bookmark1230">appendix A</a><a name="bookmark1231">&zwnj;</a><a name="bookmark1232">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_460.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s28" name="a401">Creating Your First C++ Program</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: justify;">Follow these steps to write, save, compile, and run your first program using Microsoft<span class="s12">’</span>s Visual C<span class="s14">þþ </span>2010 Express, a popular and free IDE for the Windows platform.</p><ol id="l25"><li><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Download Visual C<span class="s14">þþ </span><a href="http://www.microsoft.com/express/downloads" class="s15" target="_blank">2010 Express from http://www.microsoft.com/ express/downloads.</a></p></li><li><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">Install Visual C<span class="s14">þþ </span>2010 Express, accepting the default options.</p></li><li><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">Launch Visual C<span class="s14">þþ </span>2010 Express. You should see what appears in Figure A.1.</p></li><li><p style="padding-top: 5pt;padding-left: 65pt;text-indent: -11pt;line-height: 107%;text-align: left;">From the application menu, select File, New, Project. In the New Project dialog that appears, select Win32 from the Installed Templates pane and select Win32 Console Application from the pane to the right. In the Name field, type <b>game_over</b>. In the Location field, browse to the location to save your project by clicking the Browse button. I recommend creating a new folder for the project. (I store my project in C:\Users\Mike\Desk- top\game_over\.) Last but not least, make sure the check box is checked for Create directory for solution. Your New Project dialog should look similar to the one in Figure A.2.</p><p class="s24" style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_461.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">It’s generally a good idea to store each project in its own folder.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_462.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">383</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1233">384 Appendix A </a><span class="s32">n </span>Creating Your First C++ Program</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_463.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Figure A.1</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Visual C<span class="s36">þþ </span>2010 Express on startup.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_464.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure A.2</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The New Project dialog, filled out.</p><p class="s19" style="padding-top: 2pt;padding-left: 277pt;text-indent: 0pt;text-align: left;"><a name="bookmark1234">Creating Your First C++ Program 385</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">With the New Project dialog filled out, click the Okay button. This will bring up the Win32 Application Wizard<span class="s12">—</span>Overview. Click the Next button. This will take you to the Win32 Application Wizard<span class="s12">—</span></p><p style="padding-left: 65pt;text-indent: 0pt;line-height: 106%;text-align: left;">Application Settings. Under Additional options, check the check box for Empty project. Your screen should look like Figure A.3.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_465.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure A.3</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The Win32 Application Wizard – Application Settings, defining an empty project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;line-height: 106%;text-align: left;">In the Win32 Application Wizard<span class="s12">—</span>Application Settings, click the Finish button. This will create and open a new solution for your project, as pictured in Figure A.4.</p><p class="s24" style="padding-top: 7pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Hin t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="517" height="1" alt="image" src="Image_466.png"/></span></p><p class="s19" style="padding-top: 6pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">If the Solution Explorer is not displayed, from the application menu, select View, Other Windows, Solution Explorer.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="498" height="3" alt="image" src="Image_467.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -11pt;text-align: left;">In the Solution Explorer, right-click the Source Files folder. From the menu that appears, select Add, New Item. In the Add New Item dialog that appears, select C<span class="s14">þþ </span>File (.cpp). In the Name field, type <b>game_over.cpp</b>. Check out Figure A.5 for a completed Add New Item dialog image.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1235">386 Appendix A </a><span class="s32">n </span>Creating Your First C++ Program</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_468.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure A.4</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Your newly created project.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_469.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure A.5</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The Add New Item dialog, filled out.</p><p class="s19" style="padding-top: 2pt;padding-left: 277pt;text-indent: 0pt;text-align: left;">Creating Your First C++ Program 387</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-top: 8pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">In the Add New Item dialog, click the Add button. The empty C<span class="s14">þþ </span>file named <span class="s35">game_over.cpp </span>appears, ready for editing. In the <span class="s35">game_over.cpp </span>C<span class="s14">þþ </span>file, type the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">// Game Over</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;line-height: 237%;text-align: left;">// A first C++ program #include &lt;iostream&gt;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s35" style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">{</p><p class="s35" style="padding-top: 2pt;padding-left: 77pt;text-indent: 0pt;line-height: 118%;text-align: left;">std::cout &lt;&lt; &quot;Game Over!&quot; &lt;&lt; std::endl; return 0;</p><p class="s35" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">Your screen should look like Figure A.6.</p></li><li><p style="padding-top: 6pt;padding-left: 65pt;text-indent: -11pt;text-align: left;">From the application menu, select File, Save.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_470.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Figure A.6</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;line-height: 12pt;text-align: left;">Your new C<span class="s36">þþ </span>file, edited.</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1236">388 Appendix A </a><span class="s32">n </span>Creating Your First C++ Program</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li><p style="padding-left: 65pt;text-indent: -17pt;text-align: left;">From the application menu, select Debug, Build Solution.</p></li><li><p style="padding-top: 4pt;padding-left: 65pt;text-indent: -17pt;line-height: 106%;text-align: left;">Press Ctrl<span class="s14">þ</span>F5 to run the project and enjoy the fruits of your labor. You should see the results shown in Figure A.7.</p></li></ol><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span><img width="521" height="293" alt="image" src="Image_471.gif"/></span></p><p class="s37" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">Figure A.7</p><p class="s19" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">The big payoff: seeing your program run.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 6pt;padding-left: 41pt;text-indent: 0pt;line-height: 106%;text-align: left;">Congratulations! You<span class="s12">’</span>ve written, saved, compiled, and run your first C<span class="s14">þþ </span>program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Hi n t</p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="525" height="1" alt="image" src="Image_472.png"/></span></p><p class="s19" style="padding-top: 5pt;padding-bottom: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: left;">For more detailed information about Microsoft Visual C<span class="s36">þþ </span>2010 Express, please see its documentation.</p><p style="padding-left: 59pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="490" height="3" alt="image" src="Image_473.png"/></span></p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s27" name="bookmark1237">appendix B</a><a name="bookmark1238">&zwnj;</a><a name="bookmark1239">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_474.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s28" name="a402">Operator Precedence</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.139pt" cellspacing="0"><tr style="height:28pt"><td style="width:298pt" colspan="3" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">C++ Operator Precedence</p></td></tr><tr style="height:19pt"><td style="width:98pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Precedence Level</p></td><td style="width:65pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Operator</p></td><td style="width:135pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:98pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">17</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">::</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Scope resolution</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">-&gt;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Indirect member selection</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">.</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Member selection</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">[ ]</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Array index</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">( )</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Function call</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">( )</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Type construction</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">sizeof</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Size in bytes</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">++</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Increment</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">- -</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Decrement</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">~</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise NOT</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">!</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Logical NOT</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">+</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Unary plus</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">-</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Unary minus</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">*</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Dereference</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&amp;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Address-of</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">( )</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Cast</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">new</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Acquire memory on the heap</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">delete</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Release memory on the heap</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">-&gt;*</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Indirect member pointer selector</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">.*</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Member pointer selector</p></td></tr><tr style="height:17pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">*</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Multiplication</p></td></tr></table><p class="s41" style="padding-top: 1pt;padding-left: 290pt;text-indent: 0pt;text-align: left;">(<i>Continued</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">389</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1240">390 Appendix B </a><span class="s32">n </span>Operator Precedence</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.084pt" cellspacing="0"><tr style="height:29pt"><td style="width:298pt" colspan="3" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">C++ Operator Precedence (<span class="s63">Continued )</span></p></td></tr><tr style="height:19pt"><td style="width:98pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Precedence Level</p></td><td style="width:65pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Operator</p></td><td style="width:135pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Description</p></td></tr><tr style="height:19pt"><td style="width:98pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:65pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">/</p></td><td style="width:135pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;">Division</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">%</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Modulus</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">12</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">+</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Addition</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">12</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">-</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Subtraction</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&lt;&lt;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise shift left</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&gt;&gt;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise shift right</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&lt;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Less than</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&lt;=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Less than or equal to</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&gt;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Greater than</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&gt;=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Greater than or equal to</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">9</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">==</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Equal to</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">9</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">!=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Not equal to</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">8</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&amp;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise AND</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">7</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">^</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise XOR</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">6</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">|</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise OR</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">5</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&amp;&amp;</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Logical AND</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">||</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Logical OR</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">?:</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Conditional operator</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Assignment</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">*=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Multiply and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">/=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Divide and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">%=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Modulus and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">+=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Add and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">-=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Subtract and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&lt;&lt;=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise shift left and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&gt;&gt;=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise shift right and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">&amp;=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise AND and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">|=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise OR and assign</p></td></tr><tr style="height:13pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">^=</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Bitwise XOR and assign</p></td></tr><tr style="height:22pt"><td style="width:98pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:65pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">,</p></td><td style="width:135pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">Comma operator</p></td></tr></table><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s27" name="bookmark1241">appendix C</a><a name="bookmark1242">&zwnj;</a><a name="bookmark1243">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_475.gif"/></span></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s28" name="a403">Keywords</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">This appendix contains a list of C<span class="s14">þþ </span>keywords.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:61.9972pt" cellspacing="0"><tr style="height:15pt"><td style="width:97pt"><p class="s48" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">and</p></td><td style="width:141pt"><p class="s48" style="padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">delete</p></td><td style="width:125pt"><p class="s48" style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">long</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">asm</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">do</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">mutable</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">auto</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">double</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">namespace</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bitand</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">dynamic_cast</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">new</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bitor</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">else</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">not</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">bool</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">enum</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">not_eq</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">break</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">explicit</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">operator</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">case</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">extern</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">or</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">catch</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">false</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">or_eq</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">char</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">float</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">private</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">class</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">for</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">protected</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">compl</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">friend</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">public</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">const</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">goto</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">register</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">const_cast</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">if</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">reinterpret_cast</p></td></tr><tr style="height:20pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">continue</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">inline</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">return</p></td></tr><tr style="height:15pt"><td style="width:97pt"><p class="s48" style="padding-top: 3pt;padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">default</p></td><td style="width:141pt"><p class="s48" style="padding-top: 3pt;padding-left: 40pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int</p></td><td style="width:125pt"><p class="s48" style="padding-top: 3pt;padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">short</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="text-indent: 0pt;text-align: right;">391</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1244">392 Appendix C </a><span class="s32">n </span>Keywords</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 65pt;text-indent: 0pt;text-align: left;">signed <span class="s35">throw using</span></p><p class="s65" style="padding-top: 6pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">sizeof <span class="s35">true virtual</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">static <span class="s35">try void</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">static_cast <span class="s35">typedef volatile</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">struct <span class="s35">typeid wchar_t</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">switch <span class="s35">typename while</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">template <span class="s35">union xor</span></p><p class="s65" style="padding-top: 5pt;padding-left: 65pt;text-indent: 0pt;text-align: left;">this <span class="s35">unsigned xor_eq</span></p><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 8pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s27" name="bookmark1245">appendix D</a><a name="bookmark1246">&zwnj;</a><a name="bookmark1247">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s28" name="a404">ASCII Chart</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_476.gif"/></span></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:28pt"><td style="width:71pt" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">ASCII Chart</p></td><td style="width:172pt" colspan="2" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:19pt"><td style="width:71pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Decimal</p></td><td style="width:87pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Hexadecimal</p></td><td style="width:85pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 2pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Character</p></td></tr><tr style="height:19pt"><td style="width:71pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">0</p></td><td style="width:87pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">00</p></td><td style="width:85pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">NUL</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">01</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SOH</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">02</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">STX</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">03</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">ETX</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">4</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">04</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">EOT</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">5</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">05</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">ENQ</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">6</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">06</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">ACK</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">7</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">07</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">BEL</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">8</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">08</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">BS</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 20pt;text-indent: 0pt;text-align: left;">9</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">09</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">HT</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0A</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">LF</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0B</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">VT</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">12</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0C</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">FF</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0D</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">CR</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0E</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SO</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">0F</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SI</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">10</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">DLE</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">17</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">DC1</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">18</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">12</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">DC2</p></td></tr><tr style="height:13pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">19</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">13</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">DC3</p></td></tr><tr style="height:17pt"><td style="width:71pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">20</p></td><td style="width:87pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">DC4</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">(<i>Continued</i>)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-top: 3pt;text-indent: 0pt;text-align: right;">393</p><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">394 Appendix D <span class="s32">n </span>ASCII Chart</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:41.084pt" cellspacing="0"><tr style="height:28pt"><td style="width:243pt" colspan="3" bgcolor="#E5E5E5"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">ASCII Chart (<span class="s63">Continued )</span></p></td></tr><tr style="height:19pt"><td style="width:63pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Decimal</p></td><td style="width:95pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Hexadecimal</p></td><td style="width:85pt;border-bottom-style:solid;border-bottom-width:1pt" bgcolor="#E5E5E5"><p class="s47" style="padding-top: 3pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">Character</p></td></tr><tr style="height:19pt"><td style="width:63pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">21</p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">15</p></td><td style="width:85pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">NAK</p></td></tr><tr style="height:19pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">22</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">16</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SYM</p></td></tr><tr style="height:19pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">23</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">17</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">ETB</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">24</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">18</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">CAN</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">25</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">19</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">EM</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">26</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1A</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SUB</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">27</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1B</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">ESC</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">28</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1C</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">FS</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">29</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1D</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">GS</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">30</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1E</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">RS</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">31</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">1F</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">US</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">32</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">20</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">SP</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">33</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">21</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">!</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">34</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">22</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">&quot;</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">35</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">23</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">#</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">36</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">24</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">$</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">37</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">25</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">%</p></td></tr><tr style="height:12pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">38</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">26</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">&amp;</p></td></tr><tr style="height:14pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">39</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 1pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">27</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 1pt;padding-left: 23pt;text-indent: 0pt;text-align: left;">’</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">40</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">28</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">(</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">41</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">29</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">)</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">42</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2A</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">*</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">43</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2B</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">+</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">44</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2C</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">,</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">45</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2D</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">-</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">46</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2E</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">.</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">47</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">2F</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">/</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">48</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">30</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">0</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">49</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">31</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">1</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">50</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">32</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">2</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">51</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">33</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">3</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">52</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">34</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">4</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">53</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">35</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">5</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">54</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">36</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">6</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">55</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">37</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">7</p></td></tr><tr style="height:13pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">56</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">38</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">8</p></td></tr><tr style="height:17pt"><td style="width:63pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">57</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 18pt;text-indent: 0pt;text-align: left;">39</p></td><td style="width:85pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">9</p></td></tr></table><p class="s41" style="padding-top: 3pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">(<i>Continued</i>)</p><p class="s19" style="padding-top: 2pt;text-indent: 0pt;text-align: right;">ASCII Chart 395</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:53.101pt" cellspacing="0"><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">58</p></td><td style="width:83pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">3A</p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-right: 2pt;text-indent: 0pt;text-align: center;">:</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">59</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">3B</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">;</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">60</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">3C</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">&lt;</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">61</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">3D</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">=</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">62</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">3E</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">&gt;</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">63</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">3F</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">?</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">64</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">40</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">@</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">65</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">41</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">A</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">66</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">42</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">B</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">67</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">43</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">C</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">68</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">44</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">D</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">69</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">45</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">E</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">70</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">46</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">F</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">71</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">47</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">G</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">72</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">48</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">H</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">73</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">49</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">I</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">74</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4A</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 1pt;text-indent: 0pt;text-align: center;">J</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">75</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4B</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">K</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">76</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4C</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 1pt;text-indent: 0pt;text-align: center;">L</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">77</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4D</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">M</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">78</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4E</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">N</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">79</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">4F</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">O</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">80</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">50</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">P</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">81</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">51</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">Q</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">82</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">52</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">R</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">83</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">53</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">S</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">84</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">54</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">T</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">85</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">55</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">U</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">86</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">56</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">V</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">87</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">57</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 2pt;text-indent: 0pt;text-align: center;">W</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">88</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">58</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">X</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">89</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">59</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">Y</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">90</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">5A</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">Z</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">91</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">5B</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">[</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">92</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">5C</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">\</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">93</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">5D</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-right: 2pt;text-indent: 0pt;text-align: center;">]</p></td></tr><tr style="height:17pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">94</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">5E</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: center;">^</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><span><img width="325" height="716" alt="image" src="Image_477.png"/></span></p><p class="s44" style="text-indent: 0pt;line-height: 12pt;text-align: left;">ASCII Chart <span class="s66">(Continued )</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Decimal</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Hexadecimal</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Character</p><p style="text-indent: 0pt;text-align: left;"/><p class="s41" style="padding-top: 4pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">(<i>Continued</i>)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="324" height="650" alt="image" src="Image_478.png"/></span></p><p class="s44" style="text-indent: 0pt;line-height: 12pt;text-align: left;">ASCII Chart (<span class="s66">Continued )</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Decimal</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Hexadecimal</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Character</p><p style="text-indent: 0pt;text-align: left;"/><p class="s19" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1248">396 Appendix D </a><span class="s32">n </span>ASCII Chart</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:53.046pt" cellspacing="0"><tr style="height:19pt"><td style="width:41pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">95</p></td><td style="width:83pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">5F</p></td><td style="width:95pt;border-top-style:solid;border-top-width:1pt" bgcolor="#E5E5E5"><p class="s49" style="padding-top: 5pt;padding-left: 45pt;text-indent: 0pt;text-align: left;">_</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">96</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">60</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">`</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">97</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">61</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">a</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">98</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">62</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">b</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">99</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">63</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">c</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">100</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">64</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">d</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">101</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">65</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">e</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">102</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">66</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">f</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">103</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">67</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">g</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">104</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">68</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">h</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">105</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">69</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">i</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">106</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6A</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">j</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">107</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6B</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">k</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">108</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6C</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">l</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">109</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6D</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">m</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">110</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6E</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">n</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">111</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">6F</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">o</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">112</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">70</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">p</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">113</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">71</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">q</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">114</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">72</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">r</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">115</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">73</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">s</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">116</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">74</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">t</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">117</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">75</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">u</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">118</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">76</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">v</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">119</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">77</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">w</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">120</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">78</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">x</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">121</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">79</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">y</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">122</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">7A</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">z</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">123</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">7B</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">{</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">124</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">7C</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">|</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">125</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">7D</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">}</p></td></tr><tr style="height:13pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;text-align: left;">126</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;text-align: left;">7E</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;text-align: left;">~</p></td></tr><tr style="height:11pt"><td style="width:41pt" bgcolor="#E5E5E5"><p class="s49" style="text-indent: 0pt;line-height: 9pt;text-align: left;">127</p></td><td style="width:83pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: left;">7F</p></td><td style="width:95pt" bgcolor="#E5E5E5"><p class="s49" style="padding-left: 45pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DEL</p></td></tr></table><table style="border-collapse:collapse;margin-left:41.639pt" cellspacing="0"><tr style="height:81pt"><td style="width:67pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:72pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:54pt"><td style="width:139pt;border-top-style:solid;border-top-width:2pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:2pt;border-right-style:solid;border-right-width:2pt" colspan="2"><p style="padding-top: 15pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s27" name="bookmark1249">appendix E</a><a name="bookmark1250">&zwnj;</a><a name="bookmark1251">&zwnj;</a></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 2pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s28" name="a405">Escape Sequences</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="298" height="279" alt="image" src="Image_479.png"/></span></p><p class="s41" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Single quote</p><p class="s41" style="padding-top: 2pt;text-indent: 0pt;line-height: 125%;text-align: left;">Double quote Backslash Null character System bell Backspace Formfeed Newline</p><p class="s41" style="text-indent: 0pt;line-height: 125%;text-align: left;">Carriage return Horizontal tab Vertical tab</p><p class="s41" style="text-indent: 0pt;text-align: left;">Hexadecimal number</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 10pt;text-align: left;">\’</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\&quot;</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\\</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\0</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\a</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\b</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\f</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\n</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\r</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\t</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\v</p><p class="s35" style="padding-top: 2pt;text-indent: 0pt;text-align: left;">\x</p><p style="text-indent: 0pt;text-align: left;"/><p class="s37" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Description</p><p style="text-indent: 0pt;text-align: left;"/><p class="s44" style="text-indent: 0pt;line-height: 11pt;text-align: left;">Escape Sequences</p><p class="s37" style="padding-top: 7pt;text-indent: 0pt;text-align: left;">Escape Sequence</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="215" height="259" alt="image" src="Image_480.gif"/></span></p><p class="s19" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">397</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s26" style="padding-top: 4pt;padding-left: 55pt;text-indent: 0pt;text-align: center;">This page intentionally left blank</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="296" height="91" alt="image" src="Image_481.png"/></span></p><p style="padding-top: 18pt;padding-left: 20pt;text-indent: 0pt;text-align: left;"><a href="#bookmark13" class="s67">INDEX</a></p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s69" name="bookmark1252">(subtraction) operator, 14</a><a name="bookmark1253">&zwnj;</a><a name="bookmark1276">&zwnj;</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">! (NOT) operator, 61<i>tbl</i><a href="#bookmark285" class="s69">, </a>66<a href="#bookmark287" class="s79">–</a><a href="#bookmark310" class="s69">67, 77</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">!= (not equal to) operator, 40<i>tbl</i></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">&quot; <a href="#bookmark89" class="s69">(hash mark) symbol, </a><a href="#bookmark165" class="s69">7, 35</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark116" class="s69">% (modulus operator), </a><a href="#bookmark299" class="s69">15, 72</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark737" class="s69">&amp; (reference operator), </a><a href="#bookmark797" class="s69">189, </a>217 &amp;&amp; (AND) operator, 61<i>tbl</i><a href="#bookmark310" class="s69">, 77</a></p><ul id="l26"><li><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark500" class="s69">(dereference operator), </a><a href="#bookmark547" class="s69">128, </a><a href="#bookmark859" class="s69">146, 230</a></p></li><li><p style="padding-left: 47pt;text-indent: -6pt;line-height: 10pt;text-align: left;"><a href="#bookmark113" class="s69">(multiplication) operator, 14</a></p></li></ul><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark368" class="s69">. (member selection operator), </a><a href="#bookmark948" class="s69">88, 259</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark113" class="s69">/ (forward slash), 14</a></p><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark97" class="s69">:: (scope resolution operator), </a><a href="#bookmark495" class="s69">9, </a><a href="#bookmark948" class="s69">125, </a><a href="#bookmark1175" class="s69">259, 345</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">; (semicolon)</p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">if <a href="#bookmark235" class="s75">statement, 43</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark97" class="s75">terminating statements, 9</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark378" class="s69">[ ] (subscripting operator), </a><a href="#bookmark391" class="s69">93, </a>99,</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark550" class="s69">121, 147</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark277" class="s69">|| (OR) operator, 61</a><a href="#bookmark277" class="s76">tbl</a><a href="#bookmark285" class="s69">, 66</a></p><p class="s77" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">þ <a href="#bookmark113" class="s69">(addition) operator, </a><a href="#bookmark375" class="s69">14, 92</a></p><p class="s77" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">þþ <a href="#bookmark148" class="s69">(increment operator), </a><span class="s68">27</span><a href="#bookmark149" class="s79">–</a><a href="#bookmark149" class="s69">28</a></p><p class="s78" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt; <span class="s68">(less than) operator, 40</span><span class="s70">tbl</span></p><p class="s78" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;&lt; <a href="#bookmark97" class="s69">(output operator), 9</a></p><p class="s78" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">&lt;<span class="s68">= (less than or equal to) operator, 40</span><span class="s70">tbl</span></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark133" class="s69">= (assignment operator), </a><a href="#bookmark238" class="s69">21, </a>44,</p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">313<a href="#bookmark1080" class="s79">–</a><a href="#bookmark1177" class="s69">315, </a>346<a href="#bookmark1180" class="s79">–</a><a href="#bookmark1180" class="s69">347</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark228" class="s69">== (equal to) operator, 40</a><a href="#bookmark228" class="s76">tbl</a><a href="#bookmark238" class="s69">, 44</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark228" class="s69">&gt; (greater than) operator, 40</a><a href="#bookmark228" class="s76">tbl</a></p><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark228" class="s69">&gt;= (greater than or equal to) operator, 40</a><a href="#bookmark228" class="s76">tbl</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark401" class="s69">64-element array, 103</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a406">A</a></p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1186" class="s69">abstract classes, </a>352<a href="#bookmark1194" class="s79">–</a><a href="#bookmark1224" class="s69">356, </a><a href="#bookmark1228" class="s69">380, 382</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1186" class="s75">Abstract Creature program, </a>352<a href="#bookmark1189" class="s85">–</a><a href="#bookmark1189" class="s75">354</a></p><p class="s74" style="padding-top: 3pt;padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1189" class="s75">declaring pure virtual functions, </a>354<a href="#bookmark1192" class="s85">–</a><a href="#bookmark1192" class="s75">355</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1192" class="s75">deriving classes from, </a>355<a href="#bookmark1194" class="s85">–</a><a href="#bookmark1192" class="s75">356 virtual functions and, 355</a></p><p class="s68" style="padding-left: 21pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1186" class="s69">Abstract Creature program, </a>352<a href="#bookmark1189" class="s79">–</a><a href="#bookmark1189" class="s69">354</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">abstraction</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark624" class="s75">encapsulation and, 160</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark615" class="s75">functions, 155</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1155" class="s69">access control, </a>337<a href="#bookmark1163" class="s79">–</a><a href="#bookmark1163" class="s69">340</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1158" class="s75">Simple Boss 2.0 program, </a>338<a href="#bookmark1159" class="s85">–</a><a href="#bookmark1159" class="s75">339</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1163" class="s75">using access modiﬁers when deriving classes, 340</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1159" class="s75">using access modiﬁers with class members, </a>339<a href="#bookmark1163" class="s85">–</a><a href="#bookmark1163" class="s75">340</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">access modiﬁers</p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1163" class="s75">using when deriving classes, </a>340 using with class members,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">339<a href="#bookmark1163" class="s85">–</a><a href="#bookmark1163" class="s75">340</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">access_global() <a href="#bookmark640" class="s69">function, </a><span class="s68">168 accessing</span></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark891" class="s75">array elements, 246</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s75">data members, </a>259<a href="#bookmark952" class="s85">–</a><a href="#bookmark952" class="s75">260</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark640" class="s75">global variables, </a>168 member functions of array</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark393" class="s75">element, 100</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark503" class="s75">member functions of vector element, </a>129<a href="#bookmark505" class="s85">–</a><a href="#bookmark505" class="s75">130</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark739" class="s75">reference values, 190</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark975" class="s75">static data members, </a>272<a href="#bookmark978" class="s85">–</a><a href="#bookmark978" class="s75">273</a></p><p style="padding-left: 21pt;text-indent: -12pt;text-align: left;"><a href="#bookmark965" class="s69">accessor member functions, 267</a><a href="#bookmark967" class="s79">– </a><a href="#bookmark997" class="s69">268, 282</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">action <span class="s68">statement, </span>for <a href="#bookmark359" class="s69">loop, </a><a href="#bookmark1046" class="s69">82 Add() member function, </a><span class="s68">292 Add New Item dialog box,</span></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1235" class="s69">386ﬁg</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">addition (<span class="s77">þ</span><a href="#bookmark113" class="s69">) operator, </a><a href="#bookmark375" class="s69">14, 92</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark898" class="s69">address, variable, 249</a></p><p class="s68" style="padding-top: 3pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">advanced classes</p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1038" class="s75">aggregation, </a>287<a href="#bookmark1046" class="s85">–</a>292 container data members,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">291<a href="#bookmark1046" class="s85">–</a><a href="#bookmark1046" class="s75">292</a></p><p class="s74" style="padding-left: 45pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1041" class="s75">Critter Farm program, </a>288<a href="#bookmark1042" class="s85">–</a><a href="#bookmark1042" class="s75">290</a></p><p class="s74" style="padding-left: 45pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1042" class="s75">object data members, </a>290<a href="#bookmark1044" class="s85">–</a><a href="#bookmark1044" class="s75">291</a></p><p style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1051" class="s75">friend functions creating, 295</a></p><p class="s74" style="padding-left: 45pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1046" class="s75">Friend Critter program, </a>292<a href="#bookmark1049" class="s85">–</a><a href="#bookmark1049" class="s75">294</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1080" class="s75">Game Lobby program, </a>315<a href="#bookmark1096" class="s85">–</a><a href="#bookmark1096" class="s75">325</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Lobby <a href="#bookmark1084" class="s75">class, </a><span class="s74">318</span><a href="#bookmark1088" class="s85">–</a><a href="#bookmark1088" class="s75">320</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">Lobby::AddPlayer() <a href="#bookmark1088" class="s75">member function, </a><span class="s74">320</span><a href="#bookmark1090" class="s85">–</a><a href="#bookmark1090" class="s75">322</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">Lobby::Clear() <a href="#bookmark1090" class="s75">member function, </a><span class="s74">322</span><a href="#bookmark1092" class="s85">–</a><a href="#bookmark1092" class="s75">323</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">Lobby::RemovePlayer()</p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1090" class="s75">member function, 322</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">main() <a href="#bookmark1094" class="s75">function, </a><span class="s74">324</span><a href="#bookmark1096" class="s85">–</a><a href="#bookmark1096" class="s75">325</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">operator&lt;&lt;() <a href="#bookmark1092" class="s75">member function, </a><span class="s74">323</span><a href="#bookmark1094" class="s85">–</a><a href="#bookmark1094" class="s75">324</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Player <a href="#bookmark1082" class="s75">class, </a><span class="s74">316</span><a href="#bookmark1084" class="s85">–</a><a href="#bookmark1084" class="s75">318</a></p><p class="s74" style="padding-left: 9pt;text-indent: 11pt;text-align: justify;"><a href="#bookmark1051" class="s75">operator overloading, </a>295<a href="#bookmark1054" class="s85">–</a>296 <span class="s72">again </span><a href="#bookmark266" class="s69">character, looping, </a><b>57</b><a href="#bookmark268" class="s79">–</a><a href="#bookmark1038" class="s69">58 aggregation, </a><b>287</b><a href="#bookmark1046" class="s79">–</a><a href="#bookmark1046" class="s69">292</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1044" class="s75">container data members, </a>291<a href="#bookmark1046" class="s85">–</a><a href="#bookmark1046" class="s75">292</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1041" class="s75">Critter Farm program, </a>288<a href="#bookmark1042" class="s85">–</a><a href="#bookmark1042" class="s75">290</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1097" class="s75">deﬁned, 325</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1042" class="s75">object data members, </a>290<a href="#bookmark1044" class="s85">–</a><a href="#bookmark1044" class="s75">291</a></p><p style="padding-left: 21pt;text-indent: -11pt;text-align: left;"><a href="#bookmark771" class="s69">AI (Artiﬁcial Intelligence), 203</a></p><p class="s19" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">399</p><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">400 Index</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark508" class="s69">algorithms, </a>131<a href="#bookmark516" class="s79">–</a><a href="#bookmark547" class="s69">135, 146</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark474" class="s75">deﬁned, 116</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">ﬁnd()<a href="#bookmark513" class="s75">, 134</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark508" class="s75">High Scores program, </a>131<a href="#bookmark510" class="s85">–</a><a href="#bookmark510" class="s75">133</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark510" class="s75">preparing to use, 133</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">random_shufﬂe()<a href="#bookmark513" class="s75">, </a><span class="s74">134</span><a href="#bookmark516" class="s85">–</a><a href="#bookmark516" class="s75">135</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">sort()<a href="#bookmark516" class="s75">, 135</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1054" class="s69">allocating dynamic memory, </a>296<a href="#bookmark1066" class="s79">–</a><a href="#bookmark1066" class="s69">303</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1063" class="s75" name="bookmark1254">avoiding memory leaks, </a>301<a href="#bookmark1066" class="s85">–</a><a href="#bookmark1066" class="s75">303</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;">delete <a href="#bookmark1061" class="s75">operator, </a><span class="s74">300</span><a href="#bookmark1063" class="s85">–</a><a href="#bookmark1063" class="s75">301</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1058" class="s75">Heap program, </a>297<a href="#bookmark1060" class="s85">–</a><a href="#bookmark1060" class="s75">299</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a name="bookmark1255">new </a><a href="#bookmark1060" class="s75">operator, </a><span class="s74">299</span><a href="#bookmark1061" class="s85">–</a><a href="#bookmark1061" class="s75">300</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">altering</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">global variables, 169</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark500" class="s75">iterators, 128</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark885" class="s75">object through returning pointers, </a>243<a href="#bookmark888" class="s85">–</a><a href="#bookmark888" class="s75">244</a></p><p style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark768" class="s75">object through returning references, 202</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark739" class="s75">reference values, </a>190<a href="#bookmark742" class="s85">–</a><a href="#bookmark144" class="s75">191 value of variable, 26</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark135" class="s69">American Standard Code for Information Interchange (ASCII), </a><a href="#bookmark1247" class="s69">22, </a>393<a href="#bookmark1248" class="s79">–</a><a href="#bookmark1248" class="s69">396</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark277" class="s69">AND (&amp;&amp;) operator, 61</a><a href="#bookmark277" class="s76">tbl</a><a href="#bookmark310" class="s69">, 77</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">announceWinner()<a href="#bookmark797" class="s69">function, Tic-Tac-Toe game, 217</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark84" class="s69">ANSI (ANSI/ISO) standard, </a><a href="#bookmark742" class="s69">5 argument variable, </a><a href="#bookmark755" class="s69">191, 197</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark294" class="s69">arguments, 70</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark682" class="s75">versus parameters, </a>184 passing references to alter,</p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;">191<a href="#bookmark748" class="s85">–</a><a href="#bookmark748" class="s75">194</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark111" class="s69">arithmetic operators, </a>13<span class="s71">–</span><a href="#bookmark116" class="s69">15</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s75">adding, 14</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark111" class="s75">Expensive Calculator program, </a>13<a href="#bookmark113" class="s85">–</a><a href="#bookmark113" class="s75">14</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s75">ﬂoating point division, </a>14<a href="#bookmark116" class="s85">–</a><a href="#bookmark113" class="s75">15 integer division, </a>14<a href="#bookmark116" class="s85">–</a><a href="#bookmark116" class="s75">15</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark116" class="s75">modulus operator, 15</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s75">multiplying, 14</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark116" class="s75">order of operations, </a><a href="#bookmark113" class="s75">15 subtracting, 14</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark888" class="s69">Array Passer program, </a>244<a href="#bookmark891" class="s79">–</a><a href="#bookmark386" class="s69">246 arrays, </a>96<a href="#bookmark406" class="s79">–</a><a href="#bookmark406" class="s69">106</a></p><p style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark393" class="s75">accessing member functions of array element, 100</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark393" class="s75">bounds checking, </a>100<a href="#bookmark396" class="s85">–</a><a href="#bookmark396" class="s75">101</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark389" class="s75">creating, </a>98<a href="#bookmark391" class="s85">–</a><a href="#bookmark391" class="s75">99</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark386" class="s75">Hero&#39;s Inventory program, </a>96<a href="#bookmark389" class="s85">–</a><a href="#bookmark389" class="s75">98</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark391" class="s75">indexing, </a>99<a href="#bookmark393" class="s85">–</a><a href="#bookmark393" class="s75">100</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark401" class="s75">multidimensional, </a>103<a href="#bookmark406" class="s85">–</a><a href="#bookmark406" class="s75">106</a></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a href="#bookmark403" class="s75">creating, 105</a></p><p class="s74" style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><a href="#bookmark403" class="s75">indexing, </a>105<a href="#bookmark406" class="s85">–</a>106 Tic-Tac-Toe Board</p><p class="s74" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark401" class="s75">program, </a>103<a href="#bookmark403" class="s85">–</a><a href="#bookmark403" class="s75">105</a></p><p class="s74" style="padding-left: 38pt;text-indent: -11pt;text-align: left;"><a href="#bookmark888" class="s75">pointers and, </a>244<a href="#bookmark895" class="s85">–</a>248 Array Passer program,</p><p class="s74" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;">244<a href="#bookmark891" class="s85">–</a><a href="#bookmark891" class="s75">246</a></p><p class="s74" style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><a href="#bookmark891" class="s75">constant pointer, </a>246<a href="#bookmark893" class="s85">–</a>247 passing and returning,</p><p class="s74" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: left;">247<a href="#bookmark895" class="s85">–</a><a href="#bookmark895" class="s75">248</a></p><p class="s74" style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark477" class="s75">versus vectors, </a><a href="#bookmark547" class="s75">117, </a>146<a href="#bookmark550" class="s85">–</a><a href="#bookmark550" class="s75">147</a></p><p style="padding-left: 26pt;text-indent: -12pt;text-align: left;"><a href="#bookmark771" class="s69">Artiﬁcial Intelligence (AI), 203</a></p><p class="s68" style="padding-left: 26pt;text-indent: -12pt;text-align: justify;"><a href="#bookmark135" class="s69">ASCII (American Standard Code for Information Interchange), </a><a href="#bookmark1247" class="s69">22, </a>393<a href="#bookmark1248" class="s79">–</a><a href="#bookmark1248" class="s69">396</a></p><p class="s72" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">askNumber() <span class="s68">function</span></p><p style="padding-left: 38pt;text-indent: -12pt;text-align: left;"><a href="#bookmark653" class="s75">assigning default arguments to parameters, 173</a></p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark677" class="s75">Mad Lib game, </a><a href="#bookmark783" class="s75">182 Tic-Tac-Toe game, 209</a></p><p class="s72" style="padding-left: 26pt;text-indent: -12pt;text-align: left;">askText()<a href="#bookmark677" class="s69">function, Mad Lib game, 182</a></p><p class="s72" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">askYesNo1() <span class="s68">function</span></p><p class="s74" style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark618" class="s75">Mad Lib game, </a>157<a href="#bookmark620" class="s85">–</a><a href="#bookmark780" class="s75">158 Tic-Tac-Toe game, </a>208<a href="#bookmark783" class="s85">–</a><a href="#bookmark783" class="s75">209</a></p><p class="s68" style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><a href="#bookmark78" class="s69">assembly language, </a>2 assigning values</p><p style="padding-left: 26pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark135" class="s75">to Boolean variables, 22</a></p><p class="s74" style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark133" class="s75">to character variables, </a>21<a href="#bookmark135" class="s85">–</a><a href="#bookmark133" class="s75">22 to ﬂoating point variables, 21 to integer variables, 21</a></p><p class="s68" style="padding-left: 14pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark133" class="s69">assignment operator (=), </a><a href="#bookmark238" class="s69">21, </a>44,</p><p class="s68" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">313<a href="#bookmark1080" class="s79">–</a><a href="#bookmark1177" class="s69">315, </a>346<a href="#bookmark1180" class="s79">–</a><a href="#bookmark1180" class="s69">347</a></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s69">assignment statement, 70</a></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><a href="#bookmark523" class="s69">associative container, 138</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 6pt;padding-left: 14pt;text-indent: 0pt;text-align: left;"><a name="a407">B</a></p><p class="s68" style="padding-top: 1pt;padding-left: 14pt;text-indent: 0pt;text-align: left;"><span class="s72">badSwap() </span><a href="#bookmark745" class="s69">function, </a>193<a href="#bookmark748" class="s79">–</a>194,</p><p class="s68" style="padding-left: 26pt;text-indent: 0pt;text-align: left;">236<a href="#bookmark873" class="s79">–</a><a href="#bookmark873" class="s69">237</a></p><p class="s68" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">base class</p><p class="s74" style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1169" class="s75">constructors, </a>343<a href="#bookmark1173" class="s85">–</a><a href="#bookmark1223" class="s75">344, 379</a></p><p style="padding-left: 26pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1222" class="s75">destructors, 379</a></p><p class="s74" style="padding-left: 38pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1163" class="s75">member functions, </a>340<a href="#bookmark1177" class="s85">–</a>346 base class constructors,</p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;">343<a href="#bookmark1172" class="s85">–</a><a href="#bookmark1172" class="s75">344</a></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1175" class="s75">calling, </a>345<a href="#bookmark1177" class="s85">–</a><a href="#bookmark1177" class="s75">346</a></p><p class="s74" style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1172" class="s75">declaring virtual, </a>344 Overriding Boss program,</p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;">341<a href="#bookmark1168" class="s85">–</a><a href="#bookmark1168" class="s75">343</a></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1172" class="s75">overriding  virtual, </a>344<a href="#bookmark1175" class="s85">–</a><a href="#bookmark1175" class="s75">345</a></p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1183" class="s75">pointers, </a>350<a href="#bookmark1184" class="s85">–</a><a href="#bookmark1184" class="s75">351</a></p><p class="s72" style="padding-left: 26pt;text-indent: -12pt;text-align: justify;">begin()<a href="#bookmark499" class="s69">vector member function, </a><a href="#bookmark516" class="s69">127, 135</a></p><p class="s68" style="padding-top: 5pt;padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1194" class="s69">Blackjack  game, </a>356<a href="#bookmark1222" class="s79">–</a><a href="#bookmark1222" class="s69">379</a></p><p class="s73" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">Card <a href="#bookmark1200" class="s75">class, </a><span class="s74">361</span><a href="#bookmark1202" class="s85">–</a><a href="#bookmark1202" class="s75">363</a></p><p class="s73" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">Deck <a href="#bookmark1212" class="s75">class, </a><span class="s74">370</span><a href="#bookmark1215" class="s85">–</a><a href="#bookmark1215" class="s75">373</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s75">designing classes, </a>356<a href="#bookmark1198" class="s85">–</a><a href="#bookmark1198" class="s75">360</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span class="s73">Game </span><a href="#bookmark1215" class="s75">class, </a>373<a href="#bookmark1217" class="s85">–</a>376 <span class="s73">GenericPlayer </span><a href="#bookmark1205" class="s75">class, 36</a>6<a href="#bookmark1207" class="s85">–</a><a href="#bookmark1207" class="s75">36</a>7 <span class="s73">Hand </span><a href="#bookmark1202" class="s75">class, </a>363<a href="#bookmark1205" class="s85">–</a><a href="#bookmark1205" class="s75">366</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">House <a href="#bookmark1210" class="s75">class, </a><span class="s74">369</span><a href="#bookmark1212" class="s85">–</a><a href="#bookmark1212" class="s75">370</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><span class="s73">main() </span><a href="#bookmark1217" class="s75">function, </a>376<a href="#bookmark1219" class="s85">–</a>377 overloading the <span class="s73">operator()</span></p><p class="s74" style="padding-left: 24pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1219" class="s75">function, </a>377<a href="#bookmark1222" class="s85">–</a><a href="#bookmark1198" class="s75">379 planning game logic, </a>360<a href="#bookmark1200" class="s85">–</a>361 <span class="s73">Player </span><a href="#bookmark1209" class="s75">class, </a>368<a href="#bookmark1210" class="s85">–</a><a href="#bookmark1210" class="s75">369</a></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark94" class="s69">block, </a><a href="#bookmark171" class="s69">8, 37</a></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s69">body of function, 8</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">bool fullScreen <a href="#bookmark650" class="s69">parameter, 171</a></p><p class="s72" style="padding-left: 25pt;text-indent: -12pt;text-align: left;">bool IsBusted() const <span class="s68">member, BlackJack </span>GenericPlayer <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bool m_IsFaceUp <span class="s68">member,</span></p><p class="s68" style="padding-left: 25pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Card </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">bool <a href="#bookmark124" class="s69">type, </a><a href="#bookmark127" class="s69">18, 19</a><a href="#bookmark127" class="s76">tbl</a><a href="#bookmark127" class="s69">,</a><a href="#bookmark171" class="s69"> </a><span class="s68">37</span><a href="#bookmark173" class="s79">–</a><a href="#bookmark173" class="s69">38</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">bool <a href="#bookmark226" class="s69">variables, </a><a href="#bookmark312" class="s69">39, 78</a></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark173" class="s69">Boole, George, 38</a></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark135" class="s69">Boolean variables, 22</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark378" class="s69">bounds checking, </a>93,</p><p class="s68" style="text-indent: 0pt;text-align: right;">100<a href="#bookmark396" class="s79">–</a><a href="#bookmark419" class="s69">101, 111</a></p><p class="s68" style="text-indent: 0pt;text-align: right;"><a href="#bookmark229" class="s69">branching, </a>40<a href="#bookmark259" class="s79">–</a><a href="#bookmark259" class="s69">54</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">if <a href="#bookmark229" class="s75">statement, </a><span class="s74">40</span><a href="#bookmark253" class="s85">–</a><a href="#bookmark253" class="s75">51</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">with <span class="s73">else </span><a href="#bookmark240" class="s75">clauses, </a>45<a href="#bookmark253" class="s85">–</a><a href="#bookmark238" class="s75">51 nesting, </a>44<a href="#bookmark240" class="s85">–</a><a href="#bookmark240" class="s75">45</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><a href="#bookmark238" class="s75">relational operators, </a><a href="#bookmark232" class="s75">44 Score Rater program, </a>41<a href="#bookmark233" class="s85">–</a>42 <span class="s73">true </span>and <span class="s73">false </span>values,</p><p class="s74" style="padding-left: 48pt;text-indent: 0pt;line-height: 10pt;text-align: left;">42<a href="#bookmark235" class="s85">–</a><a href="#bookmark235" class="s75">43</a></p><p class="s74" style="padding-left: 36pt;text-indent: -11pt;text-align: left;"><span class="s73">switch </span><a href="#bookmark253" class="s75">statement, </a>51<a href="#bookmark259" class="s85">–</a><a href="#bookmark259" class="s75">54 creating ways to branch, </a>54 Menu Chooser program,</p><p class="s74" style="padding-left: 48pt;text-indent: 0pt;line-height: 10pt;text-align: left;">52<a href="#bookmark256" class="s85">–</a><a href="#bookmark256" class="s75">53</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">break <a href="#bookmark313" class="s69">statement, </a><a href="#bookmark419" class="s69">79, 111</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark273" class="s75">exiting loop, 60</a></p><p class="s74" style="padding-left: 36pt;text-indent: -11pt;text-align: left;"><a href="#bookmark268" class="s75">Finicky Counter program, </a>58<a href="#bookmark273" class="s85">–</a><a href="#bookmark273" class="s75">60</a></p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark310" class="s75">loops, 77</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">switch <a href="#bookmark253" class="s75">statement and, </a><a href="#bookmark278" class="s75">51 understanding when to use, </a><span class="s74">61 </span>while (true) <a href="#bookmark273" class="s75">loop, 60</a></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1194" class="s69">busting, BlackJack, 356</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 5pt;padding-left: 13pt;text-indent: 0pt;text-align: left;"><a name="a408">C</a></p><p class="s68" style="padding-top: 1pt;padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark168" class="s69">C programming language, </a>36 C<span class="s80">þþ </span><a href="#bookmark84" class="s69">program, </a>5<a href="#bookmark100" class="s79">–</a><a href="#bookmark100" class="s69">10</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark89" class="s75">commenting code, </a>7 creating ﬁrst program with,</p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">383<a href="#bookmark1236" class="s85">–</a><a href="#bookmark1236" class="s75">388</a></p><p class="s19" style="padding-top: 4pt;text-indent: 0pt;text-align: right;">Index 401</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">displaying text through standard deﬁning member functions, <b>Constructor Critter program,</b></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s75">output, </a>8<a href="#bookmark97" class="s85">–</a><a href="#bookmark944" class="s75">9 </a>258<a href="#bookmark948" class="s85">–</a><a href="#bookmark955" class="s75">259 </a><b>261</b><a href="#bookmark956" class="s79">–</a><a href="#bookmark956" class="s69">262</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark84" class="s75">Game Over program, </a>5<a href="#bookmark87" class="s85">–</a><a href="#bookmark948" class="s75">6 instatiating objects, </a>259 <a href="#bookmark952" class="s69">constructors, </a><b>260</b><a href="#bookmark962" class="s79">–</a><a href="#bookmark962" class="s69">264</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark90" class="s75">including other ﬁles, </a>7<a href="#bookmark95" class="s85">–</a><a href="#bookmark1222" class="s75">8 Simple Critter program, base class, 379</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><span class="s73">main() </span><a href="#bookmark94" class="s75">function, </a><a href="#bookmark100" class="s75">8, </a><a href="#bookmark941" class="s75">10 </a>256<a href="#bookmark942" class="s85">–</a><a href="#bookmark958" class="s75">257 calling automatically, </a>263<a href="#bookmark962" class="s85">–</a><a href="#bookmark97" class="s75">264 terminating statements, </a><a href="#bookmark89" class="s75">9 setting member access levels, Constructor Critter program, whitespace, </a><a href="#bookmark962" class="s75">7 </a>264<a href="#bookmark969" class="s85">–</a><a href="#bookmark955" class="s75">269 </a>261<a href="#bookmark956" class="s85">–</a><a href="#bookmark956" class="s75">262</a></p><p class="s74" style="padding-left: 52pt;text-indent: -11pt;text-align: left;"><b>calling </b><a href="#bookmark965" class="s75">deﬁning accessor member declaring and deﬁning, base class member functions, functions, </a>267<a href="#bookmark967" class="s85">–</a><a href="#bookmark956" class="s75">268 </a>262<a href="#bookmark958" class="s85">–</a><a href="#bookmark958" class="s75">263</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;">345<a href="#bookmark1177" class="s85">–</a><a href="#bookmark998" class="s75">346 deﬁning constant member deﬁned, 282</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark958" class="s75">constructors, </a>263<a href="#bookmark962" class="s85">–</a><a href="#bookmark967" class="s75">264 functions, </a>268<a href="#bookmark969" class="s85">–</a>269 instantiating objects from</p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><span class="s73">end()</span><a href="#bookmark1152" class="s75">vector member function, Private Critter program, derived class, </a><a href="#bookmark499" class="s75">336 </a>127<a href="#bookmark500" class="s85">–</a><a href="#bookmark962" class="s75">128 </a>264<a href="#bookmark963" class="s85">–</a>266 <b>containers</b></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark294" class="s75">functions, </a><a href="#bookmark611" class="s75">70, </a><a href="#bookmark550" class="s75">154 specifying public and adaptors, 147</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark669" class="s75">inlined functions, </a>179<a href="#bookmark672" class="s85">–</a><a href="#bookmark963" class="s75">180 private, </a>266<a href="#bookmark965" class="s85">–</a><a href="#bookmark523" class="s75">267 associative, </a><a href="#bookmark952" class="s75">138 member functions, </a><a href="#bookmark1044" class="s75">260 static data members data members, </a>291<a href="#bookmark1046" class="s85">–</a><a href="#bookmark665" class="s75">292 overloaded functions, </a><a href="#bookmark975" class="s75">177 accessing, </a>272<a href="#bookmark978" class="s85">–</a><a href="#bookmark544" class="s75">273 deﬁned, 145</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark975" class="s75">static member functions, declaring, </a><a href="#bookmark523" class="s75">272 sequential, </a>138<a href="#bookmark526" class="s85">–</a><a href="#bookmark978" class="s75">139 </a>273<a href="#bookmark982" class="s85">–</a><a href="#bookmark975" class="s75">274 initializing, </a>272 <span class="s72">continue </span><a href="#bookmark271" class="s69">statement, </a><a href="#bookmark278" class="s69">59, </a><b>61,</b></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark130" class="s69">camel case, </a>20 <a href="#bookmark310" class="s75">Static Critter program, </a><a href="#bookmark419" class="s69">77, 111</a></p><p class="s74" style="text-indent: 0pt;text-align: right;"><span class="s72">capacity()</span><a href="#bookmark972" class="s69">member function, </a>270<a href="#bookmark973" class="s85">–</a>271 <a href="#bookmark1099" class="s69">copy constructors, 326</a></p><p class="s68" style="text-indent: 0pt;text-align: right;">136<a href="#bookmark521" class="s79">–</a>137 <a href="#bookmark1074" class="s75">static member functions declaring, </a><span class="s74">309</span><a href="#bookmark1078" class="s85">–</a><a href="#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">Card </span><a href="#bookmark1196" class="s69">class, BlackJack, </a><b>357, </b><a href="#bookmark978" class="s75">calling, </a>273<a href="#bookmark982" class="s85">–</a><a href="#bookmark1075" class="s75">274 deﬁning, </a>309<a href="#bookmark1079" class="s85">–</a><a href="#bookmark1079" class="s75">313</a></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1200" class="s69">359, </a>361<a href="#bookmark1202" class="s79">–</a>363 <a href="#bookmark978" class="s75">declaring, </a><span class="s74">273 using in derived classes,</span></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark130" class="s69">case sensitivity, </a><a href="#bookmark173" class="s69">20, </a><a href="#bookmark944" class="s69">38, </a>258 <a href="#bookmark979" class="s75">deﬁning, </a><a href="#bookmark1177" class="s75">273 </a><span class="s74">346</span><a href="#bookmark1180" class="s85">–</a><a href="#bookmark1180" class="s75">347</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">cctype </span><a href="#bookmark536" class="s69">ﬁle, </a>142 <span class="s74">Static Critter program, </span><a href="#bookmark359" class="s69">Counter program, </a>82<a href="#bookmark360" class="s79">–</a><a href="#bookmark360" class="s69">84</a></p><p class="s74" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">change_global() </span><a href="#bookmark643" class="s69">function, </a><a href="#bookmark972" class="s69">169 </a>270<a href="#bookmark973" class="s85">–</a>271 <span class="s72">cout </span><a href="#bookmark94" class="s69">object, </a><b>8</b><a href="#bookmark97" class="s79">–</a><a href="#bookmark168" class="s69">9, 36</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">char </span>type, 19<i>tbl</i><a href="#bookmark421" class="s69">, </a>112 <span class="s72">clear()</span><a href="#bookmark489" class="s69">member function, </a><a href="#bookmark982" class="s69">122 Critter Caretaker game, </a>274<a href="#bookmark995" class="s79">–</a>281 <span class="s72">char </span><a href="#bookmark620" class="s69">value, </a><a href="#bookmark685" class="s69">158 code proﬁling, </a>185<a href="#bookmark688" class="s79">–</a>186 <span class="s73">Critter </span><a href="#bookmark989" class="s75">class, </a><span class="s74">277</span><a href="#bookmark993" class="s85">–</a><span class="s74">280 </span><a href="#bookmark133" class="s69">character variables, </a>21<a href="#bookmark135" class="s79">–</a>22 combined assignment operators, <a href="#bookmark989" class="s75">class constructor, </a><span class="s74">277</span><a href="#bookmark991" class="s85">–</a><span class="s74">278 </span><span class="s72">cin </span><a href="#bookmark168" class="s69">object, </a><a href="#bookmark144" class="s69">36 </a>26<a href="#bookmark148" class="s79">–</a>27 <a href="#bookmark990" class="s75">class deﬁnition, 277</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><a href="#bookmark938" class="s69">classes, </a>255<a href="#bookmark1000" class="s79">–</a><a href="#bookmark89" class="s69">283 commenting code, </a>7 <span class="s73">Eat() </span><span class="s74">member function,</span></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><span class="s81">See also </span>advanced classes <a href="#bookmark89" class="s69">comments, </a><a href="#bookmark171" class="s69">7, </a><a href="#bookmark992" class="s69">37 </a>279<a href="#bookmark993" class="s85">–</a><a href="#bookmark993" class="s75">280</a></p><p class="s74" style="padding-left: 64pt;text-indent: -11pt;text-align: left;"><a href="#bookmark952" class="s75">constructors, </a>260<a href="#bookmark962" class="s85">–</a>264 <a href="#bookmark82" class="s69">compile errors, </a><b>4 </b><span class="s73">GetMood() </span>member calling automatically, <a href="#bookmark78" class="s69">compiler, deﬁned, </a><b>2 </b><a href="#bookmark991" class="s75">function, 278</a></p><p class="s74" style="padding-left: 64pt;text-indent: 11pt;text-align: left;">263<a href="#bookmark962" class="s85">–</a>264 <a href="#bookmark171" class="s69">compiler warning, </a><b>37 </b><span class="s73">PassTime() </span>member Constructor Critter <span class="s72">computerMove()</span><b>function, </b><a href="#bookmark991" class="s75">function, 278</a></p><p class="s74" style="padding-left: 64pt;text-indent: 11pt;text-align: left;"><a href="#bookmark955" class="s75">program, </a>261<a href="#bookmark956" class="s85">–</a>262 <b>Tic-Tac-Toe game, </b><span class="s73">Play() </span><a href="#bookmark793" class="s75">member function, declaring and deﬁning, </a><b>213</b><a href="#bookmark795" class="s79">–</a><a href="#bookmark993" class="s69">216 </a><a href="#bookmark993" class="s75">280</a></p><p class="s74" style="padding-left: 52pt;text-indent: 23pt;text-align: left;">262<a href="#bookmark958" class="s85">–</a>263 <b>concatenating </b><span class="s72">string </span><a href="#bookmark375" class="s69">objects, </a><b>92 </b><span class="s73">Talk() </span>member function, Critter Caretaker game, <span class="s72">const </span><a href="#bookmark647" class="s69">keyword, </a><a href="#bookmark867" class="s69">170, </a><a href="#bookmark992" class="s69">234, </a><a href="#bookmark992" class="s75">279</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;">274<a href="#bookmark995" class="s85">–</a><a href="#bookmark898" class="s75">281 </a><a href="#bookmark902" class="s69">249, </a><a href="#bookmark969" class="s69">251, </a><b>269 </b><span class="s73">main() </span><a href="#bookmark993" class="s75">function, </a>280<a href="#bookmark995" class="s85">–</a><a href="#bookmark995" class="s75">281</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><span class="s73">Critter </span><a href="#bookmark989" class="s75">class, </a>277<a href="#bookmark993" class="s85">–</a>280 <a href="#bookmark497" class="s69">constant iterator, </a><b>126 </b><a href="#bookmark984" class="s75">planning game, </a>275<a href="#bookmark985" class="s85">–</a>276 <span class="s73">main() </span><a href="#bookmark993" class="s75">function, </a>280<a href="#bookmark995" class="s85">–</a>281 <b>constant member functions, </b><a href="#bookmark984" class="s75">planning pseudocode, planning game, </a>275<a href="#bookmark985" class="s85">–</a><a href="#bookmark967" class="s75">276 </a><b>268</b><a href="#bookmark969" class="s79">–</a><a href="#bookmark986" class="s69">269 </a><a href="#bookmark986" class="s75">276</a></p><p class="s68" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><a href="#bookmark986" class="s75">planning pseudocode, </a><span class="s74">276 </span><a href="#bookmark891" class="s69">constant pointer, </a>246<a href="#bookmark893" class="s79">–</a><a href="#bookmark898" class="s69">247, </a>249 Critter Farm program,</p><p class="s68" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark998" class="s75">deﬁned, </a><span class="s74">282 </span><a href="#bookmark755" class="s69">constant reference, </a>197<a href="#bookmark758" class="s79">–</a><a href="#bookmark800" class="s69">198, </a><a href="#bookmark1041" class="s69">218 </a>288<a href="#bookmark1042" class="s79">–</a><a href="#bookmark1042" class="s69">290</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark938" class="s75">deﬁning new types, </a>255<a href="#bookmark952" class="s85">–</a>260            <a href="#bookmark152" class="s69">constants, 2</a><b>9</b><a href="#bookmark158" class="s79">–</a><b>32                                   </b><span class="s72">cstdlib </span><a href="#bookmark312" class="s69">ﬁle, 78</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><a href="#bookmark169" class="s75">accessing data members, deﬁned, </a>36 <span class="s72">cstring </span><a href="#bookmark398" class="s69">ﬁle, 102</a></p><p class="s74" style="padding-left: 42pt;text-indent: 0pt;text-align: center;">259<a href="#bookmark952" class="s85">–</a><a href="#bookmark156" class="s75">260                                       enumerations, </a>31<a href="#bookmark158" class="s85">–</a>32                        <a href="#bookmark89" class="s69">C-style comments, 7</a></p><p class="s74" style="padding-left: 43pt;text-indent: 0pt;text-align: center;"><a href="#bookmark80" class="s75">calling member functions,                Game Stats </a><a href="#bookmark16" class="s75">3.</a>0 program,                  <a href="#bookmark396" class="s69">C-style strings,  </a><b>101</b><a href="#bookmark398" class="s79">–</a><a href="#bookmark398" class="s69">102</a></p><p class="s74" style="padding-bottom: 1pt;padding-left: 76pt;text-indent: 0pt;text-align: left;"><a href="#bookmark152" class="s75">260 </a>29<a href="#bookmark154" class="s85">–</a>30 <b>curly braces</b></p><table style="border-collapse:collapse;margin-left:62.1523pt" cellspacing="0"><tr style="height:10pt"><td style="width:113pt"><p style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="#bookmark944" class="s83">declaring data members, 258</a></p></td><td style="width:118pt"><p style="padding-left: 11pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="#bookmark647" class="s83">global, 170</a></p></td><td style="width:95pt"><p style="padding-left: 28pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="#bookmark94" class="s83">functions, 8</a></p></td></tr><tr style="height:9pt"><td style="width:113pt"><p class="s82" style="padding-left: 2pt;text-indent: 0pt;line-height: 8pt;text-align: left;">declaring member</p></td><td style="width:118pt"><p style="padding-left: 11pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="#bookmark156" class="s83">overview, 31</a></p></td><td style="width:95pt"><p style="padding-left: 28pt;text-indent: 0pt;line-height: 8pt;text-align: left;"><a href="#bookmark633" class="s83">nested scopes, 165</a></p></td></tr><tr style="height:11pt"><td style="width:113pt"><p style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><a href="#bookmark944" class="s83">functions, 258</a></p></td><td style="width:118pt"><p class="s82" style="padding-left: 11pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><a href="#bookmark862" class="s83">pointers and, </a>231<a href="#bookmark867" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 8.5pt;">–</a><a href="#bookmark867" class="s83">234</a></p></td><td style="width:95pt"><p style="padding-left: 28pt;text-indent: 0pt;line-height: 9pt;text-align: left;"><a href="#bookmark629" class="s83">scopes, 163</a></p></td></tr></table><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1256">402 Index</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 3pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a409">D</a></p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark880" class="s69">dangling pointers, </a><a href="#bookmark901" class="s69">241, </a>250<a href="#bookmark902" class="s79">–</a>251,</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1096" class="s69">301, 325</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark367" class="s69">data members, </a><a href="#bookmark416" class="s69">87, 110</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s75">accessing, </a>259<a href="#bookmark952" class="s85">–</a><a href="#bookmark952" class="s75">260</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1044" class="s75">container, </a>291<a href="#bookmark1046" class="s85">–</a><a href="#bookmark1046" class="s75">292</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">declaring, 258</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1066" class="s75">heap and, </a>303<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1074" class="s75">declaring and deﬁning copy constructors, </a>309<a href="#bookmark1078" class="s85">–</a><a href="#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1071" class="s75">declaring and deﬁning destructors, </a>308<a href="#bookmark1074" class="s85">–</a><a href="#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1069" class="s75" name="bookmark1257">declaring data members that point to values on heap, </a>307<a href="#bookmark1071" class="s85">–</a><a href="#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1066" class="s75">Heap Data Member program, </a>303<a href="#bookmark1069" class="s85">–</a><a href="#bookmark1069" class="s75">307</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1078" class="s75">overloading assignment operator, </a>313<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1042" class="s75">object, </a>290<a href="#bookmark1044" class="s85">–</a><a href="#bookmark1044" class="s75">291</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck <a href="#bookmark1196" class="s69">class, BlackJack, </a><a href="#bookmark1198" class="s69">357, </a><span class="s68">360,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">370<a href="#bookmark1215" class="s79">–</a><a href="#bookmark1215" class="s69">373</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">Deck m_Deck <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 41pt;text-indent: 11pt;text-align: left;">Game <a href="#bookmark1198" class="s69">class, </a><span class="s68">360 declaring</span></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark956" class="s75">constructors, </a>262<a href="#bookmark958" class="s85">–</a><a href="#bookmark958" class="s75">263</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1074" class="s75">copy constructors, </a>309<a href="#bookmark1078" class="s85">–</a><a href="#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">data members, </a><a href="#bookmark1069" class="s75">258, </a>307<a href="#bookmark1071" class="s85">–</a><a href="#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1071" class="s75">destructors, </a>308<a href="#bookmark1074" class="s85">–</a><a href="#bookmark1074" class="s75">309</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark609" class="s75">functions, </a><a href="#bookmark680" class="s75">153, 183</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark495" class="s75">iterators, </a>125<a href="#bookmark497" class="s85">–</a><a href="#bookmark497" class="s75">126</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">member functions, 258</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark403" class="s75">multidimensional arrays, 105</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark846" class="s75">pointers, </a>226<a href="#bookmark849" class="s85">–</a><a href="#bookmark899" class="s75">227, 249</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark737" class="s75">references, 189</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark975" class="s75">static data members, </a><a href="#bookmark978" class="s75">272 static member functions, </a><a href="#bookmark127" class="s75">273 variables, </a>19<a href="#bookmark131" class="s85">–</a><a href="#bookmark634" class="s75">20, 165</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark479" class="s75">vectors, </a>119<a href="#bookmark482" class="s85">–</a><a href="#bookmark482" class="s75">120</a></p><p class="s68" style="padding-left: 56pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1076" class="s69">deep copy, </a><a href="#bookmark1099" class="s69">310, </a><a href="#bookmark650" class="s69">326 default arguments,  </a>171<a href="#bookmark656" class="s79">–</a><a href="#bookmark682" class="s69">174, 184</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark653" class="s75">assigning to parameters, </a>173<a href="#bookmark656" class="s85">–</a><a href="#bookmark656" class="s75">174</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark650" class="s75">Give Me a Number program, </a>171<a href="#bookmark651" class="s85">–</a><a href="#bookmark651" class="s75">172</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark656" class="s75">overriding, 174</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark653" class="s75">specifying, 173</a></p><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1078" class="s69">default assignment operator, </a><a href="#bookmark1099" class="s69">313, 326</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark956" class="s69">default constructor, </a>262<a href="#bookmark958" class="s79">–</a><a href="#bookmark1002" class="s69">263, 284</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1074" class="s69">default copy constructor, </a><a href="#bookmark1099" class="s69">309, 326</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1071" class="s69">default destructor, 308</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">default <a href="#bookmark310" class="s69">keyword, 77</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">default <a href="#bookmark253" class="s69">statement, 51</a></p><p class="s68" style="padding-top: 7pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">deﬁning</p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark965" class="s75">accessor member functions, </a>267<a href="#bookmark967" class="s85">–</a><a href="#bookmark967" class="s75">268</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark967" class="s75">constant member functions, </a>268<a href="#bookmark969" class="s85">–</a><a href="#bookmark969" class="s75">269</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark956" class="s75">constructors, </a>262<a href="#bookmark958" class="s85">–</a><a href="#bookmark958" class="s75">263</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1074" class="s75">copy constructors, </a>309<a href="#bookmark1078" class="s85">–</a><a href="#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1071" class="s75">destructors, </a>308<a href="#bookmark1074" class="s85">–</a><a href="#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark156" class="s75">enumerations, </a>31<a href="#bookmark158" class="s85">–</a><a href="#bookmark158" class="s75">32</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark611" class="s75">functions, 154</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark945" class="s75">member functions, </a>258<a href="#bookmark949" class="s85">–</a><a href="#bookmark998" class="s75">259, </a><a href="#bookmark138" class="s75">282 new names for types, 23</a></p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark938" class="s75">new types, </a>255<a href="#bookmark952" class="s85">–</a>260 accessing data members,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">259<a href="#bookmark952" class="s85">–</a><a href="#bookmark952" class="s75">260</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark952" class="s75">calling member functions, 260</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">declaring data members, </a>258 declaring member</p><p style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">functions, 258</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark944" class="s75">deﬁning member functions, </a>258<a href="#bookmark948" class="s85">–</a><a href="#bookmark948" class="s75">259</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s75">instatiating objects, </a>259 Simple Critter program,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">256<a href="#bookmark942" class="s85">–</a><a href="#bookmark942" class="s75">257</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark978" class="s75">static member functions, </a>273 variables inside <span class="s73">switch</span></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark636" class="s75">statements, 166</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1184" class="s75">virtual destructors, </a>351<a href="#bookmark1186" class="s85">–</a><a href="#bookmark1186" class="s75">352</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><span class="s72">delete </span><a href="#bookmark1061" class="s69">operator, </a>300<a href="#bookmark1063" class="s79">–</a><a href="#bookmark1096" class="s69">301, </a>325 <span class="s72">deque </span><a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark500" class="s69">139 dereference operator (*), </a><a href="#bookmark547" class="s69">128, </a>146,</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark859" class="s69">230</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">dereferencing</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark500" class="s75">iterators, 128</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark852" class="s75">pointers, </a>228<a href="#bookmark855" class="s85">–</a><a href="#bookmark899" class="s75">229, 249</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1222" class="s69">derived classes, 379</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1150" class="s75">from base classes, </a>335<a href="#bookmark1152" class="s85">–</a>336 deriving from abstract classes,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">355<a href="#bookmark1194" class="s85">–</a><a href="#bookmark1194" class="s75">356</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1152" class="s75">instantiating objects from, </a>336<a href="#bookmark1155" class="s85">–</a><a href="#bookmark1155" class="s75">337</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1163" class="s75">using access modiﬁers when deriving, 340</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1183" class="s75">using base class pointers to objects, </a>350<a href="#bookmark1184" class="s85">–</a><a href="#bookmark1184" class="s75">351</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1177" class="s75">using overloaded assignment operators and copy constructors in, </a>346<a href="#bookmark1180" class="s85">–</a><a href="#bookmark1180" class="s75">347</a></p><p class="s68" style="padding-left: 21pt;text-indent: -12pt;text-align: left;"><a href="#bookmark281" class="s69">Designers Network Program, </a>62<a href="#bookmark283" class="s79">–</a><a href="#bookmark283" class="s69">65</a></p><p style="text-indent: 0pt;text-align: right;"><a href="#bookmark1099" class="s69">destructors, 326</a></p><p style="text-indent: 0pt;text-align: right;"><a href="#bookmark1222" class="s75">base class, 379</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1071" class="s75">declaring, </a>308<a href="#bookmark1074" class="s85">–</a><a href="#bookmark1074" class="s75">309</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1072" class="s75">deﬁning, </a>308<a href="#bookmark1075" class="s85">–</a><a href="#bookmark1075" class="s75">309</a></p><p style="padding-top: 7pt;padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1152" class="s75">instantiating objects from derived class, 336</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1180" class="s75">virtual, 347</a></p><p class="s68" style="padding-left: 9pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1226" class="s75">when to make virtual, </a><span class="s74">381 </span><a href="#bookmark290" class="s69">Die Roller program, </a>68<a href="#bookmark292" class="s79">–</a>69 <span class="s72">display() </span>function</p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark755" class="s75">constant referencees and, </a>197 passing and returning arrays,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">247<a href="#bookmark895" class="s85">–</a><a href="#bookmark895" class="s75">248</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">displayBoard()<span class="s68">function,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark786" class="s69">Tic-Tac-Toe game, </a>210<a href="#bookmark789" class="s79">–</a><a href="#bookmark789" class="s69">211</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">do <a href="#bookmark264" class="s69">loops, </a><span class="s68">56</span><a href="#bookmark268" class="s79">–</a><a href="#bookmark310" class="s69">58, 77</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark285" class="s75">logical NOT operator, </a><a href="#bookmark266" class="s75">66 overview, </a>57<a href="#bookmark268" class="s85">–</a><a href="#bookmark268" class="s75">58</a></p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark264" class="s75">Play Again 2.0 program, </a>56<a href="#bookmark266" class="s85">–</a><a href="#bookmark266" class="s75">57</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark859" class="s69">dot operator, </a>230 <span class="s72">double </span><a href="#bookmark124" class="s69">type, </a><a href="#bookmark127" class="s69">18, 19</a><i>tbl </i><a href="#bookmark551" class="s69">double-ended queue, 148</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark475" class="s69">dynamic array, </a>116 dynamic memory</p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1054" class="s75">allocating, </a>296<a href="#bookmark1066" class="s85">–</a><a href="#bookmark1066" class="s75">303</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1063" class="s75">avoiding memory leaks, 301</a><a href="#bookmark1066" class="s85">– </a><a href="#bookmark1066" class="s75">303</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">delete <a href="#bookmark1061" class="s75">operator, </a><span class="s74">300</span><a href="#bookmark1063" class="s85">–</a><a href="#bookmark1063" class="s75">301</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1058" class="s75">Heap program, </a>297<a href="#bookmark1060" class="s85">–</a><a href="#bookmark1060" class="s75">299</a></p><p class="s74" style="padding-left: 21pt;text-indent: 11pt;text-align: left;"><span class="s73">new </span><a href="#bookmark1060" class="s75">operator, </a>299<a href="#bookmark1061" class="s85">–</a>300 data members and heap,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">303<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1074" class="s75">copy constructors, </a>309<a href="#bookmark1078" class="s85">–</a><a href="#bookmark1078" class="s75">313</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1069" class="s75">declaring, </a>307<a href="#bookmark1071" class="s85">–</a><a href="#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1071" class="s75">destructors, </a>308<a href="#bookmark1074" class="s85">–</a>309 Heap Data Member</p><p class="s74" style="padding-left: 33pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1066" class="s75">program, </a>303<a href="#bookmark1069" class="s85">–</a>307 overloading assignment op-</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1078" class="s75">erator, </a>313<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a410">E</a></p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1184" class="s69">early binding, 351</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">Eat() <span class="s68">member function, </span>Critter</p><p class="s68" style="text-indent: 0pt;text-align: right;"><a href="#bookmark992" class="s69">class, </a>279<a href="#bookmark993" class="s79">–</a><a href="#bookmark993" class="s69">280</a></p><p style="text-indent: 0pt;text-align: right;"><a href="#bookmark78" class="s69">editor, deﬁned, 2</a></p><p class="s72" style="padding-left: 21pt;text-indent: -12pt;text-align: left;">else <span class="s68">clause, </span>if <a href="#bookmark240" class="s69">statement, </a><span class="s68">45</span><a href="#bookmark253" class="s79">–</a><a href="#bookmark310" class="s69">51, 77</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark244" class="s75">creating ways to branch, </a>47<a href="#bookmark247" class="s85">–</a>48 <span class="s73">if </span><a href="#bookmark247" class="s75">statements with, </a>48<a href="#bookmark253" class="s85">–</a><a href="#bookmark243" class="s75">51 Score Rater 2.0 program, </a>46<a href="#bookmark244" class="s85">–</a><a href="#bookmark244" class="s75">47</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">empty statements, <span class="s72">for </span><a href="#bookmark362" class="s69">loops, 85</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">empty()<a href="#bookmark386" class="s69">member function, </a><a href="#bookmark489" class="s69">96, 122</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark624" class="s69">encapsulation, </a><a href="#bookmark682" class="s69">160, </a><a href="#bookmark1002" class="s69">184, 284</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">end() <span class="s68">member function</span></p><p class="s74" style="text-indent: 0pt;text-align: right;"><a href="#bookmark499" class="s75">calling, </a>127<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">string <a href="#bookmark516" class="s75">objects, 135</a></p><p class="s19" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark1258">Index 403</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark156" class="s69">enumerations, </a>31<a href="#bookmark158" class="s79">–</a><a href="#bookmark168" class="s69">32, 36</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark156" class="s69">enumerators, 31</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">equal to (==) operator, 40<i>tbl</i><a href="#bookmark238" class="s69">, 44</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">erase()<a href="#bookmark383" class="s69">member function, </a><span class="s68">95,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">130<a href="#bookmark508" class="s79">–</a><a href="#bookmark508" class="s69">131</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark82" class="s69">errors, </a><a href="#bookmark165" class="s69">4, 35</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark138" class="s69">escape sequences, </a><a href="#bookmark1251" class="s69">23, 397</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark78" class="s69">executable ﬁle, </a>2<a href="#bookmark82" class="s79">–</a><a href="#bookmark82" class="s69">4</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark362" class="s69">exit statement, 85</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark111" class="s69" name="bookmark1259">Expensive Calculator program, </a>13<a href="#bookmark113" class="s79">–</a><a href="#bookmark113" class="s69">14</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s69">expression, 14</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="bookmark1260">F</a></p><p class="s72" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">false <span class="s68">values</span></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark235" class="s75">interpreting, 43</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark233" class="s75">testing, </a>42<a href="#bookmark235" class="s85">–</a><a href="#bookmark235" class="s75">43</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">ﬁnd() <a href="#bookmark513" class="s69">algorithm, 134</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">ﬁnd() </span><a href="#bookmark381" class="s69">member function, </a>94<a href="#bookmark383" class="s79">–</a>95 Finicky Counter program,</p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">58<a href="#bookmark273" class="s79">–</a><a href="#bookmark273" class="s69">60</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">ﬂoat <a href="#bookmark127" class="s69">type, 19</a><a href="#bookmark127" class="s76">tbl</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s69">ﬂoating points, </a><a href="#bookmark133" class="s69">14, 21</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">for <a href="#bookmark356" class="s69">loops, </a><span class="s68">81</span><a href="#bookmark367" class="s79">–</a><a href="#bookmark367" class="s69">87</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark359" class="s75">Counter program, </a>82<a href="#bookmark360" class="s85">–</a><a href="#bookmark360" class="s75">84</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark360" class="s75">counting with, </a>84<a href="#bookmark362" class="s85">–</a><a href="#bookmark636" class="s75">85 deﬁning variables inside, </a><a href="#bookmark365" class="s75">166 nesting, </a>86<a href="#bookmark367" class="s85">–</a><a href="#bookmark367" class="s75">87</a></p><p class="s74" style="padding-left: 41pt;text-indent: 11pt;text-align: left;"><a href="#bookmark362" class="s75">using empty statements in, </a>85 <a href="#bookmark421" class="s69">FORTRAN language, </a><a href="#bookmark113" class="s69">112 forward slash (/), 14</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1054" class="s69">free store, </a><a href="#bookmark1096" class="s69">296, </a>325. <i>See also </i><a href="#bookmark1061" class="s69">heap freeing memory, 300</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1046" class="s69">Friend Critter program, </a>292<a href="#bookmark1049" class="s79">–</a><a href="#bookmark1049" class="s69">294</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1096" class="s69">friend functions, 325</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1051" class="s75">creating, 295</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1046" class="s75">Friend Critter program, </a>292<a href="#bookmark1049" class="s85">–</a><a href="#bookmark1049" class="s75">294</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark611" class="s69">function body, 154</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark611" class="s69">function header, 154</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark682" class="s69">function inlining, 184</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s69">functions, </a><a href="#bookmark165" class="s69">8, </a><a href="#bookmark604" class="s69">35, </a>151<a href="#bookmark688" class="s79">–</a><a href="#bookmark688" class="s69">186</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark615" class="s75">abstraction, </a>155 accepting values into</p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark620" class="s75">parameters, </a>158<a href="#bookmark624" class="s85">–</a><a href="#bookmark624" class="s75">160</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s75">calling, </a><a href="#bookmark611" class="s75">70, </a>154 calling with default</p><p style="text-indent: 0pt;text-align: right;"><a href="#bookmark653" class="s75">arguments, 173</a></p><p style="text-indent: 0pt;text-align: right;"><a href="#bookmark609" class="s75">declaring, </a><a href="#bookmark680" class="s75">153, 183</a></p><p class="s74" style="padding-left: 64pt;text-indent: -11pt;text-align: left;"><a href="#bookmark650" class="s75">default arguments, </a>171<a href="#bookmark656" class="s85">–</a>174 assigning to parameters,</p><p class="s74" style="padding-left: 76pt;text-indent: 0pt;line-height: 10pt;text-align: left;">173<a href="#bookmark656" class="s85">–</a><a href="#bookmark656" class="s75">174</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark650" class="s75">Give Me a Number program, </a>171<a href="#bookmark651" class="s85">–</a><a href="#bookmark651" class="s75">172</a></p><p style="padding-top: 5pt;padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s75">overriding, 174</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark653" class="s75">specifying, 173</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark612" class="s75">deﬁning, 154</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark624" class="s75">encapsulation, 160</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark647" class="s75">global constants, 170</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark636" class="s75">global variables, </a>166<a href="#bookmark647" class="s85">–</a><a href="#bookmark647" class="s75">170</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark640" class="s75">accessing, 168</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">altering, 169</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark640" class="s75">declaring, 168</a></p><p class="s74" style="padding-left: 47pt;text-indent: -12pt;text-align: left;"><a href="#bookmark636" class="s75">Global Reach program, </a>166<a href="#bookmark640" class="s85">–</a><a href="#bookmark640" class="s75">168</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">hiding, </a><a href="#bookmark647" class="s75">169 minimizing use of, 170</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark665" class="s75">inlining, </a>177<a href="#bookmark672" class="s85">–</a><a href="#bookmark672" class="s75">180</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark669" class="s75">calling, </a>179<a href="#bookmark672" class="s85">–</a><a href="#bookmark672" class="s75">180</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark669" class="s75">specifying, 179</a></p><p class="s74" style="padding-left: 47pt;text-indent: -12pt;text-align: left;"><a href="#bookmark665" class="s75">Taking Damage program, </a>177<a href="#bookmark669" class="s85">–</a><a href="#bookmark669" class="s75">179</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark607" class="s75">Instructions program, </a>152<a href="#bookmark609" class="s85">–</a><a href="#bookmark672" class="s75">153 Mad Lib game, </a>180<a href="#bookmark680" class="s85">–</a><a href="#bookmark680" class="s75">183</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">askNumber()<a href="#bookmark677" class="s75">function, 182</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">askText()<a href="#bookmark677" class="s75">function, 182</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">main()<a href="#bookmark674" class="s75">function, </a><span class="s74">181</span><a href="#bookmark677" class="s85">–</a><a href="#bookmark677" class="s75">182</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark674" class="s75">setting up, 181</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">tellStory()<a href="#bookmark680" class="s75">function, 183</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark657" class="s75">overloading, </a>174<a href="#bookmark666" class="s85">–</a><a href="#bookmark683" class="s75">177, 184</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark665" class="s75">calling, 177</a></p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark662" class="s75">creating, 176</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s75">Triple program, </a>174<a href="#bookmark662" class="s85">–</a><a href="#bookmark662" class="s75">176</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark609" class="s75">prototype, </a><a href="#bookmark622" class="s75">153, 159</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark618" class="s75">return values, </a>157<a href="#bookmark620" class="s85">–</a><a href="#bookmark620" class="s75">158</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">return <a href="#bookmark620" class="s75">statement, </a><a href="#bookmark618" class="s75">158 specifying return type, </a><a href="#bookmark620" class="s75">157 using, 158</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark626" class="s75">scopes, </a>161<a href="#bookmark636" class="s85">–</a><a href="#bookmark636" class="s75">166</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark633" class="s75">nested, </a>165<a href="#bookmark636" class="s85">–</a><a href="#bookmark636" class="s75">166</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s75">Scoping program, </a>161<a href="#bookmark629" class="s85">–</a><a href="#bookmark629" class="s75">163</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark629" class="s75">separate, </a>163<a href="#bookmark631" class="s85">–</a><a href="#bookmark631" class="s75">164</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s75">software reuse, 161</a></p><p class="s70" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark776" class="s75">Tic-Tac-Toe game, 206</a>tbl <a href="#bookmark615" class="s75">Yes or No program, </a><span class="s74">155</span><a href="#bookmark618" class="s85">–</a><a href="#bookmark618" class="s75">157</a></p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark124" class="s69">fundamental types, 18</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 11pt;text-indent: 0pt;text-align: left;"><a name="a411">G</a></p><p class="s72" style="padding-top: 1pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Game <a href="#bookmark1196" class="s69">class, BlackJack, </a><a href="#bookmark1198" class="s69">357, </a><span class="s68">360,</span></p><p class="s68" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">373<a href="#bookmark1217" class="s79">–</a><a href="#bookmark1217" class="s69">376</a></p><p class="s68" style="padding-left: 23pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1080" class="s69">Game Lobby program, </a>315<a href="#bookmark1096" class="s79">–</a><a href="#bookmark1096" class="s69">325</a></p><p class="s73" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Lobby <a href="#bookmark1084" class="s75">class, </a><span class="s74">318</span><a href="#bookmark1088" class="s85">–</a><a href="#bookmark1088" class="s75">320</a></p><p class="s73" style="padding-left: 35pt;text-indent: -12pt;text-align: left;">Lobby::AddPlayer() <a href="#bookmark1088" class="s75">member function, </a><span class="s74">320</span><a href="#bookmark1090" class="s85">–</a><a href="#bookmark1090" class="s75">322</a></p><p class="s73" style="padding-left: 35pt;text-indent: -12pt;text-align: left;">Lobby::Clear() <a href="#bookmark1090" class="s75">member function, </a><span class="s74">322</span><a href="#bookmark1092" class="s85">–</a><a href="#bookmark1092" class="s75">323</a></p><p class="s73" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">Lobby::RemovePlayer()</p><p style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1090" class="s75">member function, 322</a></p><p class="s73" style="padding-top: 5pt;padding-left: 22pt;text-indent: 0pt;text-align: left;">main() <a href="#bookmark1094" class="s75">function, </a><span class="s74">324</span><a href="#bookmark1096" class="s85">–</a><a href="#bookmark1096" class="s75">325</a></p><p class="s73" style="padding-left: 34pt;text-indent: -12pt;text-align: left;">operator() <a href="#bookmark1092" class="s75">member function, </a><span class="s74">323</span><a href="#bookmark1094" class="s85">–</a><a href="#bookmark1094" class="s75">324</a></p><p class="s73" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Player <a href="#bookmark1082" class="s75">class, </a><span class="s74">316</span><a href="#bookmark1084" class="s85">–</a><a href="#bookmark1084" class="s75">318</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark299" class="s69">game loop, </a>72<a href="#bookmark300" class="s79">–</a><a href="#bookmark310" class="s69">73, 77</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark84" class="s69">Game Over program, </a>5<a href="#bookmark87" class="s79">–</a><a href="#bookmark100" class="s69">6, </a>10<a href="#bookmark107" class="s79">–</a><a href="#bookmark107" class="s69">12</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark142" class="s69">Game Stats 2.0 program, </a>24<a href="#bookmark144" class="s79">–</a><a href="#bookmark144" class="s69">26</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark152" class="s69">Game Stats 3.0 program, </a>29<a href="#bookmark154" class="s79">–</a><a href="#bookmark120" class="s69">30 Game Stats program, </a>16<span class="s71">–</span><a href="#bookmark121" class="s69">1</a><a href="#bookmark82" class="s69">7 game testers, 4</a></p><p class="s68" style="padding-left: 22pt;text-indent: -11pt;text-align: left;"><a href="#bookmark290" class="s69">generating random numbers, </a>68<a href="#bookmark299" class="s79">–</a><a href="#bookmark299" class="s69">72</a></p><p class="s74" style="padding-left: 34pt;text-indent: -12pt;text-align: left;"><a href="#bookmark296" class="s75">calculating number within range, </a>71<a href="#bookmark299" class="s85">–</a><a href="#bookmark299" class="s75">72</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark290" class="s75">Die Roller program, </a>68<a href="#bookmark292" class="s85">–</a><a href="#bookmark292" class="s75">69</a></p><p class="s73" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">rand()<a href="#bookmark292" class="s75">function, </a><span class="s74">69</span><a href="#bookmark294" class="s85">–</a><a href="#bookmark294" class="s75">70</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s75">seeding, </a>70<a href="#bookmark296" class="s85">–</a><a href="#bookmark296" class="s75">71</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark229" class="s69">generic statement, 40</a></p><p class="s72" style="padding-left: 22pt;text-indent: -11pt;text-align: left;">GenericPlayer <a href="#bookmark1196" class="s69">class, BlackJack, </a><a href="#bookmark1197" class="s69">357, </a><a href="#bookmark1205" class="s69">359, </a><span class="s68">366</span><a href="#bookmark1207" class="s79">–</a><a href="#bookmark1207" class="s69">367</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">GetMood()<span class="s68">member function,</span></p><p class="s72" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">Critter <a href="#bookmark991" class="s69">class, 278</a></p><p class="s68" style="padding-left: 22pt;text-indent: -11pt;text-align: left;"><a href="#bookmark650" class="s69">Give Me a Number program, </a>171<a href="#bookmark651" class="s79">–</a><a href="#bookmark651" class="s69">172</a></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark647" class="s69">global constants, </a><a href="#bookmark682" class="s69">170, 184</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark636" class="s69">global variables, </a>166<a href="#bookmark647" class="s79">–</a><a href="#bookmark682" class="s69">170, 184</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark640" class="s75">accessing, 168</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">altering, 169</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark640" class="s75">declaring, 168</a></p><p class="s74" style="padding-left: 34pt;text-indent: -12pt;text-align: left;"><a href="#bookmark636" class="s75">Global Reach program, </a>166<a href="#bookmark640" class="s85">–</a><a href="#bookmark640" class="s75">168</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">hiding, </a><a href="#bookmark647" class="s75">169 minimizing use of, 170</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">goodSwap() <a href="#bookmark744" class="s69">header, </a><a href="#bookmark748" class="s69">192, </a><a href="#bookmark873" class="s69">194, </a><a href="#bookmark228" class="s69">237 greater than (&gt;) operator, 40</a><span class="s70">tbl </span><span class="s68">greater than or equal to (&gt;=)</span></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark228" class="s69">operator, 40</a><a href="#bookmark228" class="s76">tbl</a></p><p class="s68" style="padding-left: 22pt;text-indent: -11pt;text-align: left;"><a href="#bookmark300" class="s69">Guess My Number game, </a>73<a href="#bookmark307" class="s79">–</a>76 <a href="#bookmark303" class="s75">applying game loop, </a><a href="#bookmark307" class="s75">74 creating, 76</a></p><p style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark307" class="s75">ending, 76</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark303" class="s75">setting up, </a>74<a href="#bookmark305" class="s85">–</a><a href="#bookmark305" class="s75">75</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="a412">H</a></p><p class="s72" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Hand <a href="#bookmark1196" class="s69">class, BlackJack, </a><a href="#bookmark1197" class="s69">357, </a><span class="s68">359,</span></p><p class="s68" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">363<a href="#bookmark1205" class="s79">–</a><a href="#bookmark1205" class="s69">366</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark533" class="s69">Hangman game, </a>141<a href="#bookmark545" class="s79">–</a><a href="#bookmark545" class="s69">145</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark545" class="s75">ending, 145</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark539" class="s75">entering main loop, </a>143<a href="#bookmark542" class="s85">–</a>144 getting player&#39;s guess,</p><p class="s74" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;">144<a href="#bookmark545" class="s85">–</a><a href="#bookmark545" class="s75">145</a></p><p style="padding-left: 34pt;text-indent: -12pt;text-align: left;"><a href="#bookmark539" class="s75">initializing variables and constants, 143</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark533" class="s75">planning, </a>141<a href="#bookmark536" class="s85">–</a><a href="#bookmark536" class="s75">142</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark536" class="s75">setting up, 142</a></p><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">404 Index</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1042" class="s69">has-a relationships, 290</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s69">header ﬁle, </a>8 heap</p><p class="s74" style="padding-left: 64pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1066" class="s75">data members and, </a>303<a href="#bookmark1080" class="s85">–</a>315 declaring and deﬁning copy</p><p class="s74" style="padding-left: 64pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1074" class="s75">constructors, </a>309<a href="#bookmark1078" class="s85">–</a>313 declaring and deﬁning</p><p class="s74" style="padding-left: 64pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1071" class="s75">destructors, </a>308<a href="#bookmark1074" class="s85">–</a>309 declaring to values on heap,</p><p class="s74" style="padding-left: 76pt;text-indent: 0pt;line-height: 10pt;text-align: left;">307<a href="#bookmark1071" class="s85">–</a><a href="#bookmark1071" class="s75">308</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1066" class="s75">Heap Data Member program, </a>303<a href="#bookmark1069" class="s85">–</a><a href="#bookmark1069" class="s75">307</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1078" class="s75">overloading assignment operator, </a>313<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1054" class="s75" name="bookmark1261">memory, </a><a href="#bookmark1096" class="s75">296, 325</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1066" class="s69">Heap Data Member program, </a>303<a href="#bookmark1069" class="s79">–</a><a href="#bookmark1069" class="s69">307</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1058" class="s69">Heap program, </a>297<a href="#bookmark1060" class="s79">–</a>299 Hero&#39;s Inventory program,</p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">96<a href="#bookmark389" class="s79">–</a><a href="#bookmark389" class="s69">98</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark477" class="s75">version 2.0, </a>117<a href="#bookmark479" class="s85">–</a><a href="#bookmark479" class="s75">119</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark494" class="s75">version 3.0, </a>123<a href="#bookmark495" class="s85">–</a><a href="#bookmark495" class="s75">125</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">hide_global() <a href="#bookmark643" class="s69">function, </a><span class="s68">169 hiding</span></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark643" class="s75">global variables, 169</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark685" class="s75">variables, 185</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">high <span class="s68">parameter, </span>askNumber()</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark653" class="s69">function, 173</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark508" class="s69">High Scores program, </a>131<a href="#bookmark510" class="s79">–</a><a href="#bookmark510" class="s69">133</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">House <a href="#bookmark1196" class="s69">class, BlackJack, </a><a href="#bookmark1198" class="s69">357, </a><span class="s68">360,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">369<a href="#bookmark1212" class="s79">–</a><a href="#bookmark1212" class="s69">370</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">House m_House <span class="s68">member,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Game </span><a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">humanMove()<span class="s68">function,</span></p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark793" class="s69">Tic-Tac-Toe game, 213</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">humanPiece()<a href="#bookmark783" class="s69">function, Tic-Tac-Toe game, </a><span class="s68">209</span><a href="#bookmark786" class="s79">–</a><a href="#bookmark786" class="s69">210</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a413">I</a></p><p class="s68" style="padding-top: 1pt;padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark80" class="s69">IDE (Integrated Development Environment), </a>3<a href="#bookmark82" class="s79">–</a><a href="#bookmark82" class="s69">4</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark130" class="s69">identiﬁer, </a><a href="#bookmark156" class="s69">20, 31</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">if <a href="#bookmark226" class="s69">statements, </a><span class="s68">39</span><a href="#bookmark240" class="s79">–</a><a href="#bookmark240" class="s69">45</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark636" class="s75">deﬁning variables inside, </a>166 with <span class="s73">else </span><a href="#bookmark247" class="s75">clauses, </a>48<a href="#bookmark253" class="s85">–</a><a href="#bookmark253" class="s75">51</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><a href="#bookmark250" class="s75">creating sequence of, </a>50<a href="#bookmark253" class="s85">–</a>51 Score Rater 3.0 program,</p><p class="s74" style="padding-left: 76pt;text-indent: 0pt;line-height: 10pt;text-align: left;">49<a href="#bookmark250" class="s85">–</a><a href="#bookmark250" class="s75">50</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark238" class="s75">nesting, </a>44<a href="#bookmark240" class="s85">–</a><a href="#bookmark240" class="s75">45</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark238" class="s75">relational operators, </a><a href="#bookmark232" class="s75">44 Score Rater program, </a>41<a href="#bookmark233" class="s85">–</a>42 <span class="s73">true </span>and <span class="s73">false </span>values</p><p style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark235" class="s75">interpreting, 43</a></p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;text-align: left;"><a href="#bookmark233" class="s75">testing, </a>42<a href="#bookmark235" class="s85">–</a><a href="#bookmark235" class="s75">43</a></p><p class="s68" style="padding-top: 3pt;padding-left: 24pt;text-indent: -12pt;text-align: left;">increment operator (<span class="s77">þþ</span><a href="#bookmark148" class="s69">), </a>27<a href="#bookmark149" class="s79">–</a><a href="#bookmark149" class="s69">28</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">indexing</p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark391" class="s75">arrays, 99</a><a href="#bookmark393" class="s85">–</a>100 multidimensional arrays,</p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">105<a href="#bookmark406" class="s85">–</a><a href="#bookmark406" class="s75">106</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">string <a href="#bookmark378" class="s75">objects, 93</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark485" class="s75">vectors, 121</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark268" class="s69">inﬁnite loop, </a><a href="#bookmark312" class="s69">58, </a>78<a href="#bookmark313" class="s79">–</a><a href="#bookmark313" class="s69">79</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1145" class="s69">inheritance, </a>331<a href="#bookmark1177" class="s79">–</a><a href="#bookmark1194" class="s69">346, </a>356<a href="#bookmark1224" class="s79">–</a><a href="#bookmark1224" class="s69">380</a></p><p class="s74" style="padding-left: 36pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1163" class="s75">base class member functions, </a>340<a href="#bookmark1177" class="s85">–</a><a href="#bookmark1177" class="s75">346</a></p><p class="s74" style="text-indent: 0pt;text-align: right;"><a href="#bookmark1175" class="s75">calling, </a>345<a href="#bookmark1177" class="s85">–</a>346 calling base class constructors,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">343<a href="#bookmark1172" class="s85">–</a><a href="#bookmark1172" class="s75">344</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1172" class="s75">declaring virtual, </a>344 Overriding Boss program,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">341<a href="#bookmark1168" class="s85">–</a><a href="#bookmark1168" class="s75">343</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1172" class="s75">overriding virtual, </a>344<a href="#bookmark1175" class="s85">–</a><a href="#bookmark1175" class="s75">345</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s75">Blackjack game, </a>356<a href="#bookmark1222" class="s85">–</a><a href="#bookmark1222" class="s75">379</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Card <a href="#bookmark1200" class="s75">class, </a><span class="s74">361</span><a href="#bookmark1202" class="s85">–</a><a href="#bookmark1202" class="s75">363</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Deck <a href="#bookmark1212" class="s75">class, </a><span class="s74">370</span><a href="#bookmark1215" class="s85">–</a><a href="#bookmark1215" class="s75">373</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s75">designing classes, </a>356<a href="#bookmark1198" class="s85">–</a><a href="#bookmark1198" class="s75">360</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Game <a href="#bookmark1215" class="s75">class, </a><span class="s74">373</span><a href="#bookmark1217" class="s85">–</a><a href="#bookmark1217" class="s75">376</a></p><p class="s73" style="padding-left: 47pt;text-indent: -12pt;text-align: left;">GenericPlayer <a href="#bookmark1205" class="s75">class, </a><span class="s74">366</span><a href="#bookmark1207" class="s85">–</a><a href="#bookmark1207" class="s75">367</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Hand <a href="#bookmark1202" class="s75">class, </a><span class="s74">363</span><a href="#bookmark1205" class="s85">–</a><a href="#bookmark1205" class="s75">366</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">House <a href="#bookmark1210" class="s75">class, </a><span class="s74">369</span><a href="#bookmark1212" class="s85">–</a><a href="#bookmark1212" class="s75">370</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span class="s73">main() </span><a href="#bookmark1217" class="s75">function, </a>376<a href="#bookmark1219" class="s85">–</a>377 overloading the</p><p class="s73" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">operator()</p><p class="s74" style="padding-left: 35pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1219" class="s75">function, </a>377<a href="#bookmark1222" class="s85">–</a>379 planning game logic,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">360<a href="#bookmark1200" class="s85">–</a><a href="#bookmark1200" class="s75">361</a></p><p class="s74" style="padding-left: 24pt;text-indent: 11pt;text-align: left;"><span class="s73">Player </span><a href="#bookmark1209" class="s75">class, </a>368<a href="#bookmark1210" class="s85">–</a>369 controlling access under,</p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">337<a href="#bookmark1163" class="s85">–</a><a href="#bookmark1163" class="s75">340</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1160" class="s75">access modiﬁers, </a>339<a href="#bookmark1164" class="s85">–</a>340 Simple Boss 2.0 program,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">338<a href="#bookmark1159" class="s85">–</a><a href="#bookmark1159" class="s75">339</a></p><p class="s74" style="padding-left: 36pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1150" class="s75">deriving from base classes, </a>335<a href="#bookmark1152" class="s85">–</a><a href="#bookmark1152" class="s75">336</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1155" class="s75">inherited members, </a>337 instantiating objects from</p><p class="s74" style="padding-left: 24pt;text-indent: 11pt;text-align: left;"><a href="#bookmark1152" class="s75">derived classes, </a>336<a href="#bookmark1155" class="s85">–</a>337 overloaded assignment</p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1177" class="s75">operators and copy constructors, </a>346<a href="#bookmark1180" class="s85">–</a><a href="#bookmark1180" class="s75">347</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1149" class="s75">Simple Boss program, </a>333<a href="#bookmark1150" class="s85">–</a><a href="#bookmark1150" class="s75">335</a></p><p class="s72" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">initialization <span class="s68">statement, </span>for</p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark359" class="s69">loop, 82</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark391" class="s69">initializer list, </a>99 initializing</p><p style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark862" class="s75">constant pointer, 231</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark850" class="s75">pointers, </a><a href="#bookmark901" class="s75">227, 250</a></p><p style="padding-top: 4pt;padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark737" class="s75">references, 189</a></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark975" class="s75">static data members, </a><a href="#bookmark135" class="s75">272 variables, 22</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark665" class="s69">inlining functions, </a>177<a href="#bookmark672" class="s79">–</a><a href="#bookmark967" class="s69">180, </a>268,</p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark997" class="s69">282</a></p><p class="s74" style="padding-left: 37pt;text-indent: -11pt;text-align: left;"><a href="#bookmark669" class="s75">calling inlined functions, </a>179<a href="#bookmark672" class="s85">–</a><a href="#bookmark672" class="s75">180</a></p><p class="s74" style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark669" class="s75">specifying functions for, </a>179 Taking Damage program,</p><p class="s74" style="padding-left: 37pt;text-indent: 0pt;line-height: 10pt;text-align: left;">177<a href="#bookmark669" class="s85">–</a><a href="#bookmark669" class="s75">179</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark365" class="s69">inner loop, </a>86<a href="#bookmark367" class="s79">–</a><a href="#bookmark367" class="s69">87</a></p><p class="s72" style="padding-left: 25pt;text-indent: -12pt;text-align: left;">insert()<a href="#bookmark505" class="s69">vector member function, 130</a></p><p style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark948" class="s69">instances, class, 259</a></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s69">instantiating objects, </a><a href="#bookmark958" class="s69">259, 263</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">instructions() <span class="s68">function</span></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark611" class="s75">Mad Lib game, </a><a href="#bookmark780" class="s75">154 Tic-Tac-Toe game, 208</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark607" class="s69">Instructions program, </a>152<a href="#bookmark609" class="s79">–</a><a href="#bookmark609" class="s69">153</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">int <a href="#bookmark124" class="s69">type, </a><a href="#bookmark127" class="s69">18, 19</a><a href="#bookmark127" class="s76">tbl</a><a href="#bookmark421" class="s69">, 112</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">int <a href="#bookmark660" class="s69">argument, 175</a></p><p class="s72" style="padding-left: 25pt;text-indent: -12pt;text-align: left;">int GetTotal() const <span class="s68">member,</span></p><p class="s68" style="padding-left: 25pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Hand </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">int GetValue() <span class="s68">member,</span></p><p class="s68" style="padding-left: 13pt;text-indent: 11pt;text-align: left;">BlackJack <span class="s72">Card </span><a href="#bookmark1197" class="s69">class, </a><a href="#bookmark113" class="s69">359 integer division, </a>14<span class="s71">–</span><a href="#bookmark116" class="s69">15</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark133" class="s69">integer variables, </a><a href="#bookmark144" class="s69">21 integer wrap around, </a>26,</p><p class="s68" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">28<a href="#bookmark152" class="s79">–</a><a href="#bookmark152" class="s69">29</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s69">integers, </a><a href="#bookmark312" class="s69">14, </a>78 Integrated Development</p><p class="s68" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark80" class="s69">Environment (IDE), </a>3<a href="#bookmark82" class="s79">–</a><a href="#bookmark82" class="s69">4</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">intOnHeap() <a href="#bookmark1061" class="s69">function, </a><span class="s68">300 Inventory Displayer program,</span></p><p class="s68" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">195<a href="#bookmark752" class="s79">–</a><a href="#bookmark752" class="s69">196</a></p><p class="s68" style="padding-left: 25pt;text-indent: -12pt;text-align: left;"><a href="#bookmark877" class="s69">Inventory Pointer program, </a>239<a href="#bookmark878" class="s79">–</a><a href="#bookmark878" class="s69">240</a></p><p class="s72" style="padding-left: 13pt;text-indent: 0pt;text-align: left;">iostream <a href="#bookmark94" class="s69">ﬁle, </a><span class="s68">8</span><a href="#bookmark97" class="s79">–</a><a href="#bookmark168" class="s69">9, 36</a></p><p class="s72" style="padding-left: 25pt;text-indent: -12pt;text-align: left;">isLegal()<a href="#bookmark790" class="s69">function, Tic-Tac-Toe game, </a><span class="s68">212</span><a href="#bookmark793" class="s79">–</a><a href="#bookmark793" class="s69">213</a></p><p style="padding-left: 13pt;text-indent: 0pt;text-align: left;"><a href="#bookmark84" class="s69">ISO standard, 5</a></p><p class="s68" style="padding-left: 25pt;text-indent: -12pt;text-align: left;">iterating through <span class="s72">string </span><a href="#bookmark378" class="s69">objects, </a>93<a href="#bookmark381" class="s79">–</a><a href="#bookmark381" class="s69">94</a></p><p class="s68" style="padding-left: 13pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark494" class="s69">iterators, </a>123<a href="#bookmark508" class="s79">–</a><a href="#bookmark508" class="s69">131</a></p><p class="s74" style="padding-left: 37pt;text-indent: -11pt;text-align: left;"><a href="#bookmark503" class="s75">accessing member functions of vector element, </a>129<a href="#bookmark505" class="s85">–</a><a href="#bookmark505" class="s75">130</a></p><p class="s74" style="padding-left: 37pt;text-indent: -11pt;text-align: left;"><a href="#bookmark500" class="s75">changing value of vector element, </a>128<a href="#bookmark503" class="s85">–</a><a href="#bookmark503" class="s75">129</a></p><p class="s74" style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark495" class="s75">declaring, </a>125<a href="#bookmark497" class="s85">–</a><a href="#bookmark497" class="s75">126</a></p><p style="padding-left: 25pt;text-indent: 0pt;text-align: left;"><a href="#bookmark474" class="s75">deﬁned, </a><a href="#bookmark548" class="s75">116, 146</a></p><p class="s73" style="padding-left: 37pt;text-indent: -11pt;text-align: left;">erase()<a href="#bookmark505" class="s75">vector member function, </a><span class="s74">130</span><a href="#bookmark508" class="s85">–</a><a href="#bookmark508" class="s75">131</a></p><p class="s74" style="padding-left: 37pt;text-indent: -11pt;text-align: left;"><a href="#bookmark494" class="s75">Hero&#39;s Inventory 3.0 program, </a>123<a href="#bookmark495" class="s85">–</a><a href="#bookmark495" class="s75">125</a></p><p class="s73" style="padding-left: 37pt;text-indent: -11pt;text-align: left;">insert()<a href="#bookmark505" class="s75">vector member function, 130</a></p><p class="s19" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark1262">Index 405</a><a name="bookmark1263">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-top: 5pt;padding-left: 64pt;text-indent: -11pt;text-align: left;"><a href="#bookmark497" class="s75">looping through vector, </a>126<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128 altering an iterator, </a>128 calling <span class="s73">begin()</span>vector</p><p class="s74" style="padding-left: 64pt;text-indent: 11pt;text-align: left;"><a href="#bookmark499" class="s75">member function, </a>127 calling <span class="s73">end()</span>vector</p><p class="s74" style="padding-left: 76pt;text-indent: 0pt;text-align: left;"><a href="#bookmark499" class="s75">member function, </a>127<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark500" class="s75">dereferencing an iterator, 128</a></p><p class="s73" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a name="bookmark1264">vector </a><a href="#bookmark550" class="s75">member functions and, 147</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a414">K</a></p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark130" class="s69" name="bookmark1265">keywords, </a><a href="#bookmark1243" class="s69">20, </a>391<a href="#bookmark1244" class="s79">–</a><a href="#bookmark1244" class="s69">392</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a415">L</a></p><p style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1184" class="s69">late binding, 351</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">length() </span><a href="#bookmark375" class="s69">member function, </a>92 less than (<span class="s78">&lt;</span><a href="#bookmark228" class="s69">) operator, 40</a><i>tbl </i>less than or equal to (<span class="s78">&lt;</span>=)</p><p class="s70" style="padding-left: 41pt;text-indent: 11pt;text-align: left;"><a href="#bookmark228" class="s69">operator, 40</a>tbl <a href="#bookmark82" class="s69">link errors, 4</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1084" class="s69">linked list, </a>318<a href="#bookmark1086" class="s79">–</a>319 <span class="s72">list </span><a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark171" class="s69">139 literals, 37</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">Lobby <a href="#bookmark1084" class="s69">class, Game Lobby program, </a><span class="s68">318</span><a href="#bookmark1088" class="s79">–</a><a href="#bookmark1088" class="s69">320</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">Lobby::AddPlayer() <a href="#bookmark1088" class="s69">member function, Game Lobby program, </a><span class="s68">320</span><a href="#bookmark1090" class="s79">–</a><a href="#bookmark1090" class="s69">322</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: justify;">Lobby::Clear() <a href="#bookmark1090" class="s69">member function, Game Lobby program, </a><span class="s68">322</span><a href="#bookmark1092" class="s79">–</a><a href="#bookmark1092" class="s69">323</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">Lobby::RemovePlayer() <a href="#bookmark1090" class="s69">member function, Game Lobby program, 322</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark629" class="s69">local variables, </a><a href="#bookmark685" class="s69">163, 185</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark82" class="s69">logical errors, 4</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark278" class="s69">logical operators, </a>61<a href="#bookmark290" class="s79">–</a><a href="#bookmark290" class="s69">68</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark281" class="s75">Designers Network Program, </a>62<a href="#bookmark283" class="s85">–</a><a href="#bookmark283" class="s75">65</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark285" class="s75">NOT operator, </a>66<a href="#bookmark287" class="s85">–</a><a href="#bookmark287" class="s75">67</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark283" class="s75">AND operator, 65</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark285" class="s75">OR operator, 66</a></p><p class="s74" style="padding-left: 41pt;text-indent: 11pt;text-align: left;"><a href="#bookmark287" class="s75">order of operations, </a>67<a href="#bookmark290" class="s85">–</a>68 <span class="s72">long double </span><a href="#bookmark127" class="s69">type, 19</a><i><b>tbl </b></i><span class="s72">long int </span><a href="#bookmark127" class="s69">type, 19</a><a href="#bookmark127" class="s76">tbl</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">long <a href="#bookmark124" class="s69">modiﬁer, 18</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark264" class="s69">loop body, </a>56 looping</p><p class="s73" style="padding-left: 64pt;text-indent: -11pt;text-align: left;">break <a href="#bookmark273" class="s75">statement exiting loop, 60</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark268" class="s75">Finicky Counter program, </a>58<a href="#bookmark273" class="s85">–</a><a href="#bookmark273" class="s75">60</a></p><p style="padding-top: 5pt;padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark278" class="s75">understanding when to use, 61</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">while (true) <a href="#bookmark273" class="s75">loop, 60</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">continue <span class="s74">statement</span></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark268" class="s75">Finicky Counter program, </a>58<a href="#bookmark273" class="s85">–</a><a href="#bookmark273" class="s75">60</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark278" class="s75">jumping back to top of loop, 61</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark278" class="s75">understanding when to use, 61</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">while (true) <a href="#bookmark273" class="s75">loop, 60</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">do <a href="#bookmark264" class="s75">loops, </a><span class="s74">56</span><a href="#bookmark268" class="s85">–</a><a href="#bookmark268" class="s75">58</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark266" class="s75">overview, </a>57<a href="#bookmark268" class="s85">–</a><a href="#bookmark268" class="s75">58</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark264" class="s75">Play Again 2.0 program, </a>56<a href="#bookmark266" class="s85">–</a><a href="#bookmark266" class="s75">57</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark497" class="s75">iterators through vector, </a>126<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark500" class="s75">altering an iterator, </a>128 calling <span class="s73">begin()</span>vector</p><p class="s74" style="padding-left: 33pt;text-indent: 11pt;text-align: left;"><a href="#bookmark499" class="s75">member function, </a>127 calling <span class="s73">end()</span>vector</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;text-align: left;"><a href="#bookmark499" class="s75">member function, </a>127<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark500" class="s75">dereferencing an iterator, 128</a></p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark278" class="s75">logical operators, </a>61<a href="#bookmark290" class="s85">–</a>68 Designers Network</p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;"><a href="#bookmark281" class="s75">Program, </a>62<a href="#bookmark283" class="s85">–</a><a href="#bookmark283" class="s75">65</a></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark285" class="s75">NOT  operator, </a>66<a href="#bookmark287" class="s85">–</a><a href="#bookmark287" class="s75">67</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark283" class="s75">AND operator, 65</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark285" class="s75">OR operator, 66</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark287" class="s75">order of operations, </a>67<a href="#bookmark290" class="s85">–</a><a href="#bookmark290" class="s75">68</a></p><p class="s73" style="text-indent: 0pt;text-align: right;">while <a href="#bookmark259" class="s75">loops, </a><span class="s74">54</span><a href="#bookmark264" class="s85">–</a><a href="#bookmark264" class="s75">56</a></p><p class="s74" style="text-indent: 0pt;text-align: right;"><a href="#bookmark261" class="s75">overview, </a>55<a href="#bookmark264" class="s85">–</a><a href="#bookmark264" class="s75">56</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark259" class="s75">Play Again program, </a>54<a href="#bookmark261" class="s85">–</a><a href="#bookmark261" class="s75">55</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark158" class="s69">Lost Fortune game, </a>32<a href="#bookmark165" class="s79">–</a><a href="#bookmark165" class="s69">35</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark161" class="s75">getting information from player, </a>33<a href="#bookmark163" class="s85">–</a><a href="#bookmark163" class="s75">34</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark158" class="s75">setting up, </a>32<a href="#bookmark161" class="s85">–</a><a href="#bookmark161" class="s75">33</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark163" class="s75">telling story, </a>34<a href="#bookmark165" class="s85">–</a><a href="#bookmark165" class="s75">35</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">low <span class="s68">parameter, </span>askNumber()</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark653" class="s69">function, 173</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a416">M</a></p><p class="s68" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark672" class="s69">Mad Lib game, </a>180<a href="#bookmark680" class="s79">–</a><a href="#bookmark680" class="s69">183</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">askNumber()<a href="#bookmark677" class="s75">function, 182</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">askText()<a href="#bookmark677" class="s75">function, 182</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">main()<a href="#bookmark674" class="s75">function, </a><span class="s74">181</span><a href="#bookmark677" class="s85">–</a><a href="#bookmark677" class="s75">182</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark674" class="s75">setting up, 181</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">tellStory()<a href="#bookmark680" class="s75">function, 183</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: justify;">main() <a href="#bookmark94" class="s69">function, </a><a href="#bookmark674" class="s69">8, </a><span class="s68">181</span><a href="#bookmark677" class="s79">–</a><a href="#bookmark677" class="s69">182</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark1217" class="s75">Blackjack game, </a>376<a href="#bookmark1219" class="s85">–</a><a href="#bookmark372" class="s75">377 creating string objects, </a>91 Critter Caretaker game,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">280<a href="#bookmark995" class="s85">–</a><a href="#bookmark995" class="s75">281</a></p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark479" class="s75">declaring vectors, 119</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark166" class="s75">deﬁned, 35</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1094" class="s75">Game Lobby program, </a>324<a href="#bookmark1096" class="s85">–</a><a href="#bookmark1096" class="s75">325</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark539" class="s75">initializing variables and constants, 143</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark261" class="s75">looping, 55</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark100" class="s75">returning value from, </a><a href="#bookmark778" class="s75">10 Tic-Tac-Toe game, </a>207<a href="#bookmark780" class="s85">–</a><a href="#bookmark780" class="s75">208</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">map <a href="#bookmark526" class="s69">STL container, </a><span class="s68">139 member access levels, class,</span></p><p class="s68" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;">264<a href="#bookmark969" class="s79">–</a><a href="#bookmark969" class="s69">269</a></p><p class="s74" style="padding-left: 21pt;text-indent: -1pt;text-align: center;"><a href="#bookmark965" class="s75">deﬁning accessor member functions, </a>267<a href="#bookmark967" class="s85">–</a><a href="#bookmark967" class="s75">268 deﬁning constant member functions, </a>268<a href="#bookmark969" class="s85">–</a><a href="#bookmark969" class="s75">269</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark965" class="s75">private, 267</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark962" class="s75">Private Critter program, </a>264<a href="#bookmark963" class="s85">–</a><a href="#bookmark963" class="s75">266</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark963" class="s75">public, 266</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark859" class="s69">member access operator, </a><a href="#bookmark367" class="s69">230 member functions, </a><a href="#bookmark416" class="s69">87, 110</a></p><p class="s81" style="padding-left: 12pt;text-indent: 0pt;line-height: 87%;text-align: center;">See also names of speci<span class="s57">ﬁ</span>c member  functions</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark952" class="s75">calling, 260</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s75">declaring, 258</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark945" class="s75">deﬁning, </a>258<a href="#bookmark949" class="s85">–</a><a href="#bookmark998" class="s75">259, 282</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark997" class="s75">inlining, 282</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark958" class="s69">member initializers, </a><a href="#bookmark997" class="s69">263, </a><a href="#bookmark368" class="s69">282 member selection operator (.), </a>88,</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s69">259</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1074" class="s69">member-wise copying, </a><a href="#bookmark1099" class="s69">309, 326</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark142" class="s69">memory, </a><a href="#bookmark844" class="s69">24, </a><a href="#bookmark895" class="s69">224, 248</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1063" class="s69">memory leak, </a>301<a href="#bookmark1066" class="s79">–</a><a href="#bookmark1099" class="s69">303, </a>326 Menu Chooser program,</p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">52<a href="#bookmark256" class="s79">–</a><a href="#bookmark256" class="s69">53</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark124" class="s69">modiﬁers, type, </a>18<a href="#bookmark128" class="s79">–</a><a href="#bookmark128" class="s69">19</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark116" class="s69">modulus operator (%), </a><a href="#bookmark299" class="s69">15, </a>72 multidimensional arrays,</p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">103<a href="#bookmark406" class="s79">–</a><a href="#bookmark419" class="s69">106, 111</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark403" class="s75">creating, 105</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark403" class="s75">indexing, </a>105<a href="#bookmark406" class="s85">–</a><a href="#bookmark406" class="s75">106</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark401" class="s75">Tic-Tac-Toe Board program, </a>103<a href="#bookmark403" class="s85">–</a><a href="#bookmark403" class="s75">105</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">multimap <a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark1224" class="s69">139 multiple inheritance, </a><a href="#bookmark113" class="s69">380 multiplication (*) operator, </a><span class="s68">14 </span>multiset <a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark1002" class="s69">139 mutable data members, 284</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="a417">N</a></p><p class="s68" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark97" class="s69">namespace, </a>9. <i>See also </i><span class="s72">std</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">namespace</p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark944" class="s69">naming convention, 258</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark130" class="s69">naming variables, </a>20<a href="#bookmark133" class="s79">–</a><a href="#bookmark133" class="s69">21</a></p><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1266">406 Index</a><a name="bookmark1267">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark633" class="s69">nested scopes, </a>165<a href="#bookmark636" class="s79">–</a><a href="#bookmark685" class="s69">166, </a>185 nesting</p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;">if <a href="#bookmark238" class="s75">statements, </a><span class="s74">44</span><a href="#bookmark240" class="s85">–</a><a href="#bookmark240" class="s75">45</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">for <a href="#bookmark365" class="s75">loops, </a><span class="s74">86</span><a href="#bookmark367" class="s85">–</a><a href="#bookmark367" class="s75">87</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><span class="s72">new </span><a href="#bookmark1060" class="s69">operator, </a>299<a href="#bookmark1061" class="s79">–</a><a href="#bookmark1096" class="s69">300, </a><a href="#bookmark1233" class="s69">325 New Project dialog box, 384ﬁ</a>g newline (<span class="s72">\nl</span><a href="#bookmark138" class="s69">), 23</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">\nl <a href="#bookmark138" class="s69">(newline), </a><a href="#bookmark1086" class="s69">23 nodes, linked list, 319</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark802" class="s69">non-constant reference, </a>219 non-inlined function,</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark669" class="s69">calling, 179</a></p><p style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1172" class="s69">non-virtual member functions, overriding, </a><a href="#bookmark1184" class="s69">344, 351</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark235" class="s69">non-zero value, </a><a href="#bookmark310" class="s69">43, 77</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark277" class="s69">NOT (!) operator, 61</a><a href="#bookmark277" class="s76">tbl</a><a href="#bookmark285" class="s69">, </a>66<a href="#bookmark287" class="s79">–</a><a href="#bookmark310" class="s69">67, </a><a href="#bookmark228" class="s69">77 not equal to (!=) operator, 40</a><i>tbl </i><a href="#bookmark396" class="s69">null character, 101</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark850" class="s69">null pointers, </a>227<a href="#bookmark853" class="s79">–</a>228,</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark902" class="s69">249, 251</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a418">O</a></p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1042" class="s69">object data members, </a>290<a href="#bookmark1044" class="s79">–</a><a href="#bookmark78" class="s69">291 object ﬁle, 2</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">object-oriented programming. <i>See</i></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">OOP</p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">objects</p><p class="s70" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">See also <span class="s73">string </span><span class="s74">objects altering through returning</span></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;"><a href="#bookmark885" class="s75">pointers, </a>243<a href="#bookmark888" class="s85">–</a><a href="#bookmark888" class="s75">244</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1001" class="s75">deﬁned, 283</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark948" class="s75">instatiating, 259</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark367" class="s75">overview, </a>87<a href="#bookmark370" class="s85">–</a><a href="#bookmark370" class="s75">89</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark78" class="s69">OOP (object-oriented programming), </a><a href="#bookmark938" class="s69">2, </a>255,</p><p style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1000" class="s69">281, 283</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1145" class="s75">inheritance, </a>331<a href="#bookmark1149" class="s85">–</a><a href="#bookmark1149" class="s75">333</a></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark1180" class="s75">polymorphism, 347</a></p><p class="s68" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark375" class="s69">operator  overloading, </a>92,</p><p class="s68" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">112<a href="#bookmark422" class="s79">–</a><a href="#bookmark1051" class="s69">113,  </a>295<a href="#bookmark1054" class="s79">–</a><a href="#bookmark1096" class="s69">296, 325</a></p><p class="s68" style="padding-left: 41pt;text-indent: -2pt;text-align: center;"><a href="#bookmark1239" class="s69">operator precedence, </a>389<a href="#bookmark1240" class="s79">–</a>390  <span class="s72">operator() </span>member function <a href="#bookmark1219" class="s75">Blackjack game, </a><span class="s74">377</span><a href="#bookmark1222" class="s85">–</a><a href="#bookmark1222" class="s75">379</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1092" class="s75">Game Lobby program, </a>323<a href="#bookmark1094" class="s85">–</a><a href="#bookmark1094" class="s75">324</a></p><p class="s70" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span class="s68">operators. </span>See speci<span class="s71">ﬁ</span>c operators</p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">opponent()<a href="#bookmark786" class="s69">function, Tic-Tac-Toe game, 210</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark277" class="s69">OR (||) operator, 61</a><a href="#bookmark277" class="s76">tbl</a><a href="#bookmark285" class="s69">, </a>66 order of operations</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark116" class="s75">arithmetic operators, 15</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark287" class="s75">logical operators, </a>67<a href="#bookmark290" class="s85">–</a><a href="#bookmark290" class="s75">68</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark365" class="s69">outer loop, </a>86<a href="#bookmark367" class="s79">–</a>87 out-of-scope</p><p style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark764" class="s75">objects, </a><a href="#bookmark880" class="s75">201, 241</a></p><p class="s74" style="padding-left: 10pt;text-indent: 11pt;text-align: left;"><a href="#bookmark631" class="s75">variables, </a><a href="#bookmark685" class="s75">164, </a>185 <a href="#bookmark97" class="s69">output operator (), </a><a href="#bookmark94" class="s69">9 output stream, </a><b>8 overloading</b></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1078" class="s75">assignment operator, </a>313<a href="#bookmark1080" class="s85">–</a><a href="#bookmark1080" class="s75">315</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s75">functions, </a>174<a href="#bookmark665" class="s85">–</a><a href="#bookmark665" class="s75">177</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark665" class="s75">calling, 177</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark662" class="s75">creating, 176</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s75">Triple program, </a>174<a href="#bookmark662" class="s85">–</a><a href="#bookmark662" class="s75">176</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark375" class="s75">operators, </a><a href="#bookmark421" class="s75">92, </a>112<a href="#bookmark422" class="s85">–</a>113,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">295<a href="#bookmark1055" class="s85">–</a><a href="#bookmark1097" class="s75">296, 325</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1175" class="s75">versus overriding, 345</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">overriding</p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1222" class="s75">base class member functions, 379</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s75">default arguments, 174</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1172" class="s75">non-virtual member function, </a><a href="#bookmark1184" class="s75">344, 351</a></p><p class="s68" style="padding-left: 21pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1167" class="s69">Overriding Boss program, </a>341<a href="#bookmark1168" class="s79">–</a><a href="#bookmark1168" class="s69">343</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a419">P</a></p><p class="s72" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">pAPointer <a href="#bookmark847" class="s69">pointer, 226</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark609" class="s69">parameters, 153</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark682" class="s75">versus arguments, </a>184 assigning default arguments,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">173<a href="#bookmark656" class="s85">–</a><a href="#bookmark656" class="s75">174</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark620" class="s75">functions, </a>158<a href="#bookmark624" class="s85">–</a><a href="#bookmark624" class="s75">160</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">parentheses</p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark503" class="s75">dereferencing iterators, 129</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark116" class="s75">order of operations, </a><a href="#bookmark287" class="s75">15, 67</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark867" class="s69">passing pointers, </a>234<a href="#bookmark874" class="s79">–</a><a href="#bookmark874" class="s69">238</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark873" class="s75">constant pointer, </a>237<a href="#bookmark874" class="s85">–</a>238 Swap Pointer Version program,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">234<a href="#bookmark870" class="s85">–</a><a href="#bookmark870" class="s75">236</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark870" class="s75">by value, </a>236<a href="#bookmark873" class="s85">–</a><a href="#bookmark873" class="s75">237</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">passing references</p><p class="s74" style="padding-left: 33pt;text-indent: -11pt;text-align: left;"><a href="#bookmark742" class="s75">to alter arguments, </a>191<a href="#bookmark748" class="s85">–</a><a href="#bookmark748" class="s75">194 passing by reference, </a><a href="#bookmark745" class="s75">194 passing by value, </a>193<a href="#bookmark748" class="s85">–</a><a href="#bookmark742" class="s75">194 Swap program, </a>191<a href="#bookmark745" class="s85">–</a><a href="#bookmark745" class="s75">193</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark755" class="s75">constant references, </a>197<a href="#bookmark758" class="s85">–</a>198 Inventory Displayer program,</p><p class="s74" style="padding-left: 32pt;text-indent: 0pt;line-height: 10pt;text-align: center;">195<a href="#bookmark752" class="s85">–</a><a href="#bookmark752" class="s75">196</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;text-align: center;"><a href="#bookmark752" class="s75">pitfalls, </a>196<a href="#bookmark755" class="s85">–</a><a href="#bookmark755" class="s75">197</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">PassTime() <span class="s68">member function,</span></p><p class="s72" style="padding-left: 9pt;text-indent: 11pt;text-align: left;">Critter <a href="#bookmark991" class="s69">class, </a><span class="s68">278 </span>Peek() <a href="#bookmark1051" class="s69">global function, </a><a href="#bookmark526" class="s69">295 planning programs, </a><span class="s68">139</span><a href="#bookmark533" class="s79">–</a><a href="#bookmark533" class="s69">141</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark526" class="s75">pseudocode, </a>139<a href="#bookmark529" class="s85">–</a><a href="#bookmark529" class="s75">140</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark530" class="s75">stepwise reﬁnement, </a>140<a href="#bookmark534" class="s85">–</a><a href="#bookmark534" class="s75">141</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark264" class="s69">Play Again 2.0 program, </a>56<a href="#bookmark266" class="s79">–</a><a href="#bookmark259" class="s69">57 Play Again program, </a>54<a href="#bookmark261" class="s79">–</a><a href="#bookmark261" class="s69">55</a></p><p class="s72" style="padding-top: 5pt;padding-left: 57pt;text-indent: 0pt;text-align: center;">Play() <span class="s68">member function,</span></p><p class="s72" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">Critter <a href="#bookmark993" class="s69">class, 280</a></p><p class="s72" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">Player <span class="s68">class</span></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1196" class="s75">BlackJack game, </a><a href="#bookmark1197" class="s75">357, </a>359,</p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">368<a href="#bookmark1210" class="s85">–</a><a href="#bookmark1210" class="s75">369</a></p><p class="s74" style="padding-left: 35pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1082" class="s75">Game Lobby program, </a>316<a href="#bookmark1084" class="s85">–</a><a href="#bookmark1084" class="s75">318</a></p><p class="s68" style="padding-left: 11pt;text-indent: 0pt;text-align: left;"><a href="#bookmark841" class="s69">pointers, </a>223<a href="#bookmark901" class="s79">–</a><a href="#bookmark901" class="s69">250</a></p><p class="s74" style="padding-left: 35pt;text-indent: -11pt;text-align: left;"><a href="#bookmark888" class="s75">arrays and, </a>244<a href="#bookmark895" class="s85">–</a>248 Array Passer program,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">244<a href="#bookmark891" class="s85">–</a><a href="#bookmark891" class="s75">246</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark891" class="s75">constant pointer, </a>246<a href="#bookmark893" class="s85">–</a>247 passing and returning,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">247<a href="#bookmark895" class="s85">–</a><a href="#bookmark895" class="s75">248</a></p><p class="s74" style="padding-left: 35pt;text-indent: -11pt;text-align: left;"><a href="#bookmark850" class="s75">assigning addresses to, </a>227<a href="#bookmark853" class="s85">–</a><a href="#bookmark853" class="s75">228</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark862" class="s75">constants and, </a>231<a href="#bookmark867" class="s85">–</a><a href="#bookmark867" class="s75">234</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1063" class="s75">dangling, </a><a href="#bookmark1096" class="s75">301, 325</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark847" class="s75">declaring, </a>226<a href="#bookmark850" class="s85">–</a><a href="#bookmark1069" class="s75">227 declaring data member, </a><a href="#bookmark896" class="s75">307 deﬁned, 248</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark853" class="s75">dereferencing, </a>228<a href="#bookmark856" class="s85">–</a><a href="#bookmark856" class="s75">229</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark850" class="s75">initializing, 227</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark867" class="s75">passing, </a>234<a href="#bookmark874" class="s85">–</a><a href="#bookmark874" class="s75">238</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark873" class="s75">constant pointer, </a>237<a href="#bookmark874" class="s85">–</a>238 Swap Pointer Version</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark867" class="s75">program, </a>234<a href="#bookmark870" class="s85">–</a><a href="#bookmark870" class="s75">236</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark870" class="s75">by value, </a>236<a href="#bookmark873" class="s85">–</a><a href="#bookmark873" class="s75">237</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark844" class="s75">Pointing program, </a>224<a href="#bookmark847" class="s85">–</a><a href="#bookmark847" class="s75">226</a></p><p style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark856" class="s75">reassigning, 229</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark874" class="s75">returning, </a>238<a href="#bookmark888" class="s85">–</a><a href="#bookmark888" class="s75">244</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark895" class="s75">Tic-Tac-Toe 2.0 game, </a><a href="#bookmark859" class="s75">248 using with objects, </a>230<a href="#bookmark862" class="s85">–</a><a href="#bookmark862" class="s75">231</a></p><p class="s68" style="padding-left: 11pt;text-indent: 0pt;text-align: left;"><a href="#bookmark844" class="s69">Pointing program, </a>224<a href="#bookmark847" class="s79">–</a>226 Polymorphic Bad Guy program,</p><p class="s68" style="padding-left: 23pt;text-indent: 0pt;line-height: 10pt;text-align: left;">347<a href="#bookmark1183" class="s79">–</a><a href="#bookmark1183" class="s69">350</a></p><p class="s68" style="padding-left: 11pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1180" class="s69">polymorphism, </a>347<a href="#bookmark1224" class="s79">–</a><a href="#bookmark1224" class="s69">380</a></p><p class="s74" style="padding-left: 35pt;text-indent: -11pt;text-align: left;"><a href="#bookmark1186" class="s75">abstract classes, </a>352<a href="#bookmark1194" class="s85">–</a>356 Abstract Creature program,</p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;">352<a href="#bookmark1189" class="s85">–</a><a href="#bookmark1189" class="s75">354</a></p><p class="s74" style="padding-left: 47pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1189" class="s75">declaring pure virtual functions, </a>354<a href="#bookmark1192" class="s85">–</a><a href="#bookmark1192" class="s75">355</a></p><p class="s74" style="padding-left: 47pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1192" class="s75">deriving classes from, </a>355<a href="#bookmark1194" class="s85">–</a><a href="#bookmark1194" class="s75">356</a></p><p class="s74" style="padding-left: 23pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s75">Blackjack game, </a>356<a href="#bookmark1222" class="s85">–</a><a href="#bookmark1222" class="s75">379</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Card <a href="#bookmark1200" class="s75">class, </a><span class="s74">361</span><a href="#bookmark1202" class="s85">–</a><a href="#bookmark1202" class="s75">363</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Deck <a href="#bookmark1212" class="s75">class, </a><span class="s74">370</span><a href="#bookmark1215" class="s85">–</a><a href="#bookmark1215" class="s75">373</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s75">designing classes, </a>356<a href="#bookmark1198" class="s85">–</a><a href="#bookmark1198" class="s75">360</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Game <a href="#bookmark1215" class="s75">class, </a><span class="s74">373</span><a href="#bookmark1217" class="s85">–</a><a href="#bookmark1217" class="s75">376</a></p><p class="s73" style="padding-left: 47pt;text-indent: -12pt;text-align: left;">GenericPlayer <a href="#bookmark1205" class="s75">class, </a><span class="s74">366</span><a href="#bookmark1207" class="s85">–</a><a href="#bookmark1207" class="s75">367</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Hand <a href="#bookmark1202" class="s75">class, </a><span class="s74">363</span><a href="#bookmark1205" class="s85">–</a><a href="#bookmark1205" class="s75">366</a></p><p class="s73" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">House <a href="#bookmark1210" class="s75">class, </a><span class="s74">369</span><a href="#bookmark1212" class="s85">–</a><a href="#bookmark1212" class="s75">370</a></p><p class="s74" style="padding-left: 35pt;text-indent: 0pt;text-align: left;"><span class="s73">main() </span><a href="#bookmark1217" class="s75">function, </a>376<a href="#bookmark1219" class="s85">–</a>377 overloading the <span class="s73">operator()</span></p><p class="s74" style="padding-left: 47pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1219" class="s75">function, </a>377<a href="#bookmark1222" class="s85">–</a><a href="#bookmark1222" class="s75">379</a></p><p class="s19" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark1268">Index 407</a><a name="bookmark1269">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1198" class="s75">planning game logic, </a>360<a href="#bookmark1200" class="s85">–</a><a href="#bookmark1200" class="s75">361</a></p><p class="s74" style="padding-left: 52pt;text-indent: 11pt;text-align: left;"><span class="s73">Player </span><a href="#bookmark1209" class="s75">class, </a>368<a href="#bookmark1210" class="s85">–</a>369 deﬁning virtual destructors,</p><p class="s74" style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;">351<a href="#bookmark1186" class="s85">–</a><a href="#bookmark1186" class="s75">352</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1180" class="s75">Polymorphic Bad Guy program, </a>347<a href="#bookmark1183" class="s85">–</a><a href="#bookmark1183" class="s75">350</a></p><p class="s74" style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1183" class="s75">using base class pointers to derived class objects, </a>350<a href="#bookmark1184" class="s85">–</a><a href="#bookmark1184" class="s75">351</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">pop_back() <span class="s68">member function</span></p><p style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark523" class="s75">adding or removing elements, 138</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark489" class="s75">vectors, 122</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark148" class="s69">postﬁx increment operator, </a>27<a href="#bookmark149" class="s79">–</a><a href="#bookmark116" class="s69">28 precedence level, operators, </a><a href="#bookmark422" class="s69">15 predicate function, 113</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark148" class="s69">preﬁx increment operator, </a>27<a href="#bookmark149" class="s79">–</a><a href="#bookmark688" class="s69">28 premature optimization, 186</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark89" class="s69">preprocessor, 7</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark551" class="s69">priority queue, 148</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">priority_queue <a href="#bookmark526" class="s69">STL container, 139</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark962" class="s69">Private Critter program, </a>264<a href="#bookmark963" class="s79">–</a><a href="#bookmark963" class="s69">266</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">private <a href="#bookmark965" class="s69">keyword, 267</a></p><p class="s72" style="padding-left: 52pt;text-indent: -11pt;text-align: left;">private <a href="#bookmark997" class="s69">members, </a><span class="s68">282 </span><a href="#bookmark965" class="s75">class access levels, </a><a href="#bookmark1164" class="s75">267 deﬁned, 340</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1000" class="s69">procedural programming, 283</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark672" class="s69">proﬁling code, 180</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark165" class="s69">program, deﬁned, 35</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">protected <a href="#bookmark1163" class="s69">members, </a><a href="#bookmark1222" class="s69">340, </a><span class="s68">379 prototypes, function</span></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark609" class="s75">overview, 153</a></p><p class="s74" style="padding-left: 41pt;text-indent: 11pt;text-align: left;"><a href="#bookmark622" class="s75">parameter names and, </a>159 <span class="s72">pScore </span><a href="#bookmark844" class="s69">pointer, </a><b>224 pseudocode</b></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark985" class="s75">Critter Caretaker game, </a><a href="#bookmark548" class="s75">276 deﬁned, 146</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark773" class="s75">Tic-Tac-Toe game, </a><a href="#bookmark551" class="s75">204 when to use, 148</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s69">pseudorandom number, </a><a href="#bookmark313" class="s69">70, 79</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">ptrToElement() <a href="#bookmark880" class="s69">function, </a><span class="s68">241</span><a href="#bookmark883" class="s79">–</a><a href="#bookmark883" class="s69">242</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1222" class="s69">public derivation, 379</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s69">public inheritance, 356</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">public <a href="#bookmark944" class="s69">keyword, </a><a href="#bookmark963" class="s69">258, 266</a></p><p class="s72" style="padding-left: 52pt;text-indent: -11pt;text-align: left;">public <a href="#bookmark997" class="s69">members, </a><span class="s68">282 </span><a href="#bookmark963" class="s75">class access levels, </a><a href="#bookmark1160" class="s75">266 deﬁned, 339</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark1224" class="s69">pure virtual function, 380</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">push_back() <a href="#bookmark1046" class="s69">member function, 292</a></p><p style="padding-left: 64pt;text-indent: -12pt;text-align: left;"><a href="#bookmark523" class="s75">adding or removing elements, 138</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark482" class="s75">vectors, 120</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1194" class="s69">pushing, BlackJack, 356</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark408" class="s69">puzzle games, 107</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a420">Q</a></p><p style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark551" class="s69">queue, 148</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">queue <a href="#bookmark526" class="s69">STL container, 139</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a421">R</a></p><p class="s68" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><span class="s72">rand()</span><a href="#bookmark292" class="s69">function, </a>69<span class="s71">–</span><a href="#bookmark294" class="s69">7</a>0 random numbers, generating,</p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">68<a href="#bookmark299" class="s79">–</a><a href="#bookmark299" class="s69">72</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark296" class="s75">calculating number within range, </a>71<a href="#bookmark299" class="s85">–</a><a href="#bookmark299" class="s75">72</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark290" class="s75">Die Roller program, </a>68<a href="#bookmark292" class="s85">–</a><a href="#bookmark292" class="s75">69</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">rand()<a href="#bookmark292" class="s75">function, </a><span class="s74">69</span><a href="#bookmark294" class="s85">–</a><a href="#bookmark294" class="s75">70</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark294" class="s75">seeding, </a>70<a href="#bookmark296" class="s85">–</a><a href="#bookmark296" class="s75">71</a></p><p class="s72" style="padding-left: 21pt;text-indent: -12pt;text-align: left;">random_shufﬂe() <a href="#bookmark513" class="s69">algorithm, </a><span class="s68">134</span><a href="#bookmark516" class="s79">–</a><a href="#bookmark539" class="s69">135, 143</a></p><p style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark550" class="s69">random-element access, 147</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">rank m_Rank <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">Card <a href="#bookmark1197" class="s69">class, 359</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark519" class="s69">reallocation, vector memory, </a><a href="#bookmark856" class="s69">136 reassigning pointers, 229</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark290" class="s69">redundant parentheses, </a>68 reference operator (&amp;),</p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark797" class="s69">189, 217</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark733" class="s69">references, </a>187<a href="#bookmark797" class="s79">–</a><a href="#bookmark797" class="s69">217</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark864" class="s75">versus constant pointers, </a><a href="#bookmark737" class="s75">232 creating, </a>189<a href="#bookmark739" class="s85">–</a><a href="#bookmark739" class="s75">190</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark758" class="s75">deciding how to pass arguments, 198</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark798" class="s75">deﬁned, </a>217 passing</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark742" class="s75">to alter arguments, </a>191<a href="#bookmark748" class="s85">–</a>194 constant references,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">197<a href="#bookmark758" class="s85">–</a><a href="#bookmark758" class="s75">198</a></p><p class="s74" style="padding-left: 45pt;text-indent: -12pt;text-align: left;"><a href="#bookmark751" class="s75">Inventory Displayer pro- gram, </a>195<a href="#bookmark752" class="s85">–</a><a href="#bookmark752" class="s75">196</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark752" class="s75">pitfalls, </a>196<a href="#bookmark755" class="s85">–</a><a href="#bookmark755" class="s75">197</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark898" class="s75">versus pointers, 249</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark733" class="s75">Referencing program, </a>187<a href="#bookmark737" class="s85">–</a><a href="#bookmark737" class="s75">189</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark758" class="s75">returning, </a>198<a href="#bookmark771" class="s85">–</a><a href="#bookmark771" class="s75">203</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark768" class="s75">altering object through, 202 assigning to reference, 202 assigning to variable, </a><a href="#bookmark764" class="s75">202 displaying value of, </a>201 Inventory Referencer</p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;"><a href="#bookmark761" class="s75">program, </a>199<a href="#bookmark762" class="s85">–</a><a href="#bookmark762" class="s75">200</a></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark762" class="s75">overview, </a>200<a href="#bookmark764" class="s85">–</a><a href="#bookmark764" class="s75">201</a></p><p class="s74" style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark771" class="s75">Tic-Tac-Toe game, </a>203<a href="#bookmark797" class="s85">–</a>217 <span class="s73">announceWinner()  </span><a href="#bookmark798" class="s75">function, 217</a></p><p class="s73" style="padding-left: 57pt;text-indent: 0pt;line-height: 10pt;text-align: center;">askNumber()<a href="#bookmark783" class="s75">function, 209</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">askYesNo()<a href="#bookmark780" class="s75">function, </a><span class="s74">208</span><a href="#bookmark783" class="s85">–</a><a href="#bookmark783" class="s75">209</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">computerMove()<a href="#bookmark793" class="s75">function, </a><span class="s74">213</span><a href="#bookmark795" class="s85">–</a><a href="#bookmark795" class="s75">216</a></p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark774" class="s75">creating list of functions, 205</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">displayBoard()<a href="#bookmark786" class="s75">function, </a><span class="s74">210</span><a href="#bookmark789" class="s85">–</a><a href="#bookmark789" class="s75">211</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">humanMove()<a href="#bookmark793" class="s75">function, 213</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">humanPiece()<a href="#bookmark783" class="s75">function, </a><span class="s74">209</span><a href="#bookmark786" class="s85">–</a><a href="#bookmark786" class="s75">210</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">instructions()<a href="#bookmark780" class="s75">function, 208</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">isLegal()<a href="#bookmark790" class="s75">function, </a><span class="s74">212</span><a href="#bookmark793" class="s85">–</a><a href="#bookmark793" class="s75">213</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">main()<a href="#bookmark778" class="s75">function, </a><span class="s74">207</span><a href="#bookmark780" class="s85">–</a><a href="#bookmark780" class="s75">208</a></p><p class="s73" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">opponent()<a href="#bookmark786" class="s75">function, 210</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark773" class="s75">pseudocode, 204</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark773" class="s75">representing data, </a>204<a href="#bookmark774" class="s85">–</a><a href="#bookmark774" class="s75">205</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark774" class="s75">setting up, </a>205<a href="#bookmark778" class="s85">–</a><a href="#bookmark778" class="s75">207</a></p><p class="s74" style="padding-left: 21pt;text-indent: 11pt;text-align: left;"><span class="s73">winner()</span><a href="#bookmark789" class="s75">function, </a>211<a href="#bookmark790" class="s85">–</a>212 values</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark739" class="s75">accessing, 190</a></p><p class="s74" style="padding-left: 9pt;text-indent: 0pt;text-align: center;"><a href="#bookmark739" class="s75">altering, </a>190<a href="#bookmark742" class="s85">–</a><a href="#bookmark742" class="s75">191</a></p><p class="s68" style="padding-left: 14pt;text-indent: 0pt;text-align: center;"><a href="#bookmark733" class="s69">Referencing  program, </a>187<a href="#bookmark737" class="s79">–</a><a href="#bookmark737" class="s69">189</a></p><p class="s72" style="padding-left: 21pt;text-indent: -11pt;text-align: left;">refToElement() <a href="#bookmark762" class="s69">function header, </a><span class="s68">200</span><a href="#bookmark764" class="s79">–</a><a href="#bookmark878" class="s69">201, 240</a></p><p style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark228" class="s69">relational operators, 40</a><a href="#bookmark228" class="s76">tbl</a><a href="#bookmark238" class="s69">, 44</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">reserve()<a href="#bookmark521" class="s69">member function, 137</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark885" class="s69">restricting pointers, </a><a href="#bookmark902" class="s69">243, 251</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">return <a href="#bookmark250" class="s69">statement, </a><a href="#bookmark620" class="s69">50, </a><span class="s68">158,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">184<a href="#bookmark685" class="s79">–</a><a href="#bookmark685" class="s69">185</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark956" class="s69">return type, constructor, </a><a href="#bookmark618" class="s69">262 return values, function, </a>157<a href="#bookmark620" class="s79">–</a><a href="#bookmark620" class="s69">158</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">return <a href="#bookmark620" class="s75">statement, </a><a href="#bookmark618" class="s75">158 specifying return type, </a><a href="#bookmark620" class="s75">157 using, 158</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark874" class="s69">returning pointers, </a>238<a href="#bookmark888" class="s79">–</a><a href="#bookmark888" class="s69">244</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark885" class="s75">altering object through, </a>243<a href="#bookmark888" class="s85">–</a><a href="#bookmark888" class="s75">244</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark883" class="s75">assigning to pointer, </a>242 assigning to variable value</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark883" class="s75">pointed to by returned pointer, </a>242<a href="#bookmark885" class="s85">–</a><a href="#bookmark885" class="s75">243</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark877" class="s75">Inventory Pointer program, </a>239<a href="#bookmark878" class="s85">–</a><a href="#bookmark878" class="s75">240</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark878" class="s75">overview, </a>240<a href="#bookmark880" class="s85">–</a><a href="#bookmark880" class="s75">241</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark880" class="s75">using to display value, </a>241<a href="#bookmark883" class="s85">–</a><a href="#bookmark883" class="s75">242</a></p><p class="s68" style="padding-left: 21pt;text-indent: -11pt;text-align: left;"><a href="#bookmark758" class="s69">returning references, </a>198<a href="#bookmark771" class="s79">–</a><a href="#bookmark803" class="s69">203, </a>220 <a href="#bookmark768" class="s75">altering object through, 202 assigning, 202</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark768" class="s75">assigning to reference, 202 assigning to variable, </a><a href="#bookmark764" class="s75">202 displaying value of, </a>201 Inventory Referencer program,</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;">199<a href="#bookmark762" class="s85">–</a><a href="#bookmark762" class="s75">200</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark762" class="s75">overview, </a>200<a href="#bookmark764" class="s85">–</a><a href="#bookmark764" class="s75">201</a></p><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1270">408 Index</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1147" class="s69">reusability, class, </a>332<a href="#bookmark1149" class="s79">–</a><a href="#bookmark299" class="s69">333 role-playing game (RPG), </a><a href="#bookmark82" class="s69">72 run-time errors, 4</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a422">S</a></p><p style="padding-top: 1pt;padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark97" class="s69">scope resolution operator (::), </a><a href="#bookmark495" class="s69">9, </a><a href="#bookmark948" class="s69">125, </a><a href="#bookmark1175" class="s69">259, 345</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s69">scopes, </a>161<a href="#bookmark636" class="s79">–</a><a href="#bookmark636" class="s69">166</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark643" class="s75">hiding global variables, </a><a href="#bookmark634" class="s75">169 nested, </a>165<a href="#bookmark637" class="s85">–</a><a href="#bookmark686" class="s75">166, 185</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s75">Scoping program, </a>161<a href="#bookmark629" class="s85">–</a><a href="#bookmark629" class="s75">163</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark629" class="s75">separate, </a>163<a href="#bookmark631" class="s85">–</a><a href="#bookmark631" class="s75">164</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark232" class="s69">Score Rater program, </a>41<a href="#bookmark233" class="s79">–</a><a href="#bookmark233" class="s69">42</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark243" class="s75">version 2.0, </a>46<a href="#bookmark244" class="s85">–</a><a href="#bookmark244" class="s75">47</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark249" class="s75">version 3.0, </a>49<a href="#bookmark250" class="s85">–</a><a href="#bookmark250" class="s75">50</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark294" class="s69">seeding random number generator, </a>70<a href="#bookmark296" class="s79">–</a><a href="#bookmark313" class="s69">71, </a><a href="#bookmark513" class="s69">79, 134</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark133" class="s69">self-documenting code, </a>21 semicolon (;)</p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">if <a href="#bookmark235" class="s75">statement, 43</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark97" class="s75">terminating statements, 9</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark629" class="s69">separate scopes, </a>163<a href="#bookmark631" class="s79">–</a><a href="#bookmark631" class="s69">164</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark523" class="s69">sequential container, </a><a href="#bookmark550" class="s69">138, </a>147 <span class="s72">set </span><a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark1076" class="s69">139 shallow copy, 310</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">short int <a href="#bookmark127" class="s69">type, 19</a><a href="#bookmark127" class="s76">tbl</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">short <a href="#bookmark124" class="s69">modiﬁer, 18</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">signed <a href="#bookmark124" class="s69">modiﬁer, </a><span class="s68">18 Simple Boss 2.0 program,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">338<a href="#bookmark1159" class="s79">–</a><a href="#bookmark1159" class="s69">339</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1149" class="s69">Simple Boss program, </a>333<a href="#bookmark1150" class="s79">–</a><a href="#bookmark941" class="s69">335 Simple Critter program, </a>256<a href="#bookmark942" class="s79">–</a><a href="#bookmark401" class="s69">257 64-element array, 103</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">size()<a href="#bookmark375" class="s69">member function, </a><a href="#bookmark482" class="s69">92, 120</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">skYesNo2() <a href="#bookmark620" class="s69">function, 158</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1226" class="s69">slicing, OOP, 381</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s69">software reuse, 161</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">sort() <a href="#bookmark516" class="s69">algorithm, 135</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark78" class="s69">source code, 2</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">srand() <a href="#bookmark296" class="s69">function, </a><a href="#bookmark312" class="s69">71, 78</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark550" class="s69">stack, </a><a href="#bookmark1054" class="s69">147, </a><a href="#bookmark1096" class="s69">296, 325</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">stack <a href="#bookmark526" class="s69">STL container, </a><a href="#bookmark84" class="s69">139 standard I/O, 5</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark94" class="s75">displaying text, </a>8<a href="#bookmark97" class="s85">–</a><a href="#bookmark97" class="s75">9</a></p><p class="s74" style="padding-left: 64pt;text-indent: -11pt;text-align: left;"><span class="s73">std </span><a href="#bookmark100" class="s75">namespace, </a>10<span class="s57">–</span><a href="#bookmark111" class="s75">1</a>3 Game Over 2.0 program,</p><p class="s74" style="padding-left: 76pt;text-indent: 0pt;line-height: 10pt;text-align: left;">10<a href="#bookmark104" class="s85">–</a><a href="#bookmark104" class="s75">11</a></p><p class="s74" style="padding-left: 76pt;text-indent: -12pt;text-align: left;"><a href="#bookmark104" class="s75">Game Over 3.0 program, </a>11<a href="#bookmark107" class="s85">–</a><a href="#bookmark107" class="s75">12</a></p><p class="s73" style="padding-left: 64pt;text-indent: 0pt;line-height: 10pt;text-align: left;">using <a href="#bookmark107" class="s75">declarations, </a><span class="s74">12</span><a href="#bookmark111" class="s85">–</a><a href="#bookmark111" class="s75">13</a></p><p class="s73" style="padding-left: 64pt;text-indent: 0pt;text-align: left;">using <a href="#bookmark104" class="s75">directive, </a><a href="#bookmark111" class="s75">11, 13</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark84" class="s69">standard library, </a><a href="#bookmark165" class="s69">5, </a>35 Standard Template Library.</p><p class="s70" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">See <span class="s68">STL</span></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark972" class="s69">Static Critter program, </a>270<a href="#bookmark973" class="s79">–</a><a href="#bookmark973" class="s69">271</a></p><p class="s74" style="padding-top: 5pt;padding-left: 24pt;text-indent: -11pt;text-align: left;"><a href="#bookmark997" class="s69">static data members, </a><b>282 </b><a href="#bookmark975" class="s75">accessing, </a>272<a href="#bookmark978" class="s85">–</a>273 constant member function</p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark969" class="s75">and, 269</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark975" class="s75">declaring, 272</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark975" class="s75">initializing, 272</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark972" class="s75">Static Critter program, </a>270<a href="#bookmark973" class="s85">–</a><a href="#bookmark973" class="s75">271</a></p><p class="s72" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">static <span class="s68">keyword</span></p><p style="padding-left: 36pt;text-indent: -12pt;text-align: left;"><a href="#bookmark975" class="s75">declaring static data members, 272</a></p><p style="padding-left: 36pt;text-indent: -12pt;text-align: left;"><a href="#bookmark978" class="s75">declaring static member function, 273</a></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark997" class="s69">static member functions, 282</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark978" class="s75">calling, </a>273<a href="#bookmark982" class="s85">–</a><a href="#bookmark982" class="s75">274</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark978" class="s75">declaring, 273</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark979" class="s75">deﬁning, 273</a></p><p class="s72" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">std <a href="#bookmark100" class="s69">namespace, </a><span class="s68">10</span><a href="#bookmark111" class="s79">–</a><a href="#bookmark111" class="s69">13</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark510" class="s75">algorithms and, 133</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark169" class="s75">deﬁned, 36</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark100" class="s75">Game Over 2.0 program, </a>10<a href="#bookmark104" class="s85">–</a><a href="#bookmark104" class="s75">11</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark104" class="s75">Game Over 3.0 program, </a>11<a href="#bookmark107" class="s85">–</a><a href="#bookmark107" class="s75">12</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">using <a href="#bookmark107" class="s75">declarations, </a><span class="s74">12</span><a href="#bookmark111" class="s85">–</a><a href="#bookmark111" class="s75">13</a></p><p class="s73" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">using <a href="#bookmark104" class="s75">directive, </a><a href="#bookmark111" class="s75">11, 13</a></p><p class="s68" style="padding-left: 24pt;text-indent: -11pt;text-align: left;">stepwise reﬁnement <a href="#bookmark548" class="s75">deﬁned, </a><a href="#bookmark551" class="s75">146 when to use, 148</a></p><p class="s68" style="padding-left: 24pt;text-indent: -12pt;text-align: left;"><a href="#bookmark471" class="s69">STL (Standard Template Library), </a>115<a href="#bookmark554" class="s79">–</a><a href="#bookmark554" class="s69">149</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark508" class="s75">algorithms, </a>131<a href="#bookmark516" class="s85">–</a><a href="#bookmark516" class="s75">135</a></p><p class="s73" style="padding-left: 36pt;text-indent: 0pt;text-align: left;">ﬁnd()<a href="#bookmark513" class="s75">, 134</a></p><p class="s74" style="padding-left: 48pt;text-indent: -12pt;text-align: left;"><a href="#bookmark508" class="s75">High Scores program, </a>131<a href="#bookmark510" class="s85">–</a><a href="#bookmark510" class="s75">133</a></p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark510" class="s75">preparing to use, 133</a></p><p class="s73" style="padding-left: 48pt;text-indent: -12pt;text-align: left;">random_shufﬂe()<a href="#bookmark513" class="s75">, </a><span class="s74">134</span><a href="#bookmark516" class="s85">–</a><a href="#bookmark516" class="s75">135</a></p><p class="s73" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sort()<a href="#bookmark516" class="s75">, 135</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark523" class="s75">containers, </a>138<a href="#bookmark526" class="s85">–</a><a href="#bookmark526" class="s75">139</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark533" class="s75">Hangman game, </a>141<a href="#bookmark545" class="s85">–</a><a href="#bookmark545" class="s75">145</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><a href="#bookmark545" class="s75">ending, </a>145 entering main loop,</p><p class="s74" style="padding-left: 48pt;text-indent: 0pt;line-height: 10pt;text-align: left;">143<a href="#bookmark542" class="s85">–</a><a href="#bookmark542" class="s75">144</a></p><p class="s74" style="padding-left: 48pt;text-indent: -12pt;text-align: left;"><a href="#bookmark542" class="s75">getting player&#39;s guess, </a>144<a href="#bookmark545" class="s85">–</a><a href="#bookmark545" class="s75">145</a></p><p style="padding-left: 48pt;text-indent: -12pt;text-align: left;"><a href="#bookmark539" class="s75">initializing variables and constants, 143</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark533" class="s75">planning, </a>141<a href="#bookmark536" class="s85">–</a><a href="#bookmark536" class="s75">142</a></p><p style="padding-left: 36pt;text-indent: 0pt;text-align: left;"><a href="#bookmark536" class="s75">setting up, 142</a></p><p class="s74" style="padding-left: 36pt;text-indent: -11pt;text-align: left;"><a href="#bookmark494" class="s75">iterators, </a>123<a href="#bookmark508" class="s85">–</a>131 accessing member</p><p class="s74" style="padding-left: 36pt;text-indent: 4pt;text-align: center;"><a href="#bookmark503" class="s75">functions of vector element, </a>129<a href="#bookmark505" class="s85">–</a><a href="#bookmark500" class="s75">130 changing value of vector element, </a>128<a href="#bookmark503" class="s85">–</a><a href="#bookmark503" class="s75">129</a></p><p class="s74" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark495" class="s75">declaring, </a>125<a href="#bookmark497" class="s85">–</a><a href="#bookmark497" class="s75">126</a></p><p class="s73" style="padding-left: 48pt;text-indent: -12pt;text-align: left;">erase()<a href="#bookmark505" class="s75">vector member function, </a><span class="s74">130</span><a href="#bookmark508" class="s85">–</a><a href="#bookmark508" class="s75">131</a></p><p class="s74" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">Hero&#39;s Inventory 3.0</p><p class="s74" style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><a href="#bookmark494" class="s75">program, </a>123<a href="#bookmark495" class="s85">–</a><a href="#bookmark495" class="s75">125</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">insert()<a href="#bookmark505" class="s75">vector member function, 130</a></p><p class="s74" style="padding-left: 46pt;text-indent: -12pt;text-align: left;"><a href="#bookmark497" class="s75">looping through vector, </a>126<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark471" class="s75">overview, </a>115<a href="#bookmark475" class="s85">–</a><a href="#bookmark475" class="s75">116</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark526" class="s75">planning programs, </a>139<a href="#bookmark533" class="s85">–</a><a href="#bookmark533" class="s75">141</a></p><p class="s74" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><a href="#bookmark526" class="s75">pseudocode, </a>139<a href="#bookmark529" class="s85">–</a>140 stepwise reﬁnement,</p><p class="s74" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: left;">140<a href="#bookmark533" class="s85">–</a><a href="#bookmark533" class="s75">141</a></p><p class="s74" style="padding-left: 34pt;text-indent: -11pt;text-align: left;"><a href="#bookmark474" class="s75">vectors, </a>116<a href="#bookmark490" class="s85">–</a><a href="#bookmark520" class="s75">122, </a>136<a href="#bookmark524" class="s85">–</a>138 calling member functions of</p><p class="s74" style="padding-left: 46pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark485" class="s75">element, </a>121<a href="#bookmark489" class="s85">–</a><a href="#bookmark489" class="s75">122</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">clear()<a href="#bookmark489" class="s75">member function, 122</a></p><p class="s68" style="padding-left: 22pt;text-indent: -12pt;text-align: left;">STL (Standard Template Library) (<span class="s86">continued </span><span class="s87">)</span></p><p class="s74" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><a href="#bookmark479" class="s75">declaring, </a>119<a href="#bookmark482" class="s85">–</a>120 element insertion and</p><p style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><a href="#bookmark523" class="s75">deletion, 138</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">empty()<a href="#bookmark489" class="s75">member function, 122</a></p><p class="s74" style="padding-left: 34pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark519" class="s75">growth, </a>136<a href="#bookmark521" class="s85">–</a><a href="#bookmark521" class="s75">137</a></p><p class="s74" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">Hero&#39;s Inventory 2.0</p><p class="s74" style="padding-left: 46pt;text-indent: 0pt;text-align: left;"><a href="#bookmark477" class="s75">program, </a>117<a href="#bookmark479" class="s85">–</a><a href="#bookmark479" class="s75">119</a></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><a href="#bookmark485" class="s75">indexing, 121</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">pop_back()<a href="#bookmark489" class="s75">member function, 122</a></p><p style="padding-left: 46pt;text-indent: -12pt;text-align: left;"><a href="#bookmark479" class="s75">preparing to use, 119</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">push_back() <a href="#bookmark482" class="s75">member function, 120</a></p><p class="s73" style="padding-left: 46pt;text-indent: -12pt;text-align: left;">size()<a href="#bookmark482" class="s75">member function, 120</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark795" class="s69">strategy games, 216</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark163" class="s69">streams, </a><a href="#bookmark677" class="s69">34, 182</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">string <a href="#bookmark660" class="s69">argument, 175</a></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s69">string literal, 8</a></p><p class="s72" style="padding-left: 22pt;text-indent: -12pt;text-align: left;">string m_Name <span class="s68">member, BlackJack </span>GenericPlayer <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">string <a href="#bookmark161" class="s69">objects, </a><a href="#bookmark173" class="s69">33, </a><a href="#bookmark370" class="s69">38, </a><span class="s68">89</span><a href="#bookmark386" class="s79">–</a><a href="#bookmark516" class="s69">96, 135</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark386" class="s75">array, </a>96<a href="#bookmark388" class="s85">–</a><a href="#bookmark388" class="s75">97</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark375" class="s75">concatenating, 92</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark372" class="s75">creating, 91</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark417" class="s75">deﬁned, 110</a></p><p class="s73" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">empty()<a href="#bookmark386" class="s75">member function, 96</a></p><p class="s73" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">erase()<a href="#bookmark383" class="s75">member function, 95</a></p><p class="s73" style="padding-left: 34pt;text-indent: -11pt;text-align: left;">ﬁnd() <a href="#bookmark381" class="s75">member function, </a><span class="s74">94</span><a href="#bookmark383" class="s85">–</a><a href="#bookmark383" class="s75">95</a></p><p style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark378" class="s75">indexing, 93</a></p><p class="s74" style="padding-left: 22pt;text-indent: 0pt;text-align: left;"><a href="#bookmark378" class="s75">iterating through, </a>93<a href="#bookmark381" class="s85">–</a><a href="#bookmark381" class="s75">94</a></p><p class="s73" style="padding-left: 22pt;text-indent: 0pt;text-align: left;">size()<a href="#bookmark375" class="s75">member function, </a><a href="#bookmark370" class="s75">92 String Tester program, </a><span class="s74">89</span><a href="#bookmark372" class="s85">–</a><a href="#bookmark372" class="s75">91</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a href="#bookmark370" class="s69">String Tester program, </a>89<a href="#bookmark372" class="s79">–</a><a href="#bookmark372" class="s69">91</a></p><p class="s19" style="padding-top: 4pt;text-indent: 0pt;text-align: right;"><a name="bookmark1271">Index 409</a><a name="bookmark1272">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-top: 5pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">strings</p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark396" class="s75">C-style strings, </a>101<a href="#bookmark398" class="s85">–</a><a href="#bookmark398" class="s75">102</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark94" class="s75">overview, 8</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark75" class="s69">Stroustrup, Bjarne, 1</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1002" class="s69">structure, deﬁned, </a>284 subclass. <i>See </i>derived classes</p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark378" class="s69">subscripting operator ([ ]), </a><a href="#bookmark391" class="s69">93, </a>99,</p><p style="padding-left: 53pt;text-indent: 0pt;text-align: left;"><a href="#bookmark550" class="s69">121, 147</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark113" class="s69">subtraction ( ) operator, 14</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">suit m_Suit <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Card <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1150" class="s69">superclass, </a>335. <i>See also </i>base class Swap Pointer Version program,</p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">234<a href="#bookmark870" class="s79">–</a><a href="#bookmark870" class="s69">236</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark742" class="s69" name="bookmark1273">Swap program, </a>191<a href="#bookmark745" class="s79">–</a><a href="#bookmark745" class="s69">193</a></p><p class="s68" style="padding-left: 52pt;text-indent: -11pt;text-align: left;"><span class="s72">switch </span><a href="#bookmark226" class="s69">statements, </a><a href="#bookmark253" class="s69">39, </a>51<a href="#bookmark259" class="s79">–</a><a href="#bookmark310" class="s69">54, </a>77 <a href="#bookmark259" class="s75">creating ways to branch, </a><a href="#bookmark636" class="s75">54 deﬁning variables inside, </a><a href="#bookmark255" class="s75">166 Menu Chooser program, </a><span class="s74">52</span><a href="#bookmark256" class="s85">–</a><a href="#bookmark256" class="s75">53</a></p><p style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark505" class="s69">syntactic sugar, </a><a href="#bookmark901" class="s69">130, 250</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark82" class="s69">syntax errors, 4</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a name="a423">T</a></p><p class="s68" style="padding-top: 1pt;padding-left: 41pt;text-indent: 0pt;text-align: left;">tab (<span class="s72">\t</span><a href="#bookmark138" class="s69">), 23</a></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark665" class="s69">Taking Damage program, </a>177<a href="#bookmark669" class="s79">–</a><a href="#bookmark669" class="s69">179</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Talk() <span class="s68">member function,</span></p><p class="s72" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">Critter <a href="#bookmark992" class="s69">class, 279</a></p><p class="s72" style="padding-left: 57pt;text-indent: 0pt;text-align: center;">tellStory()<a href="#bookmark680" class="s69">function, 183</a></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: center;"><a href="#bookmark97" class="s69">terminating  statements, 9</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">test <span class="s68">expression, </span>for <a href="#bookmark359" class="s69">loop, </a><span class="s68">82 text, displaying through standard</span></p><p class="s68" style="padding-left: 51pt;text-indent: 0pt;line-height: 10pt;text-align: center;"><a href="#bookmark94" class="s69">output, </a>8<a href="#bookmark97" class="s79">–</a><a href="#bookmark97" class="s69">9</a></p><p class="s72" style="padding-left: 50pt;text-indent: 0pt;text-align: center;">this <a href="#bookmark1099" class="s69">pointer, 326</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark895" class="s69">Tic-Tac-Toe 2.0 game, </a>248 Tic-Tac-Toe Board program,</p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;line-height: 10pt;text-align: left;">103<a href="#bookmark403" class="s79">–</a><a href="#bookmark403" class="s69">105</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark771" class="s69">Tic-Tac-Toe game, </a>203<a href="#bookmark797" class="s79">–</a><a href="#bookmark797" class="s69">217</a></p><p class="s73" style="padding-left: 64pt;text-indent: -12pt;text-align: left;">announceWinner()<a href="#bookmark798" class="s75">function, 217</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">askNumber()<a href="#bookmark783" class="s75">function, 209</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">askYesNo()<a href="#bookmark780" class="s75">function, </a><span class="s74">208</span><a href="#bookmark783" class="s85">–</a><a href="#bookmark783" class="s75">209</a></p><p class="s73" style="padding-left: 64pt;text-indent: -12pt;text-align: left;">computerMove()<a href="#bookmark793" class="s75">function, </a><span class="s74">213</span><a href="#bookmark795" class="s85">–</a><a href="#bookmark795" class="s75">216</a></p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark774" class="s75">creating list of functions, 205</a></p><p class="s73" style="padding-left: 64pt;text-indent: -12pt;text-align: left;">displayBoard()<a href="#bookmark786" class="s75">function, </a><span class="s74">210</span><a href="#bookmark789" class="s85">–</a><a href="#bookmark789" class="s75">211</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">humanMove()<a href="#bookmark793" class="s75">function, 213</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">humanPiece()<a href="#bookmark783" class="s75">function, </a><span class="s74">209</span><a href="#bookmark786" class="s85">–</a><a href="#bookmark786" class="s75">210</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">instructions()<a href="#bookmark780" class="s75">function, 208</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">isLegal()<a href="#bookmark790" class="s75">function, </a><span class="s74">212</span><a href="#bookmark793" class="s85">–</a><a href="#bookmark793" class="s75">213</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">main()<a href="#bookmark778" class="s75">function, </a><span class="s74">207</span><a href="#bookmark780" class="s85">–</a><a href="#bookmark780" class="s75">208</a></p><p class="s73" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">opponent()<a href="#bookmark786" class="s75">function, 210</a></p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark773" class="s75">pseudocode, 204</a></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;"><a href="#bookmark773" class="s75">representing data, </a>204<a href="#bookmark774" class="s85">–</a><a href="#bookmark774" class="s75">205</a></p><p class="s74" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark774" class="s75">setting up, </a>205<a href="#bookmark778" class="s85">–</a><a href="#bookmark778" class="s75">207</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">winner()<a href="#bookmark789" class="s75">function, </a><span class="s74">211</span><a href="#bookmark790" class="s85">–</a><a href="#bookmark790" class="s75">212</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">toupper() <a href="#bookmark615" class="s69">function, 155</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">triple() <a href="#bookmark662" class="s69">function, 176</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark656" class="s69">Triple program, </a>174<a href="#bookmark662" class="s79">–</a><a href="#bookmark662" class="s69">176</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">true <span class="s68">values</span></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark235" class="s75">interpreting, 43</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark233" class="s75">testing, </a>42<span class="s57">–</span><a href="#bookmark235" class="s75">43</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark226" class="s69">truth, </a>39<a href="#bookmark229" class="s79">–</a><a href="#bookmark229" class="s69">40</a></p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark401" class="s69">two-dimensional array, 103</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1214" class="s69">type casting, </a>372 types</p><p class="s81" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">See also <span class="s74">classes</span></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark138" class="s75">deﬁning new names, </a><a href="#bookmark124" class="s75">23 fundamental, 18</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark125" class="s75">modiﬁers, </a>18<a href="#bookmark127" class="s85">–</a><a href="#bookmark127" class="s75">19</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark142" class="s75">understanding which to use, 24</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a424">U</a></p><p class="s72" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">unsigned int <a href="#bookmark127" class="s69">type, 19</a><span class="s70">tbl </span>unsigned long int <a href="#bookmark127" class="s69">type, 19</a><span class="s70">tbl </span>unsigned <a href="#bookmark124" class="s69">modiﬁer, </a><span class="s68">18 </span>unsigned short int <a href="#bookmark127" class="s69">type, 19</a><span class="s70">tbl </span>uppercase() <a href="#bookmark545" class="s69">function, 145</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;line-height: 10pt;text-align: left;">using <a href="#bookmark107" class="s69">declarations, </a><span class="s68">12</span><a href="#bookmark111" class="s79">–</a><a href="#bookmark111" class="s69">13</a></p><p class="s72" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">using <a href="#bookmark104" class="s69">directive, </a><a href="#bookmark111" class="s69">11, 13</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: left;"><a name="a425">V</a></p><p class="s68" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;line-height: 9pt;text-align: left;">values</p><p class="s81" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">See also <a href="#bookmark952" class="s75">assigning values data member, accessing, </a><a href="#bookmark135" class="s75">260 displaying, </a><span class="s74">22</span><a href="#bookmark138" class="s85">–</a><a href="#bookmark138" class="s75">23</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">references</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark739" class="s75">accessing, 190</a></p><p class="s74" style="padding-left: 21pt;text-indent: 11pt;text-align: left;"><a href="#bookmark739" class="s75">altering, </a>190<a href="#bookmark742" class="s85">–</a>191 returning from <span class="s73">main()</span></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark100" class="s75">function, 10</a></p><p class="s68" style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><a href="#bookmark120" class="s69">variables, </a>16<a href="#bookmark142" class="s79">–</a><a href="#bookmark142" class="s69">24</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark768" class="s75">assigning returning references, 202</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark133" class="s75">assigning values, </a>21<a href="#bookmark135" class="s85">–</a><a href="#bookmark135" class="s75">22</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark135" class="s75">to Boolean variables, 22</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark133" class="s75">to character variables, </a>21<a href="#bookmark135" class="s85">–</a><a href="#bookmark133" class="s75">22 to ﬂoating point variables, 21 to integer variables, 21</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark128" class="s75">declaring, </a>19<a href="#bookmark130" class="s85">–</a>20 deﬁning new names</p><p style="padding-left: 33pt;text-indent: 0pt;text-align: justify;"><a href="#bookmark138" class="s75">for types, 23</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark135" class="s75">displaying values, </a>22<a href="#bookmark138" class="s85">–</a><a href="#bookmark138" class="s75">23</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark124" class="s75">fundamental types, </a><a href="#bookmark120" class="s75">18 Game Stats program, </a>16<a href="#bookmark121" class="s85">–</a><a href="#bookmark138" class="s75">17 getting user input, </a>23 global. <span class="s81">See </span><a href="#bookmark135" class="s75">global variables initializing, 22</a></p><p class="s74" style="padding-top: 5pt;padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark130" class="s75">naming, </a>20<a href="#bookmark133" class="s85">–</a>21 performing arithmetic</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark142" class="s75">operations, </a>24<a href="#bookmark152" class="s85">–</a><a href="#bookmark152" class="s75">29</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark144" class="s75">altering value of variable, </a>26 combined assignment</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark144" class="s75">operators, </a>26<a href="#bookmark148" class="s85">–</a><a href="#bookmark148" class="s75">27</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark148" class="s75">decrement operator, </a>27<a href="#bookmark149" class="s85">–</a>28 Game Stats 2.0 program,</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;">24<a href="#bookmark144" class="s85">–</a><a href="#bookmark144" class="s75">26</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark148" class="s75">increment operator, </a>27<a href="#bookmark149" class="s85">–</a><a href="#bookmark149" class="s75">28 integer wrap around, </a>28<a href="#bookmark152" class="s85">–</a><a href="#bookmark152" class="s75">29</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark626" class="s75">scopes, 161</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark125" class="s75">type modiﬁers, </a>18<a href="#bookmark127" class="s85">–</a>19 understanding which types to</p><p style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark142" class="s75">use, 24</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">vector <a href="#bookmark471" class="s69">member functions, 115</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">vector <a href="#bookmark471" class="s69">objects, </a><span class="s68">115 </span>vector <a href="#bookmark526" class="s69">STL container, </a><span class="s68">139 </span>vector<span class="s88">&lt;</span>Card*&gt; m_Cards</p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">member, BlackJack <span class="s72">Hand </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 21pt;text-indent: -11pt;text-align: left;">vector<span class="s88">&lt;</span>Player&gt; m_Players <span class="s68">member, BlackJack </span>Game <a href="#bookmark1198" class="s69">class, 360</a></p><p class="s68" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark475" class="s69">vectors, </a>116<a href="#bookmark489" class="s79">–</a><a href="#bookmark519" class="s69">122, </a>136<a href="#bookmark523" class="s79">–</a><a href="#bookmark523" class="s69">138</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark547" class="s75">versus arrays, </a>146<a href="#bookmark550" class="s85">–</a>147 calling member functions of</p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark485" class="s75">element, </a>121<a href="#bookmark489" class="s85">–</a><a href="#bookmark489" class="s75">122</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">clear()<a href="#bookmark489" class="s75">member function, 122</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark479" class="s75">declaring, </a>119<a href="#bookmark482" class="s85">–</a><a href="#bookmark482" class="s75">120</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark548" class="s75">deﬁned, 146</a></p><p style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark523" class="s75">element insertion and deletion, 138</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">empty()<a href="#bookmark489" class="s75">member function, 122</a></p><p class="s74" style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark519" class="s75">growth, </a>136<a href="#bookmark521" class="s85">–</a><a href="#bookmark521" class="s75">137</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">capacity()<a href="#bookmark519" class="s75">member function, </a><span class="s74">136</span><a href="#bookmark521" class="s85">–</a><a href="#bookmark521" class="s75">137</a></p><p class="s73" style="padding-left: 45pt;text-indent: -11pt;text-align: left;">reserve()<a href="#bookmark521" class="s75">member function, 137</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark477" class="s75">Hero&#39;s Inventory 2.0 program, </a>117<a href="#bookmark479" class="s85">–</a><a href="#bookmark479" class="s75">119</a></p><p style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark485" class="s75">indexing, 121</a></p><p class="s74" style="padding-left: 33pt;text-indent: -12pt;text-align: left;"><a href="#bookmark497" class="s75">looping iterators through, </a>126<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p class="s74" style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark500" class="s75">altering iterator, </a>128 calling <span class="s73">begin()</span>vector</p><p class="s74" style="padding-left: 33pt;text-indent: 11pt;text-align: left;"><a href="#bookmark499" class="s75">member function, </a>127 calling <span class="s73">end()</span>vector member</p><p class="s74" style="padding-left: 45pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark499" class="s75">function, </a>127<a href="#bookmark500" class="s85">–</a><a href="#bookmark500" class="s75">128</a></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><a href="#bookmark500" class="s75">dereferencing iterator, 128</a></p><p class="s73" style="padding-left: 33pt;text-indent: -12pt;text-align: left;">pop_back()<a href="#bookmark489" class="s75">member function, 122</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark479" class="s75">preparing to use, 119</a></p><p class="s73" style="padding-left: 33pt;text-indent: -12pt;text-align: left;">push_back() <a href="#bookmark482" class="s75">member function, 120</a></p><p class="s73" style="padding-left: 21pt;text-indent: 0pt;line-height: 10pt;text-align: left;">size()<a href="#bookmark482" class="s75">member function, 120</a></p><p class="s19" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark1274">410 Index</a><a name="bookmark1275">&zwnj;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s68" style="padding-left: 53pt;text-indent: -12pt;text-align: left;"><a href="#bookmark1172" class="s69">virtual base class member functions, </a>344<a href="#bookmark1175" class="s79">–</a><a href="#bookmark1175" class="s69">345</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">virtual bool IsHitting() const = 0 <span class="s68">member, BlackJack </span>GenericPlayer <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">virtual bool IsHitting() const <span class="s68">member</span></p><p class="s74" style="padding-left: 52pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s73">House </span><a href="#bookmark1198" class="s75">class, </a>360 BlackJack <span class="s73">Player </span><a href="#bookmark1197" class="s75">class, 359</a></p><p style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1180" class="s69">virtual destructors, 347</a></p><p class="s68" style="padding-left: 41pt;text-indent: 0pt;text-align: left;"><a href="#bookmark1189" class="s69">virtual functions, </a>354<a href="#bookmark1192" class="s79">–</a><a href="#bookmark1224" class="s69">355, 380</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">virtual <a href="#bookmark967" class="s69">keyword, </a><a href="#bookmark1204" class="s69">268, 365</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void Add(Card* pCard) <span class="s68">member,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Hand </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;text-align: left;">void AdditionalCards <span class="s68">member,</span></p><p class="s68" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Deck </span><a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: justify;">void Bust() const <span class="s68">member, BlackJack </span>GenericPlayer <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 41pt;text-indent: 0pt;line-height: 10pt;text-align: left;">void Clear() <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">Hand <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 53pt;text-indent: -12pt;text-align: left;">void Deal(Hand&amp; aHand) <span class="s68">member, BlackJack </span>Deck <a href="#bookmark1198" class="s69">class, 360</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Flip() <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">Card <a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 21pt;text-indent: -12pt;text-align: left;">void FlipFirstCard() <span class="s68">member,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">House </span><a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Lose() const <span class="s68">member,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Player </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Play() <span class="s68">member, BlackJack</span></p><p class="s72" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">Game <a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Populate() <span class="s68">member,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Deck </span><a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Push() const <span class="s68">member,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Player </span><a href="#bookmark1197" class="s69">class, 359</a></p><p class="s72" style="padding-left: 21pt;text-indent: -12pt;text-align: left;">void setDisplay <a href="#bookmark653" class="s69">prototype, </a><span class="s68">173</span><a href="#bookmark656" class="s79">–</a><a href="#bookmark656" class="s69">174</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">void Shufﬂe() <span class="s68">member,</span></p><p class="s68" style="padding-left: 21pt;text-indent: 0pt;text-align: left;">BlackJack <span class="s72">Deck </span><a href="#bookmark1198" class="s69">class, 360</a></p><p class="s72" style="padding-left: 21pt;text-indent: -12pt;text-align: left;">void Win() const <span class="s68">member, BlackJack </span>Player <a href="#bookmark1197" class="s69">class, 359</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><a name="a426">W</a></p><p class="s72" style="padding-top: 1pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">while (true) <a href="#bookmark273" class="s69">loop, </a><a href="#bookmark313" class="s69">60, 79</a></p><p class="s72" style="padding-left: 10pt;text-indent: 0pt;text-align: left;">while <a href="#bookmark259" class="s69">loops, </a><span class="s68">54</span><a href="#bookmark264" class="s79">–</a><a href="#bookmark310" class="s69">56, 77</a></p><p style="padding-left: 21pt;text-indent: 0pt;text-align: left;"><a href="#bookmark636" class="s75">deﬁning variables inside, 166</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">versus <span class="s73">for </span><a href="#bookmark419" class="s75">loop, </a><a href="#bookmark261" class="s75">111 overview, </a>55<a href="#bookmark264" class="s85">–</a><a href="#bookmark264" class="s75">56</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark259" class="s75">Play Again program, </a>54<a href="#bookmark261" class="s85">–</a><a href="#bookmark261" class="s75">55</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark89" class="s69">whitespace, </a><a href="#bookmark171" class="s69">7, </a><a href="#bookmark847" class="s69">37, </a>226 Win32 Application</p><p class="s68" style="padding-left: 24pt;text-indent: 0pt;text-align: left;">Wizard <span class="s71">– </span><a href="#bookmark1234" class="s69">Application Settings, 385ﬁg</a></p><p class="s72" style="padding-left: 24pt;text-indent: -12pt;text-align: left;">winner()<a href="#bookmark789" class="s69">function, Tic-Tac-Toe game, </a><span class="s68">211</span><a href="#bookmark790" class="s79">–</a><a href="#bookmark790" class="s69">212</a></p><p class="s68" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark406" class="s69">Word Jumble game, </a>106<a href="#bookmark408" class="s79">–</a><a href="#bookmark408" class="s69">107</a></p><p class="s74" style="padding-left: 36pt;text-indent: -11pt;text-align: left;"><a href="#bookmark408" class="s75">choosing word to jumble, </a>107<a href="#bookmark410" class="s85">–</a><a href="#bookmark410" class="s75">108</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark413" class="s75">entering game loop, </a>109<a href="#bookmark416" class="s85">–</a><a href="#bookmark416" class="s75">110 exiting, 110</a></p><p class="s74" style="padding-left: 24pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="#bookmark410" class="s75">jumbling word, </a>108<a href="#bookmark413" class="s85">–</a><a href="#bookmark413" class="s75">109</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark408" class="s75">setting up, 107</a></p><p style="padding-left: 24pt;text-indent: 0pt;text-align: left;"><a href="#bookmark413" class="s75">welcoming player, 109</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s34" style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><a name="a427">Y</a></p><p class="s68" style="padding-top: 1pt;padding-left: 12pt;text-indent: 0pt;text-align: left;"><a href="#bookmark615" class="s69">Yes or No program, </a>155<a href="#bookmark618" class="s79">–</a><a href="#bookmark618" class="s69">157</a></p></body></html>
